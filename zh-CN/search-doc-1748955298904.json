{"searchDocs":[{"title":"Fury v0.1.1 released","type":0,"sectionRef":"#","url":"/zh-CN/blog/fury_0_1_1_release","content":"","keywords":"","version":null},{"title":"Highlights​","type":1,"pageTitle":"Fury v0.1.1 released","url":"/zh-CN/blog/fury_0_1_1_release#highlights","content":" Java Dubbo fury integration: https://github.com/fury-project/dubbo-serialization-furyAdd class checker API to customize security check behaviour(#890) Python Support pyarrow6 bazel build (#859 #862)Support python 3.10 (#859 #862)  ","version":null,"tagName":"h2"},{"title":"What's Changed​","type":1,"pageTitle":"Fury v0.1.1 released","url":"/zh-CN/blog/fury_0_1_1_release#whats-changed","content":" [Java] Dubbo fury integration: https://github.com/fury-project/dubbo-serialization-fury[Java] fix isSecure check for xlang in java (#822)[Java] register empty object by default (#829)[Java] upgrade guava for(#831)[Python] Support pyarrow6 bazel build (#859)[Python] add missing shared lib for python (#862)[Java] optimize buffer copy (#870)[Doc] Fix row format doc (#873)[Java] fix ofHashMap (#877)[Java] add jdk tools.jar for tests (#881)[Java] Fix lazy bean serializer (#883)[Java] print exception for fury creation (#885)[Java] remove getCurrentFury API (#887)[Java] Add fury map iterator api (#889)[Java] Add class checker API (#890)[Python] Fix python linux deploy missing shared library files (#892)[[Java] refine AllowListChecker (#893)  Full Changelog: https://github.com/alipay/fury/compare/v0.1.0...v0.1.1 ","version":null,"tagName":"h2"},{"title":"Fury v0.1.2 released","type":0,"sectionRef":"#","url":"/zh-CN/blog/fury_0_1_2_release","content":"","keywords":"","version":null},{"title":"What's Changed​","type":1,"pageTitle":"Fury v0.1.2 released","url":"/zh-CN/blog/fury_0_1_2_release#whats-changed","content":" [Java] Skip toString in annotation invocation handler readObject (#746)[Python] Use cloudpickle for local function serialization (#914)[Python] fix row format getter (#915)  Full Changelog: https://github.com/alipay/fury/compare/v0.1.0...v0.1.1 ","version":null,"tagName":"h2"},{"title":"Fury v0.1.0 released","type":0,"sectionRef":"#","url":"/zh-CN/blog/fury_0_1_0_release","content":"","keywords":"","version":null},{"title":"New Contributors​","type":1,"pageTitle":"Fury v0.1.0 released","url":"/zh-CN/blog/fury_0_1_0_release#new-contributors","content":" @wangweipeng2 made their first contribution in https://github.com/alipay/fury/pull/215@rainsonGain made their first contribution in https://github.com/alipay/fury/pull/429@leeco-cloud made their first contribution in https://github.com/alipay/fury/pull/436@dependabot made their first contribution in https://github.com/alipay/fury/pull/590@tisonkun made their first contribution in https://github.com/alipay/fury/pull/762@hieu-ht made their first contribution in https://github.com/alipay/fury/pull/786@s31k31 made their first contribution in https://github.com/alipay/fury/pull/782  ","version":null,"tagName":"h2"},{"title":"What's Changed​","type":1,"pageTitle":"Fury v0.1.0 released","url":"/zh-CN/blog/fury_0_1_0_release#whats-changed","content":" Create pull_request_template.md by @chaokunyang in https://github.com/alipay/fury/pull/2add apache licence file by @chaokunyang in https://github.com/alipay/fury/pull/3[Java] add java code structure by @chaokunyang in https://github.com/alipay/fury/pull/4[Java] add java code formatter by @chaokunyang in https://github.com/alipay/fury/pull/5[Java] Add licence to file header by @chaokunyang in https://github.com/alipay/fury/pull/6[Docs] add fury debug doc by @chaokunyang in https://github.com/alipay/fury/pull/8[Docs] refine readme by fix syntax error by @chaokunyang in https://github.com/alipay/fury/pull/10[Community] add getting involved document by @chaokunyang in https://github.com/alipay/fury/pull/12[Java] add java ci by @chaokunyang in https://github.com/alipay/fury/pull/14[Java] fix license format conflict with checkstyle by @chaokunyang in https://github.com/alipay/fury/pull/16[Java] Add unsafe memory util by @chaokunyang in https://github.com/alipay/fury/pull/18[Java] add tuple2/tuple3 utils by @chaokunyang in https://github.com/alipay/fury/pull/20[Java] add LoggerFactory for disable logging more easily by @chaokunyang in https://github.com/alipay/fury/pull/22[Java] add string utils by @chaokunyang in https://github.com/alipay/fury/pull/24[Java] add memory read/write utils by @chaokunyang in https://github.com/alipay/fury/pull/26[Community] update slack invite link by @chaokunyang in https://github.com/alipay/fury/pull/27[Java] add cross-language type id by @chaokunyang in https://github.com/alipay/fury/pull/35[Java] Add api annotation to mark api stability by @chaokunyang in https://github.com/alipay/fury/pull/37[Java] add int array to avoid box cost by @chaokunyang in https://github.com/alipay/fury/pull/39[Java] add auto-growing object array by @chaokunyang in https://github.com/alipay/fury/pull/41[Java] Add optimized map for faster lookup by @chaokunyang in https://github.com/alipay/fury/pull/43[Java] add basic type inference support by @chaokunyang in https://github.com/alipay/fury/pull/45[Java] Add long map support by @chaokunyang in https://github.com/alipay/fury/pull/47[Java] add fury exceptions by @chaokunyang in https://github.com/alipay/fury/pull/48[Java] add MurmurHash3 support by @chaokunyang in https://github.com/alipay/fury/pull/50[Java] add Reflection support by @chaokunyang in https://github.com/alipay/fury/pull/52add FieldAccessor and fields compare by @chaokunyang in https://github.com/alipay/fury/pull/54[Java] implement basic compiler backend based on janino by @chaokunyang in https://github.com/alipay/fury/pull/56[Java] Add extensible classloaders by @chaokunyang in https://github.com/alipay/fury/pull/58[Java] Support multi key weak map by @chaokunyang in https://github.com/alipay/fury/pull/60[Java] codegen framework for fury java jit by @chaokunyang in https://github.com/alipay/fury/pull/61[Java] add utility for lambda functions by @chaokunyang in https://github.com/alipay/fury/pull/63[Java] add common expression ir for programing construct by @chaokunyang in https://github.com/alipay/fury/pull/64[Java] fix if expression with return child node by @chaokunyang in https://github.com/alipay/fury/pull/66[Java] add expression tree traverser and updater by @chaokunyang in https://github.com/alipay/fury/pull/68[Java] add missing author java odc by @chaokunyang in https://github.com/alipay/fury/pull/69[Java] add enum string resolver support by @chaokunyang in https://github.com/alipay/fury/pull/72[Java] add reference tracking support by @chaokunyang in https://github.com/alipay/fury/pull/74[Java] add java serializer interface by @chaokunyang in https://github.com/alipay/fury/pull/76[Java] add test utils by @chaokunyang in https://github.com/alipay/fury/pull/77[Java] add generics hierarchy resolving support by @chaokunyang in https://github.com/alipay/fury/pull/79[Java] add serialization context to relate serializing different objects by @chaokunyang in https://github.com/alipay/fury/pull/82[Java] add class info util by @chaokunyang in https://github.com/alipay/fury/pull/83[Java] add buffer callback by @chaokunyang in https://github.com/alipay/fury/pull/87[Java] implement basic java serialization framework by @chaokunyang in https://github.com/alipay/fury/pull/88[Java] Add string serializer by @chaokunyang in https://github.com/alipay/fury/pull/90[Java] add string builder/buffer serializers by @chaokunyang in https://github.com/alipay/fury/pull/93[Java] add missing uint serializers tests by @chaokunyang in https://github.com/alipay/fury/pull/95[Java] Implement enum serialization for java by @chaokunyang in https://github.com/alipay/fury/pull/97[Java] Implement bigint/decimal serialization for java by @chaokunyang in https://github.com/alipay/fury/pull/101[Community] add zhihu link by @chaokunyang in https://github.com/alipay/fury/pull/103[Community] fix zhihu link by @chaokunyang in https://github.com/alipay/fury/pull/104[Community] update slack desc by @chaokunyang in https://github.com/alipay/fury/pull/105[Java] Add object array serializer by @chaokunyang in https://github.com/alipay/fury/pull/107[Java] Implement primitive array serializers by @chaokunyang in https://github.com/alipay/fury/pull/109[Java] support serializing byte buffer by @chaokunyang in https://github.com/alipay/fury/pull/113[Java] support serializing java.util.concurrent.atomics by @chaokunyang in https://github.com/alipay/fury/pull/115[Java] move string array serializers by @chaokunyang in https://github.com/alipay/fury/pull/116[Java] support Currency serialization by @chaokunyang in https://github.com/alipay/fury/pull/118[Java] support charset serialization by @chaokunyang in https://github.com/alipay/fury/pull/120[Java] support URI serialization by @chaokunyang in https://github.com/alipay/fury/pull/122[Java] add support for regex serialization by @chaokunyang in https://github.com/alipay/fury/pull/124[Java] support uuid serialization by @chaokunyang in https://github.com/alipay/fury/pull/126[Java] add class serialization test by @chaokunyang in https://github.com/alipay/fury/pull/127[Java] add Locale Serializer support by @chaokunyang in https://github.com/alipay/fury/pull/129[Java] fix LocaleSerializer cache thread safety by @chaokunyang in https://github.com/alipay/fury/pull/132[Java] serialization support for java.util.OptionalXXX by @chaokunyang in https://github.com/alipay/fury/pull/134[Java] Add time serializers by @chaokunyang in https://github.com/alipay/fury/pull/137[Java] add ObjectInput/Output based on fury by @chaokunyang in https://github.com/alipay/fury/pull/139[Java] add JavaSerializer based on ObjectInputStream/ObjectOutputStream by @chaokunyang in https://github.com/alipay/fury/pull/141[Java] implement jdk proxy serialization by @chaokunyang in https://github.com/alipay/fury/pull/143[Java] implement Externalizable serialization by @chaokunyang in https://github.com/alipay/fury/pull/145[Java] implement Collection serialization by @chaokunyang in https://github.com/alipay/fury/pull/147[Java] add sortedset serializer by @chaokunyang in https://github.com/alipay/fury/pull/149[Java] add empty collection serializer by @chaokunyang in https://github.com/alipay/fury/pull/151[Java] add single collection serializers by @chaokunyang in https://github.com/alipay/fury/pull/153[Java] add ConcurrentSkipListSet serializer by @chaokunyang in https://github.com/alipay/fury/pull/155[Java] add java.util.Vector serializer by @chaokunyang in https://github.com/alipay/fury/pull/157[Java] add java.util.ArrayDeque serializer by @chaokunyang in https://github.com/alipay/fury/pull/159[Java] add java.util.EnumSet serializer by @chaokunyang in https://github.com/alipay/fury/pull/161[Java] implement java.util.BitSet serializer by @chaokunyang in https://github.com/alipay/fury/pull/163[Java] implement java.util.PriorityQueue serialization by @chaokunyang in https://github.com/alipay/fury/pull/165[Java] implement map serialization framework by @chaokunyang in https://github.com/alipay/fury/pull/167[Java] support java.util.SortedMap serialization by @chaokunyang in https://github.com/alipay/fury/pull/169[Java] support empty map serialization by @chaokunyang in https://github.com/alipay/fury/pull/171[Java] implement singleton map serialization by @chaokunyang in https://github.com/alipay/fury/pull/173[Java] support concurrent map serialization by @chaokunyang in https://github.com/alipay/fury/pull/175[Java] implement enum map serialization by @chaokunyang in https://github.com/alipay/fury/pull/177[Java] group and sort descriptors for cache and consistency by @chaokunyang in https://github.com/alipay/fury/pull/179[Java] Implement object serialization by @chaokunyang in https://github.com/alipay/fury/pull/181[Java] fury native lambda serialization for java by @chaokunyang in https://github.com/alipay/fury/pull/183Update feature_request.md by @chaokunyang in https://github.com/alipay/fury/pull/184Update bug_report.md by @chaokunyang in https://github.com/alipay/fury/pull/185Update bug_report.md by @chaokunyang in https://github.com/alipay/fury/pull/186[Java] Optimize Collections.synchronized serialization performance by @chaokunyang in https://github.com/alipay/fury/pull/188[Java] optimize unmodifiable serialization by @chaokunyang in https://github.com/alipay/fury/pull/191[Java] add native readResolve/writeReplace serialization support by @chaokunyang in https://github.com/alipay/fury/pull/193[Java] [1/N] support type forward/backward compatibility by @chaokunyang in https://github.com/alipay/fury/pull/196[Java] Add struct util to create test struct class dynamically by @chaokunyang in https://github.com/alipay/fury/pull/199Revert &quot;[Java] Add struct util to create test struct class dynamically&quot; by @chaokunyang in https://github.com/alipay/fury/pull/200[Java] Add struct util to create test struct class dynamically by @chaokunyang in https://github.com/alipay/fury/pull/201[Java][2/N] support type forward/backward compatibility by @chaokunyang in https://github.com/alipay/fury/pull/195[Java] Optimize subclass container serialization by @chaokunyang in https://github.com/alipay/fury/pull/205[Java] remove generated classes automatically by @chaokunyang in https://github.com/alipay/fury/pull/207[Java] implement collection serialization field by field by @chaokunyang in https://github.com/alipay/fury/pull/209[Java] implement java map serialization field by field by @chaokunyang in https://github.com/alipay/fury/pull/210[Java] optimize jdk compatible collection serializer by @chaokunyang in https://github.com/alipay/fury/pull/212[Java] support compatible map serialization by @chaokunyang in https://github.com/alipay/fury/pull/213[JavaScript] javascript of fury by @wangweipeng2 in https://github.com/alipay/fury/pull/215[JavaScript]Replace Nodejs lib by standard lib by @wangweipeng2 in https://github.com/alipay/fury/pull/217[JavaScript]Add test by @wangweipeng2 in https://github.com/alipay/fury/pull/219[JavaScript] Change package.json entry file by @wangweipeng2 in https://github.com/alipay/fury/pull/221Update feature_request.md by @chaokunyang in https://github.com/alipay/fury/pull/223[Java] implement fury-native jdk compatible object serialization by @chaokunyang in https://github.com/alipay/fury/pull/222[Java] Add class def for meta sharing by @chaokunyang in https://github.com/alipay/fury/pull/226[Java] Support meta shared serialization by @chaokunyang in https://github.com/alipay/fury/pull/225[Java] add missing license to ObjectStreamSerializer by @chaokunyang in https://github.com/alipay/fury/pull/228[Java] move loadClass to ClassUtils by @chaokunyang in https://github.com/alipay/fury/pull/229[javascript] add javascript ci by @chaokunyang in https://github.com/alipay/fury/pull/230Fix CI by @chaokunyang in https://github.com/alipay/fury/pull/232[Java] forbid classes serialization by blacklist by @chaokunyang in https://github.com/alipay/fury/pull/234[Java] generate field accessor on the flight by @chaokunyang in https://github.com/alipay/fury/pull/240[Java] expression optimizer for method split by @chaokunyang in https://github.com/alipay/fury/pull/241[JavaScript]Fix ci by @wangweipeng2 in https://github.com/alipay/fury/pull/242[Java] add codec builder base class by @chaokunyang in https://github.com/alipay/fury/pull/244[Java] add jdk serializable check by @chaokunyang in https://github.com/alipay/fury/pull/248[Java] add base object serializer builder by @chaokunyang in https://github.com/alipay/fury/pull/249[Java] Implement jit serialization for object by @chaokunyang in https://github.com/alipay/fury/pull/250[Java] Fix meta shared serializer when jit enabled by @chaokunyang in https://github.com/alipay/fury/pull/252Update bug_report.md by @chaokunyang in https://github.com/alipay/fury/pull/253[Java] type forward/backward compatible jit serializer by @chaokunyang in https://github.com/alipay/fury/pull/254[Java] Meta shared object jit serializer by @chaokunyang in https://github.com/alipay/fury/pull/255[Java] jit context for manage compilation by @chaokunyang in https://github.com/alipay/fury/pull/259[Java] fix javaFury thread safety by @chaokunyang in https://github.com/alipay/fury/pull/261[Java] set rootdir for maven multi-module project by @chaokunyang in https://github.com/alipay/fury/pull/263[Java] add guava immutable list serializer by @chaokunyang in https://github.com/alipay/fury/pull/264[Java] add guava immutable map serializer by @chaokunyang in https://github.com/alipay/fury/pull/266[Java] Async compilation for jit serializers by @chaokunyang in https://github.com/alipay/fury/pull/268[Java] add url serializer by @chaokunyang in https://github.com/alipay/fury/pull/269[Java] optimize java serialization by @chaokunyang in https://github.com/alipay/fury/pull/271[Java] bind fury with classloader by @chaokunyang in https://github.com/alipay/fury/pull/274[Java] add forward serializer by @chaokunyang in https://github.com/alipay/fury/pull/276[Java] add thread-safe fury serializer by @chaokunyang in https://github.com/alipay/fury/pull/278[Java] Add guava/sublist todo serializer by @chaokunyang in https://github.com/alipay/fury/pull/282[Java] add zero-copy tests by @chaokunyang in https://github.com/alipay/fury/pull/284[Java] Profiling fury init by @chaokunyang in https://github.com/alipay/fury/pull/286[Java] add complex cyclic tests by @chaokunyang in https://github.com/alipay/fury/pull/288[Java] enable testArrayStructZeroCopy by @chaokunyang in https://github.com/alipay/fury/pull/290[Java] add complex collection struct tests by @chaokunyang in https://github.com/alipay/fury/pull/292[Java] add complex map struct tests by @chaokunyang in https://github.com/alipay/fury/pull/294[Java] misc serializer tests by @chaokunyang in https://github.com/alipay/fury/pull/295[Java] optimize time reference by @chaokunyang in https://github.com/alipay/fury/pull/297[Java] add unsafe accessor test for duplicate fields by @chaokunyang in https://github.com/alipay/fury/pull/299[Java] add serializer factory test by @chaokunyang in https://github.com/alipay/fury/pull/301[Java] add duplicate fields tests by @chaokunyang in https://github.com/alipay/fury/pull/303[Java] add protocol interoperability tests by @chaokunyang in https://github.com/alipay/fury/pull/305[Java] Lazy map support by @chaokunyang in https://github.com/alipay/fury/pull/307[Java] Support deserialize unexisted classes by @chaokunyang in https://github.com/alipay/fury/pull/309[Java] fix OutOfBandTest pkg by @chaokunyang in https://github.com/alipay/fury/pull/310javascript latin1 string performance improvement by @wangweipeng2 in https://github.com/alipay/fury/pull/312[Java] Add row format interface by @chaokunyang in https://github.com/alipay/fury/pull/316[Java] add Default arrow type visitor by @chaokunyang in https://github.com/alipay/fury/pull/318[Java] add decimal util by @chaokunyang in https://github.com/alipay/fury/pull/320[Java] add pyarrow style data types API in java by @chaokunyang in https://github.com/alipay/fury/pull/322[Java] add fury InputStream/OutputStream by @chaokunyang in https://github.com/alipay/fury/pull/324[Java] Infer arrow schema for java bean by @chaokunyang in https://github.com/alipay/fury/pull/326[Java] add bitmap utils by @chaokunyang in https://github.com/alipay/fury/pull/328[Java] binary row format data structure by @chaokunyang in https://github.com/alipay/fury/pull/330[Java] binary row format writer by @chaokunyang in https://github.com/alipay/fury/pull/333[Java] add arrow visitor for value accessor by @chaokunyang in https://github.com/alipay/fury/pull/335[Java] add row format tests by @chaokunyang in https://github.com/alipay/fury/pull/337[Java] add row format encoder interface by @chaokunyang in https://github.com/alipay/fury/pull/339[Java] Base builder for building jit encoder by @chaokunyang in https://github.com/alipay/fury/pull/341[Java] add jit-based row encoder implementation by @chaokunyang in https://github.com/alipay/fury/pull/343[Java] format code by @chaokunyang in https://github.com/alipay/fury/pull/344[Java] add missing license by @chaokunyang in https://github.com/alipay/fury/pull/345[Java] Add fury channel by @chaokunyang in https://github.com/alipay/fury/pull/346[Java] Mock io for count bytes by @chaokunyang in https://github.com/alipay/fury/pull/349[Java] Arrow record batch zero-copy serializers by @chaokunyang in https://github.com/alipay/fury/pull/351[Java] Add missing license by @chaokunyang in https://github.com/alipay/fury/pull/352[Java] optimize decimal encoding performance by @chaokunyang in https://github.com/alipay/fury/pull/354[Java] optimize schema creation perf by @chaokunyang in https://github.com/alipay/fury/pull/356[Java] update row javadoc by @chaokunyang in https://github.com/alipay/fury/pull/357[Java] Support convert row to arrow format by @chaokunyang in https://github.com/alipay/fury/pull/359[Java] add arrow serializers tests by @chaokunyang in https://github.com/alipay/fury/pull/361[Java] fix arrow tests by @chaokunyang in https://github.com/alipay/fury/pull/362[Java] add serialize to buffer tests by @chaokunyang in https://github.com/alipay/fury/pull/364[Java] add basic cross-langauge serialization tests by @chaokunyang in https://github.com/alipay/fury/pull/366[Java] add serializeBeanTest by @chaokunyang in https://github.com/alipay/fury/pull/367[Java] add registerTest by @chaokunyang in https://github.com/alipay/fury/pull/368[Java] add testTreeMap by @chaokunyang in https://github.com/alipay/fury/pull/369[Java] add offheap tests by @chaokunyang in https://github.com/alipay/fury/pull/371[Java] refine classresovler tests by @chaokunyang in https://github.com/alipay/fury/pull/373[Java] add private bean tests by @chaokunyang in https://github.com/alipay/fury/pull/375[Java] add blocking queue test by @chaokunyang in https://github.com/alipay/fury/pull/377[Java] add duplicate fields test by @chaokunyang in https://github.com/alipay/fury/pull/378[Java] add guava tests by @chaokunyang in https://github.com/alipay/fury/pull/381[Java] add test for jdk serializable check by @chaokunyang in https://github.com/alipay/fury/pull/383[Java] add secure mode test by @chaokunyang in https://github.com/alipay/fury/pull/385[Java] ensure fury doesn't introduce class leak by @chaokunyang in https://github.com/alipay/fury/pull/387[Java] add tests for ignoring fields by @chaokunyang in https://github.com/alipay/fury/pull/389[Java] add thread to blacklist by @chaokunyang in https://github.com/alipay/fury/pull/391[Java] Add complex testsuite by @chaokunyang in https://github.com/alipay/fury/pull/393[Java] add benchmark framework by @chaokunyang in https://github.com/alipay/fury/pull/399[Java] add plotting tool by @chaokunyang in https://github.com/alipay/fury/pull/400[Java] add usertype benchmarks by @chaokunyang in https://github.com/alipay/fury/pull/401[Java] Add string benchmarks by @chaokunyang in https://github.com/alipay/fury/pull/403[Java] add array benchmark by @chaokunyang in https://github.com/alipay/fury/pull/405[Java] add map benchmark by @chaokunyang in https://github.com/alipay/fury/pull/409[Java] add memory benchmark by @chaokunyang in https://github.com/alipay/fury/pull/410[Java] add row format benchmark by @chaokunyang in https://github.com/alipay/fury/pull/411[Java] add zero copy benchmark by @chaokunyang in https://github.com/alipay/fury/pull/413[Java] Add flatbufffer/protobuffer benchmarks by @chaokunyang in https://github.com/alipay/fury/pull/415[Java] update integration_tests readme by @chaokunyang in https://github.com/alipay/fury/pull/416[C++] generate arrow bazel depdencies from pyarrow bundled shared library by @chaokunyang in https://github.com/alipay/fury/pull/418[C++] Add bazel C++ build support by @chaokunyang in https://github.com/alipay/fury/pull/420[C++] add c++ logging util by @chaokunyang in https://github.com/alipay/fury/pull/423[C++] add cpp status util by @chaokunyang in https://github.com/alipay/fury/pull/425[C++] basic util for bytes operations by @chaokunyang in https://github.com/alipay/fury/pull/427Update bug_report.md by @chaokunyang in https://github.com/alipay/fury/pull/430[Java] register class check duplciate id by @chaokunyang in https://github.com/alipay/fury/pull/432[Java] move ExpressionOptimizer into codegen package by @chaokunyang in https://github.com/alipay/fury/pull/433Format/container encoder by @rainsonGain in https://github.com/alipay/fury/pull/429[Java] Thread-safe fury implementation by pooling by @leeco-cloud in https://github.com/alipay/fury/pull/436[C++] Add c++ buffer util by @chaokunyang in https://github.com/alipay/fury/pull/438[CI] fix CI by @chaokunyang in https://github.com/alipay/fury/pull/439[C++] Binary row format for c++ by @chaokunyang in https://github.com/alipay/fury/pull/441[C++] C++ row format to arrow by @chaokunyang in https://github.com/alipay/fury/pull/442[C++] Add c++ ci by @chaokunyang in https://github.com/alipay/fury/pull/444[CI] Add code lint ci job by @chaokunyang in https://github.com/alipay/fury/pull/446[Doc] Add c++ debugging doc by @chaokunyang in https://github.com/alipay/fury/pull/448[Python] [1/n] Fury python binding by @chaokunyang in https://github.com/alipay/fury/pull/450[python] Type infer for python by @chaokunyang in https://github.com/alipay/fury/pull/458[Java] skip checkstyle in java test by @chaokunyang in https://github.com/alipay/fury/pull/459[Python] Fix python ci by @chaokunyang in https://github.com/alipay/fury/pull/461[Python] Python row format by @chaokunyang in https://github.com/alipay/fury/pull/463[Python] Python encoder for row format by @chaokunyang in https://github.com/alipay/fury/pull/466[Python] Row and arrow format converter by @chaokunyang in https://github.com/alipay/fury/pull/467[C++] cpp murmurhash by @chaokunyang in https://github.com/alipay/fury/pull/469[Python] Python murmur hash binding by @chaokunyang in https://github.com/alipay/fury/pull/472[Python] add weak key identity map by @chaokunyang in https://github.com/alipay/fury/pull/474[Python] add reference resolver by @chaokunyang in https://github.com/alipay/fury/pull/476[Python] Implement python serialization framework by @chaokunyang in https://github.com/alipay/fury/pull/478[Python] add common python serializers by @chaokunyang in https://github.com/alipay/fury/pull/480[Python] struct serialization support by @chaokunyang in https://github.com/alipay/fury/pull/482[Java] Fix get super type exception by @chaokunyang in https://github.com/alipay/fury/pull/484[Java] fix map final value type serializer in jit compatible mode by @chaokunyang in https://github.com/alipay/fury/pull/485[Docs] add fury logo by @chaokunyang in https://github.com/alipay/fury/pull/487[Docs] add square fury logo by @chaokunyang in https://github.com/alipay/fury/pull/488[python] add cpp reference resolver based on abseil map by @chaokunyang in https://github.com/alipay/fury/pull/493[python] add cpp class resolver by @chaokunyang in https://github.com/alipay/fury/pull/494[Python] cython serialization framework by @chaokunyang in https://github.com/alipay/fury/pull/496[Python] cython basic serializers by @chaokunyang in https://github.com/alipay/fury/pull/501[Python] cython container serializers by @chaokunyang in https://github.com/alipay/fury/pull/502[Pyhton] cython array serializers by @chaokunyang in https://github.com/alipay/fury/pull/503[Python] cython struct serializer by @chaokunyang in https://github.com/alipay/fury/pull/505[Python] cython misc serializers by @chaokunyang in https://github.com/alipay/fury/pull/506[Python] Unify cython python serializer by @chaokunyang in https://github.com/alipay/fury/pull/507[Python] Codegen serialization support by @chaokunyang in https://github.com/alipay/fury/pull/509[Python] Support arrow serialization in objgraph by @chaokunyang in https://github.com/alipay/fury/pull/515[Python] Add common pytests by @chaokunyang in https://github.com/alipay/fury/pull/517[C++] pin bazel to 4.2.0 by @chaokunyang in https://github.com/alipay/fury/pull/519[Community] Update contacts about wechat/dingding by @chaokunyang in https://github.com/alipay/fury/pull/521[Java] support struct cross language serialization by @chaokunyang in https://github.com/alipay/fury/pull/523[Java] add java/python cross language row format tests by @chaokunyang in https://github.com/alipay/fury/pull/525feat: fix qrcode size in readme by @wangweipeng2 in https://github.com/alipay/fury/pull/526[Java] replace io.furyx with org.furyio by @chaokunyang in https://github.com/alipay/fury/pull/527[Java] Add missing map license by @chaokunyang in https://github.com/alipay/fury/pull/529[Java] reduce string serializer caller stack by jit by @chaokunyang in https://github.com/alipay/fury/pull/531[Java] fix nested map generics by @chaokunyang in https://github.com/alipay/fury/pull/533[Java] fix jdk11 string jit serialization by @chaokunyang in https://github.com/alipay/fury/pull/535[JavaScript] improve write performance by @wangweipeng2 in https://github.com/alipay/fury/pull/538[Java] refine java benchmarks by @chaokunyang in https://github.com/alipay/fury/pull/536[Java] fix fury java kryo/fst benchmark classloading by @chaokunyang in https://github.com/alipay/fury/pull/542[Java] Unsafe method invoke optimization by @chaokunyang in https://github.com/alipay/fury/pull/543[Java] Optimize string serialization mem ops by @chaokunyang in https://github.com/alipay/fury/pull/545[Java] Optimze jit generated code by @chaokunyang in https://github.com/alipay/fury/pull/548[Java] Optimize primitive fields jit read/write by @chaokunyang in https://github.com/alipay/fury/pull/550[Java] Fix benchmark plot by @chaokunyang in https://github.com/alipay/fury/pull/554[Java] Upload benchmark data by @chaokunyang in https://github.com/alipay/fury/pull/555[Docs] Update benchmarks by @chaokunyang in https://github.com/alipay/fury/pull/560[Docs] use a smaller size for benchmark plots by @chaokunyang in https://github.com/alipay/fury/pull/561[Docs] update docs by @chaokunyang in https://github.com/alipay/fury/pull/565[Doc] update docs by @chaokunyang in https://github.com/alipay/fury/pull/566[Docs] update readme by @chaokunyang in https://github.com/alipay/fury/pull/567[JavaScript] Import js write performance by @wangweipeng2 in https://github.com/alipay/fury/pull/569[Docs ] fix benchmarks figures align by @chaokunyang in https://github.com/alipay/fury/pull/571[Docs] fix python typehint comment by @chaokunyang in https://github.com/alipay/fury/pull/572[Docs] add row format to arrow conversion java example by @chaokunyang in https://github.com/alipay/fury/pull/573[JavaScript] update benchmark by @wangweipeng2 in https://github.com/alipay/fury/pull/574[JavaScript] easy type description by @wangweipeng2 in https://github.com/alipay/fury/pull/576[JavaScript] add generic constraints to the serializer by @wangweipeng2 in https://github.com/alipay/fury/pull/577[Docs] Refine benchmark plots by @chaokunyang in https://github.com/alipay/fury/pull/578[Docs] fix java header by @chaokunyang in https://github.com/alipay/fury/pull/582[Python] support secure mode for python by @chaokunyang in https://github.com/alipay/fury/pull/584[Docs] update readme speedup by @chaokunyang in https://github.com/alipay/fury/pull/585[Docs] remove Binary Serialization from header by @chaokunyang in https://github.com/alipay/fury/pull/586[Docs] add Serialization to header by @chaokunyang in https://github.com/alipay/fury/pull/587[Docs] fix invalid image links in cpp debug doc by @chaokunyang in https://github.com/alipay/fury/pull/589Bump protobuf-java from 3.11.0 to 3.16.3 in /java/fury-benchmark by @dependabot in https://github.com/alipay/fury/pull/590Bump testng from 7.3.0 to 7.5.1 in /java by @dependabot in https://github.com/alipay/fury/pull/591Bump checkstyle from 8.19 to 8.29 in /java by @dependabot in https://github.com/alipay/fury/pull/592Bump guava from 30.0-jre to 32.0.0-jre in /java by @dependabot in https://github.com/alipay/fury/pull/593Bump protobuf-java from 3.15.0 to 3.16.3 in /integration_tests by @dependabot in https://github.com/alipay/fury/pull/594[Java] replace log4j by log4j2 for test modules by @chaokunyang in https://github.com/alipay/fury/pull/595[JavaScript] update benchmark by @wangweipeng2 in https://github.com/alipay/fury/pull/597[Java] rename reference to ref by @chaokunyang in https://github.com/alipay/fury/pull/599[Java] fix checkstyle failure by @chaokunyang in https://github.com/alipay/fury/pull/602[Java] fix missing reference renaming by @chaokunyang in https://github.com/alipay/fury/pull/603[Java] Rename requireClassRegistration by @chaokunyang in https://github.com/alipay/fury/pull/604[JavaScript]: remove dependency on v8 by @wangweipeng2 in https://github.com/alipay/fury/pull/606[Rust] Add readme for fury rust by @chaokunyang in https://github.com/alipay/fury/pull/607[Java] add missing license for java code by @chaokunyang in https://github.com/alipay/fury/pull/608[Java] update java benchmarks by @chaokunyang in https://github.com/alipay/fury/pull/609[Docs] update java benchmarks chart size by @chaokunyang in https://github.com/alipay/fury/pull/610[Docs] use same color for fury best performance by @chaokunyang in https://github.com/alipay/fury/pull/611[Java] add MetaContext tests by @chaokunyang in https://github.com/alipay/fury/pull/613[Java] Add java misc tests by @chaokunyang in https://github.com/alipay/fury/pull/614[Java] Add codegen class loading/gc tests by @chaokunyang in https://github.com/alipay/fury/pull/616[Java] add warn logs when requireClassRegistration disabled by @chaokunyang in https://github.com/alipay/fury/pull/618[Docs] Add java adcanced user guide doc by @chaokunyang in https://github.com/alipay/fury/pull/621[Docs] Update java advanced doc by @chaokunyang in https://github.com/alipay/fury/pull/625[JavaScript] Eliminate polymorphism in JS code by @wangweipeng2 in https://github.com/alipay/fury/pull/627[Python] rename reference to ref for python by @chaokunyang in https://github.com/alipay/fury/pull/629[Java/Python] Rename crosslanguage to x by @chaokunyang in https://github.com/alipay/fury/pull/631[JavaScript] reduce generated code size by @wangweipeng2 in https://github.com/alipay/fury/pull/633[Java] update java snapshot url by @chaokunyang in https://github.com/alipay/fury/pull/635[CI] Enable Fury CI by @chaokunyang in https://github.com/alipay/fury/pull/636[Docs] add benchmark data by @chaokunyang in https://github.com/alipay/fury/pull/639[Doc] use camel naming for benchmark class doc by @chaokunyang in https://github.com/alipay/fury/pull/640[Docs] Update security doc by @chaokunyang in https://github.com/alipay/fury/pull/642[Java] update license for Generics by @chaokunyang in https://github.com/alipay/fury/pull/644[Java] fix generics license length by @chaokunyang in https://github.com/alipay/fury/pull/645[Java] update java security doc by @chaokunyang in https://github.com/alipay/fury/pull/646[Go] update golang readme by @chaokunyang in https://github.com/alipay/fury/pull/648[Doc] replace Fury.Language by Language by @chaokunyang in https://github.com/alipay/fury/pull/650[Java] update java row readme by @chaokunyang in https://github.com/alipay/fury/pull/651[Java] register guava serializers ahead by @chaokunyang in https://github.com/alipay/fury/pull/654[Docs] split user guide doc into 3 parts to sync with website by @chaokunyang in https://github.com/alipay/fury/pull/665[Docs] move guide docs to guide by @chaokunyang in https://github.com/alipay/fury/pull/667[Doc] sync files to home site by @wangweipeng2 in https://github.com/alipay/fury/pull/666[Java] Fix IndexOutOfBoundsException when new fury deserialize from InputStream by @chaokunyang in https://github.com/alipay/fury/pull/671[Doc] support front matter by @wangweipeng2 in https://github.com/alipay/fury/pull/672[Doc] rename inner fury to f when creating ThreadSafeFury by @chaokunyang in https://github.com/alipay/fury/pull/676[Java] Support string zerocopy for jdk14+ by @chaokunyang in https://github.com/alipay/fury/pull/677[CI] Add deploy script by @chaokunyang in https://github.com/alipay/fury/pull/688[Java] Support maven release by @chaokunyang in https://github.com/alipay/fury/pull/691[Doc] add java release jar for v0.1.0-alpha.1 by @chaokunyang in https://github.com/alipay/fury/pull/693[Doc] Fix release jar doc by @chaokunyang in https://github.com/alipay/fury/pull/694[Doc] Refine readme for more readability by @chaokunyang in https://github.com/alipay/fury/pull/695[Java] Add detailed lambda error by @chaokunyang in https://github.com/alipay/fury/pull/698[Doc] Fix threadsafe example by @chaokunyang in https://github.com/alipay/fury/pull/699[Docs] fix threadsafe fury in java guide by @chaokunyang in https://github.com/alipay/fury/pull/700[Docs] remove bracket from classLoader by @chaokunyang in https://github.com/alipay/fury/pull/701[Java] add maven source plugin by @chaokunyang in https://github.com/alipay/fury/pull/702[Java] Jdk serialization binary check by @chaokunyang in https://github.com/alipay/fury/pull/714[Java] add jdk migration doc by @chaokunyang in https://github.com/alipay/fury/pull/715[Java] Support jit for non public classes by @chaokunyang in https://github.com/alipay/fury/pull/719[Rust] rust lang initial version by @wangweipeng2 in https://github.com/alipay/fury/pull/718[Java] add type tag registration check by @chaokunyang in https://github.com/alipay/fury/pull/722[Doc] highlight warmup by @chaokunyang in https://github.com/alipay/fury/pull/723[Rust ] calculate the reserved space on compile time by @wangweipeng2 in https://github.com/alipay/fury/pull/725[Java/Python] disable reference tracking by default by @chaokunyang in https://github.com/alipay/fury/pull/727[Java] debug log code stats by @chaokunyang in https://github.com/alipay/fury/pull/728[Java] upgrade java install to 0.1.0-alpha.2 by @chaokunyang in https://github.com/alipay/fury/pull/731[Doc] use fury png logo by @chaokunyang in https://github.com/alipay/fury/pull/733[Doc] remove margin fury png logo by @chaokunyang in https://github.com/alipay/fury/pull/734[Doc] Refine logo and icon by @chaokunyang in https://github.com/alipay/fury/pull/735[ Rust ] Make the protocols of rust and js consistent by @wangweipeng2 in https://github.com/alipay/fury/pull/738[JavaScript] Make the protocols of rust and js consistent by @wangweipeng2 in https://github.com/alipay/fury/pull/739[Java] Remove guava from userdoc by @chaokunyang in https://github.com/alipay/fury/pull/740[Java] rename writeNonRefT to writeNonRef by @chaokunyang in https://github.com/alipay/fury/pull/743[Java] Optimize object array serialization by @chaokunyang in https://github.com/alipay/fury/pull/741[Java] avoid reflection in resolve/replace by @chaokunyang in https://github.com/alipay/fury/pull/744[Java] avoid reflection in writeObject/readOject/readObjectNoData by @chaokunyang in https://github.com/alipay/fury/pull/747[Java] optimize guava list serialization by @chaokunyang in https://github.com/alipay/fury/pull/748[Java] add MakeJDKFunction lambda factory by @chaokunyang in https://github.com/alipay/fury/pull/752[Java] Optimize guava List/Map/Set serialization by @chaokunyang in https://github.com/alipay/fury/pull/750[Doc] Add contributing guide doc by @chaokunyang in https://github.com/alipay/fury/pull/759[Doc] Create CODE_OF_CONDUCT.md by @chaokunyang in https://github.com/alipay/fury/pull/761[Doc] Fix broken link in README by @tisonkun in https://github.com/alipay/fury/pull/762[Rust] Several Rust idioms by @tisonkun in https://github.com/alipay/fury/pull/763[Java] fix write replace class failure by @chaokunyang in https://github.com/alipay/fury/pull/767[Java] replace withSecureMode by requireClassRegistration API by @chaokunyang in https://github.com/alipay/fury/pull/768[Doc] Update README.md by @chaokunyang in https://github.com/alipay/fury/pull/770[Doc] add javadoc for FuryBuilder by @chaokunyang in https://github.com/alipay/fury/pull/775[Doc] add doc for fury creation reuse by @chaokunyang in https://github.com/alipay/fury/pull/777[Java][Python] auto deploy java/python packages by @chaokunyang in https://github.com/alipay/fury/pull/781[Java] refine FuryBuilder API by @chaokunyang in https://github.com/alipay/fury/pull/784[CI] skip release tests by @chaokunyang in https://github.com/alipay/fury/pull/785Corrected grammar and paraphrasing to make the README easier to read by @hieu-ht in https://github.com/alipay/fury/pull/786Don't let CI run when the changed files are not the code by @hieu-ht in https://github.com/alipay/fury/pull/787[Java] use lambda for SynchronizedSerializers factory by @chaokunyang in https://github.com/alipay/fury/pull/789[Java] use lambda for unmodifiable serializers factory by @chaokunyang in https://github.com/alipay/fury/pull/790[Python] replace alpha/beta to a/b for python by @chaokunyang in https://github.com/alipay/fury/pull/792[Python] fix python bump version by @chaokunyang in https://github.com/alipay/fury/pull/793[CI] Fix bump version by @chaokunyang in https://github.com/alipay/fury/pull/795[CI] Fix py release by @chaokunyang in https://github.com/alipay/fury/pull/796[Doc] update python and java install by @chaokunyang in https://github.com/alipay/fury/pull/797Update README.md by @chaokunyang in https://github.com/alipay/fury/pull/800[Doc] Update java install version to 0.1.0-alpah.5 by @chaokunyang in https://github.com/alipay/fury/pull/801[CI] Fix pypi upload by @chaokunyang in https://github.com/alipay/fury/pull/803[Java] Add core java developer to maven pom by @chaokunyang in https://github.com/alipay/fury/pull/802[Java] add core java developer to maven modules pom by @chaokunyang in https://github.com/alipay/fury/pull/804[Java] support decode utf8 for java string serialization by @chaokunyang in https://github.com/alipay/fury/pull/806Update Java Deserialization Blacklist by @s31k31 in https://github.com/alipay/fury/pull/782chore: apply license format by @tisonkun in https://github.com/alipay/fury/pull/783[Java] use soft reference to avoid duplicate codegen by @chaokunyang in https://github.com/alipay/fury/pull/809  Full Changelog: https://github.com/alipay/fury/commits/v0.1.0 ","version":null,"tagName":"h2"},{"title":"Fury v0.10.0 Released","type":0,"sectionRef":"#","url":"/zh-CN/blog/fury_0_10_0_release","content":"","keywords":"","version":null},{"title":"Highlight​","type":1,"pageTitle":"Fury v0.10.0 Released","url":"/zh-CN/blog/fury_0_10_0_release#highlight","content":" Chunk based map serializationHighly optimized JavaScript string serialization  ","version":null,"tagName":"h2"},{"title":"Features​","type":1,"pageTitle":"Fury v0.10.0 Released","url":"/zh-CN/blog/fury_0_10_0_release#features","content":" feat(java): ReplaceResolveSerializer deep copy by @zhaommmmomo in https://github.com/apache/fury/pull/1925feat(java): use varint for jdk compatible serializers by @chaokunyang in https://github.com/apache/fury/pull/1960feat(java): configurable buffer size limit by @theigl in https://github.com/apache/fury/pull/1963feat(java): make 4 bytes utf16 size header optional for utf8 encoding by @chaokunyang in https://github.com/apache/fury/pull/2010feat(ci): support building python on windows by @An-DJ in https://github.com/apache/fury/pull/1885feat(java): Chunk by chunk predictive map serialization protocol by @Hen1ng in https://github.com/apache/fury/pull/1722feat(java): support streaming encode/decode to/from buffer for row format by @chaokunyang in https://github.com/apache/fury/pull/2024feat(java): new implementation and protocol refine for chunk based map serialization by @chaokunyang in https://github.com/apache/fury/pull/2025feat(java): jit support for chunk based map serialization by @chaokunyang in https://github.com/apache/fury/pull/2027feat(java): Add basicMultiConfigFury dataprovider and add basic map unit test use the dataProvider by @Hen1ng in https://github.com/apache/fury/pull/2032feat(java): deserialize one pojo into another type by @orisgarno in https://github.com/apache/fury/pull/2012feat(python): chunk based map serialization for python by @chaokunyang in https://github.com/apache/fury/pull/2038feat(java): zstd meta compressor by @orisgarno in https://github.com/apache/fury/pull/2042feat(python): automatic release pyfury on macos and windows by @chaokunyang in https://github.com/apache/fury/pull/2045feat(javascript): optimize string serializer by @theweipeng in https://github.com/apache/fury/pull/2043feat(python): add macos pyfury ci by @chaokunyang in https://github.com/apache/fury/pull/2041  ","version":null,"tagName":"h2"},{"title":"Bug Fix​","type":1,"pageTitle":"Fury v0.10.0 Released","url":"/zh-CN/blog/fury_0_10_0_release#bug-fix","content":" fix(java): Move schema caching to unsafe trait to avoid issues when using non-inferred schema. by @wywen in https://github.com/apache/fury/pull/1944fix(java): ClassLoaderFuryPooled#setFactoryCallback cannot effect old Fury by @MrChang0 in https://github.com/apache/fury/pull/1946fix(java): fix find constructor error in generated serializer class caused by duplicated class classloading for Fury by @chaokunyang in https://github.com/apache/fury/pull/1948fix(c++): fix bazel install by @chaokunyang in https://github.com/apache/fury/pull/1979fix(java): Fix flakiness in ExpressionVisitorTest#testTraverseExpression by @AmitPr in https://github.com/apache/fury/pull/1968fix(java): Fix the issue caused by not using readCompressedBytesString during deserialization when string compression is enabled. by @Aliothmoon in https://github.com/apache/fury/pull/1991fix(java): Compatible mode on de/serialize api failed to deserialize by @orisgarno in https://github.com/apache/fury/pull/1996fix(java): chunk map serialize an error by @Hen1ng in https://github.com/apache/fury/pull/2030fix(python): Fix missing parameters and old API names by @pandalee99 in https://github.com/apache/fury/pull/2049fix(doc): set compressString default value to false by @chaokunyang in https://github.com/apache/fury/pull/1913fix(java): Remove duplicate maven dependency by @Hen1ng in https://github.com/apache/fury/pull/2044fix(java): fix duplicate entry write at max chunk size bound by @chaokunyang in https://github.com/apache/fury/pull/2040  ","version":null,"tagName":"h2"},{"title":"Other Improvements​","type":1,"pageTitle":"Fury v0.10.0 Released","url":"/zh-CN/blog/fury_0_10_0_release#other-improvements","content":" chore(ci): Migrate the ci from macOS 12 to macOS 13 by @penguin-wwy in https://github.com/apache/fury/pull/1927chore(Rust): fix lint problems by @theweipeng in https://github.com/apache/fury/pull/1962docs(java): add object mapping example and tests by @chaokunyang in https://github.com/apache/fury/pull/1974chore(python): drop py3.7 support by @chaokunyang in https://github.com/apache/fury/pull/1981fix(java): only print warn message if scopedMetaShareEnabled is true … by @zhfeng in https://github.com/apache/fury/pull/1985docs: update copyright date in NOTICE by @caicancai in https://github.com/apache/fury/pull/2029docs(java): update java serialization schema compatibility doc by @chaokunyang in https://github.com/apache/fury/pull/2047  ","version":null,"tagName":"h2"},{"title":"New Contributors​","type":1,"pageTitle":"Fury v0.10.0 Released","url":"/zh-CN/blog/fury_0_10_0_release#new-contributors","content":" @theigl made their first contribution in https://github.com/apache/fury/pull/1963@AmitPr made their first contribution in https://github.com/apache/fury/pull/1968@zhfeng made their first contribution in https://github.com/apache/fury/pull/1985@Hen1ng made their first contribution in https://github.com/apache/fury/pull/1722  Full Changelog: https://github.com/apache/fury/compare/v0.9.0...v0.10.0 ","version":null,"tagName":"h2"},{"title":"Fury v0.10.1 Released","type":0,"sectionRef":"#","url":"/zh-CN/blog/fury_0_10_1_release","content":"","keywords":"","version":null},{"title":"Features​","type":1,"pageTitle":"Fury v0.10.1 Released","url":"/zh-CN/blog/fury_0_10_1_release#features","content":" feat(java): support passed tracking ref meta when building serializers by @chaokunyang in https://github.com/apache/fury/pull/2113feat(java): extra entry in disallowed.txt by @pjfanning in https://github.com/apache/fury/pull/2098feat(java): use sha256 to check disallowed.txt tamper by @chaokunyang in https://github.com/apache/fury/pull/2102  ","version":null,"tagName":"h2"},{"title":"Bug Fix​","type":1,"pageTitle":"Fury v0.10.1 Released","url":"/zh-CN/blog/fury_0_10_1_release#bug-fix","content":" fix(java): fix read null chunk out of bound by @chaokunyang in https://github.com/apache/fury/pull/2065fix(java): Fix error with MemoryBuffer::readBytesAsInt64 when not in LITTLE_ENDIAN mode by @LouisLou2 in https://github.com/apache/fury/pull/2069fix(java): fix read primitives error on fill buffer bound by @chaokunyang in https://github.com/apache/fury/pull/2064fix(java): java.util.Date and its subclasses are mutable by @moooonk in https://github.com/apache/fury/pull/2076fix(java): fix ImmutableCollections$SubList duplicate registration by @w-yfan in https://github.com/apache/fury/pull/2074fix(java): Modify some mistake by @Hen1ng in https://github.com/apache/fury/pull/2086fix(java): fix serialization npe of collection with all null elems by @chaokunyang in https://github.com/apache/fury/pull/2111fix(java): fix disallowed.txt check in windows by @chaokunyang in https://github.com/apache/fury/pull/2128  ","version":null,"tagName":"h2"},{"title":"Other Improvements​","type":1,"pageTitle":"Fury v0.10.1 Released","url":"/zh-CN/blog/fury_0_10_1_release#other-improvements","content":" perf(java): Improve performance by using System.arraycopy to copy between byte arrays by @Cybermaxke in https://github.com/apache/fury/pull/2101perf(java): Refactor ThreadPoolFury to improve performance by @moooonk in https://github.com/apache/fury/pull/2092perf(java): Optimize Computational Efficiency of MetaStringEncoder::encodeGeneric by @LouisLou2 in https://github.com/apache/fury/pull/2072  Full Changelog: https://github.com/apache/fury/compare/v0.10.0...v0.10.1 ","version":null,"tagName":"h2"},{"title":"Fury v0.10.2 Released","type":0,"sectionRef":"#","url":"/zh-CN/blog/fury_0_10_2_release","content":"","keywords":"","version":null},{"title":"Features​","type":1,"pageTitle":"Fury v0.10.2 Released","url":"/zh-CN/blog/fury_0_10_2_release#features","content":" feat(kotlin): add kotlin ci by @pandalee99 in https://github.com/apache/fury/pull/2176  ","version":null,"tagName":"h2"},{"title":"Bug Fix​","type":1,"pageTitle":"Fury v0.10.2 Released","url":"/zh-CN/blog/fury_0_10_2_release#bug-fix","content":" fix(java): fix DisallowedList calculate hash in Windows by @chaokunyang in https://github.com/apache/fury/pull/2142fix(java): fix fury logger log exception by @chaokunyang in https://github.com/apache/fury/pull/2153fix(java): fix nested chunk map serialization error when generics exists by @chaokunyang in https://github.com/apache/fury/pull/2162fix(java): fix nested map chunk serialization codegen by @chaokunyang in https://github.com/apache/fury/pull/2172fix(kotlin): fix kotlin compile error by @chaokunyang in https://github.com/apache/fury/pull/2173  Full Changelog: https://github.com/apache/fury/compare/v0.10.1...v0.10.2 ","version":null,"tagName":"h2"},{"title":"Fury v0.10.3 Released","type":0,"sectionRef":"#","url":"/zh-CN/blog/fury_0_10_3_release","content":"","keywords":"","version":null},{"title":"Features​","type":1,"pageTitle":"Fury v0.10.3 Released","url":"/zh-CN/blog/fury_0_10_3_release#features","content":" feat(java): add protobuf serializer for message and byte string by @chaokunyang in https://github.com/apache/fury/pull/2213  ","version":null,"tagName":"h2"},{"title":"Bug Fix​","type":1,"pageTitle":"Fury v0.10.3 Released","url":"/zh-CN/blog/fury_0_10_3_release#bug-fix","content":" fix(java): mark fury-test-core as test dep in fury extensions by @chaokunyang in https://github.com/apache/fury/pull/2231fix(java): ensure readVarUint36Small reads full bits regardless of remaining buffer size by @LouisLou2 in https://github.com/apache/fury/pull/2179fix(java): ensure FuryObjectInputStream.read never returns 0 when length&gt;0 by @X-czh in https://github.com/apache/fury/pull/2205fix(java): Fix empty string processing in MetaStringBytes by @LouisLou2 in https://github.com/apache/fury/pull/2212fix(java): fix field super class missing in compatible mode by @chaokunyang in https://github.com/apache/fury/pull/2214fix(python): fix pyfury build using pyproject.toml by @chaokunyang in https://github.com/apache/fury/pull/2206fix: install bazel by @chaokunyangfix: print python tests exception by @chaokunyangfix: install pyarrow by @chaokunyang  ","version":null,"tagName":"h2"},{"title":"Chores​","type":1,"pageTitle":"Fury v0.10.3 Released","url":"/zh-CN/blog/fury_0_10_3_release#chores","content":" chore: cherry-pick commits for 0.10.3 by @chaokunyang in https://github.com/apache/fury/pull/2219chore: cherry-pick commits for 0.10.3 by @chaokunyang in https://github.com/apache/fury/pull/2234chore: Bump version to 0.10.3 by @pandalee99 in https://github.com/apache/fury/pull/2235chore: fix Releases 0.10 by @pandalee99 in https://github.com/apache/fury/pull/2236chore(javascript): remove nodejs 12 support by @chaokunyang in https://github.com/apache/fury/pull/2233  Full Changelog: https://github.com/apache/fury/compare/v0.10.2...v0.10.3-rc2 ","version":null,"tagName":"h2"},{"title":"Fury v0.2.0 released","type":0,"sectionRef":"#","url":"/zh-CN/blog/fury_0_2_0_release","content":"","keywords":"","version":null},{"title":"Highlights​","type":1,"pageTitle":"Fury v0.2.0 released","url":"/zh-CN/blog/fury_0_2_0_release#highlights","content":" ","version":null,"tagName":"h2"},{"title":"Java​","type":1,"pageTitle":"Fury v0.2.0 released","url":"/zh-CN/blog/fury_0_2_0_release#java","content":" Support JDK17+ record JIT/Interpreter serializationSupport JDK17+ record JIT/Interpreter serialization backward/forward compatibilitySupport jdk9+ Immutable Collections JIT/Interpreter mode serialization, much faster compared to other frameworksNew collection serialization protocol by homogenization, 1.5x speed up, 2X space saving.Desgined and implemented a new long compression algorithm, with performance cost less than 10% but give 50% compresstion ratioSupport configuring compress int/long independently, enable int/long compression by defaultAdd class checker API and Whitelist/Blacklist based implementation to enhance security  ","version":null,"tagName":"h3"},{"title":"Python​","type":1,"pageTitle":"Fury v0.2.0 released","url":"/zh-CN/blog/fury_0_2_0_release#python","content":" Support pyarrow6 bazel buildSupport python 3.10  ","version":null,"tagName":"h3"},{"title":"JavaScript​","type":1,"pageTitle":"Fury v0.2.0 released","url":"/zh-CN/blog/fury_0_2_0_release#javascript","content":" [JavaScript] support fury for browser[JavaScript] support polymorphism[JavaScript] enhancement performance  ","version":null,"tagName":"h3"},{"title":"Golang​","type":1,"pageTitle":"Fury v0.2.0 released","url":"/zh-CN/blog/fury_0_2_0_release#golang","content":" Implement Golang serialization framework, which support reference, pointer, data serializationImplement serializers for string/numbers/slice/map/slice/struct/pointer  ","version":null,"tagName":"h3"},{"title":"What's Changed​","type":1,"pageTitle":"Fury v0.2.0 released","url":"/zh-CN/blog/fury_0_2_0_release#whats-changed","content":" [JavaScript] enhancement performance and bugfix by @wangweipeng2 in https://github.com/alipay/fury/pull/811[JavaScript] support polymorphism by @wangweipeng2 in https://github.com/alipay/fury/pull/814Create SECURITY.md by @chaokunyang in https://github.com/alipay/fury/pull/817[JavaScript] fix bug #703 by @wangweipeng2 in https://github.com/alipay/fury/pull/819[Java] fix isSecure check for xlang in java by @chaokunyang in https://github.com/alipay/fury/pull/822[Doc] add protocol wire format wip by @chaokunyang in https://github.com/alipay/fury/pull/823[JavaScript] write tag hash by @wangweipeng2 in https://github.com/alipay/fury/pull/825[JavaScript] support browser by @wangweipeng2 in https://github.com/alipay/fury/pull/830[Java] register empty object by default by @chaokunyang in https://github.com/alipay/fury/pull/829[Java] upgrade guava for CVE-2023-2976 by @chaokunyang in https://github.com/alipay/fury/pull/831[JavaScript] detect platform wrong by @wangweipeng2 in https://github.com/alipay/fury/pull/832[JavaScript] add test by @wangweipeng2 in https://github.com/alipay/fury/pull/836[Java] Add compatible ci for JDK8/11/13/15/17 by @chaokunyang in https://github.com/alipay/fury/pull/835[Java] use java.lang.ClassValue to cache Lookup by @chaokunyang in https://github.com/alipay/fury/pull/844[Java] Refactor integration tests by @chaokunyang in https://github.com/alipay/fury/pull/845[Java] suppress maven download logs by --no-transfer-progress by @chaokunyang in https://github.com/alipay/fury/pull/846[Java] add missing jdk primitive function by @chaokunyang in https://github.com/alipay/fury/pull/848[Java] make getter lambda functions by @chaokunyang in https://github.com/alipay/fury/pull/849[Java] add record utils by @chaokunyang in https://github.com/alipay/fury/pull/850[Java] Support access record field value by @chaokunyang in https://github.com/alipay/fury/pull/851[Java] interpreter mode support for record serialization by @chaokunyang in https://github.com/alipay/fury/pull/852[CI] Fix checkstyle by @chaokunyang in https://github.com/alipay/fury/pull/853[Java] Support jdk record forward/backward interpreter serialization by @chaokunyang in https://github.com/alipay/fury/pull/854[Java] Support jdk record metashare mode by @chaokunyang in https://github.com/alipay/fury/pull/855[Java] move record utils to record pkg by @chaokunyang in https://github.com/alipay/fury/pull/856[Java] move inner functions outside by @chaokunyang in https://github.com/alipay/fury/pull/857[Python] Support pyarrow6 bazel build by @chaokunyang in https://github.com/alipay/fury/pull/859[Python] add missing shared lib for python by @chaokunyang in https://github.com/alipay/fury/pull/862[Python] fix python deploy by @chaokunyang in https://github.com/alipay/fury/pull/863[Java] Jdk record compatible jit by @chaokunyang in https://github.com/alipay/fury/pull/864[Java] JIT serialization for JDK record by @chaokunyang in https://github.com/alipay/fury/pull/866[Java] support private record jit by @chaokunyang in https://github.com/alipay/fury/pull/869[Java] optimize buffer copy by @chaokunyang in https://github.com/alipay/fury/pull/870[Doc] Fix row format doc by @chaokunyang in https://github.com/alipay/fury/pull/873[Java] Support compress int long independently by @chaokunyang in https://github.com/alipay/fury/pull/875[Java] fix ofHashMap by @chaokunyang in https://github.com/alipay/fury/pull/877[Java] add jdk tools.jar for tests by @chaokunyang in https://github.com/alipay/fury/pull/881[Java] register common exception by @chaokunyang in https://github.com/alipay/fury/pull/879[Java] Fix lazy bean serializer by @chaokunyang in https://github.com/alipay/fury/pull/883[Java] print exception for fury creation by @chaokunyang in https://github.com/alipay/fury/pull/885[Java] remove getCurrentFury API by @chaokunyang in https://github.com/alipay/fury/pull/887[Java] Add fury map iterator api by @chaokunyang in https://github.com/alipay/fury/pull/889[Java] Add class checker API by @chaokunyang in https://github.com/alipay/fury/pull/890[Python] Fix python linux deploy missing shared library files by @chaokunyang in https://github.com/alipay/fury/pull/892[Java] refine AllowListChecker by @chaokunyang in https://github.com/alipay/fury/pull/893Update README.md by @chaokunyang in https://github.com/alipay/fury/pull/894[Java] support immutable collection/map jit and generics optimization by @chaokunyang in https://github.com/alipay/fury/pull/895[Java] cache generated guava constructor by @chaokunyang in https://github.com/alipay/fury/pull/897[Java] Optimize jdk9+ immutable collection serialization by @chaokunyang in https://github.com/alipay/fury/pull/900[Java] add jdk20 tests by @chaokunyang in https://github.com/alipay/fury/pull/901[Java] optimize duplicate fields utils by @chaokunyang in https://github.com/alipay/fury/pull/905[Java] fix jit error for package-level field with private type by @chaokunyang in https://github.com/alipay/fury/pull/907[Java] update blacklist by @chaokunyang in https://github.com/alipay/fury/pull/913[Python] Use cloudpickle for local function serialization by @chaokunyang in https://github.com/alipay/fury/pull/914[Python] fix row format getter by @chaokunyang in https://github.com/alipay/fury/pull/915[Java] disable class check by default by @chaokunyang in https://github.com/alipay/fury/pull/917[Java] refine java docs by @chaokunyang in https://github.com/alipay/fury/pull/918Update blacklist.txt by @chaokunyang in https://github.com/alipay/fury/pull/920[Java] Skip toString in annotation invocation handler readObject by @chaokunyang in https://github.com/alipay/fury/pull/922Optimize StringBuilder/StringBuffer serialization by @pandalee99 in https://github.com/alipay/fury/pull/908Bump release versin to 0.1.2 by @chaokunyang in https://github.com/alipay/fury/pull/924[Doc] add basic type java format doc by @chaokunyang in https://github.com/alipay/fury/pull/928[Java] speed test codegen speed by avoid duplicate codegen by @chaokunyang in https://github.com/alipay/fury/pull/929[Java] Optimize collection serialization protocol by homogenization by @chaokunyang in https://github.com/alipay/fury/pull/923Bump org.apache.avro:avro from 1.11.1 to 1.11.3 in /java/fury-benchmark by @dependabot in https://github.com/alipay/fury/pull/931[Java] Rename classinfocache to classinfoholder by @chaokunyang in https://github.com/alipay/fury/pull/933[Java] put together all primitive serializers by @chaokunyang in https://github.com/alipay/fury/pull/934[Java] Fix jvm crash caused by varint out-of-bound writing by @chaokunyang in https://github.com/alipay/fury/pull/937[Java] enable int compression by default by @chaokunyang in https://github.com/alipay/fury/pull/935[Java] put together all fury related config classes into config package by @chaokunyang in https://github.com/alipay/fury/pull/940[Java] Add SLI(small long as int) long encoding algorithm by @chaokunyang in https://github.com/alipay/fury/pull/942[Java] use raw type serializer for getSerialzier in jit by @chaokunyang in https://github.com/alipay/fury/pull/943[Java] use varint for class id encoding to reduce space cost by @chaokunyang in https://github.com/alipay/fury/pull/945[Java] Fix Collection/Map jit/interpreter protocol inconsisitency for generics instantiated subclass by @chaokunyang in https://github.com/alipay/fury/pull/947[Go] add fury go util and ci tests by @chaokunyang in https://github.com/alipay/fury/pull/950[Go] add fury go buffer implementation by @chaokunyang in https://github.com/alipay/fury/pull/952[Go] add fury go serialization framework by @chaokunyang in https://github.com/alipay/fury/pull/954[Go] add serializers for common go types by @chaokunyang in https://github.com/alipay/fury/pull/956[Java] fix varint writeindex grow for jit by @chaokunyang in https://github.com/alipay/fury/pull/957[Go] add fury go map serializer by @chaokunyang in https://github.com/alipay/fury/pull/959[Go] add slice serializer for fury go by @chaokunyang in https://github.com/alipay/fury/pull/961[Go] add set serializer for fury go by @chaokunyang in https://github.com/alipay/fury/pull/963[Go] Add struct serializer for fury go by @chaokunyang in https://github.com/alipay/fury/pull/965[Go] add ref tracking tests by @chaokunyang in https://github.com/alipay/fury/pull/967[Go] add fury type dispatch tests by @chaokunyang in https://github.com/alipay/fury/pull/969[Go] add fury serialization tests by @chaokunyang in https://github.com/alipay/fury/pull/971[Go] Add fury xlang tests by @chaokunyang in https://github.com/alipay/fury/pull/973[Go] rename Reference to Ref by @chaokunyang in https://github.com/alipay/fury/pull/975[Java] add jdk 21 tests by @chaokunyang in https://github.com/alipay/fury/pull/977[Java] add jdk 21 tests ci by @chaokunyang in https://github.com/alipay/fury/pull/978[Java] Optimize sli long read/write by @chaokunyang in https://github.com/alipay/fury/pull/981[Doc] upgrade docs by @chaokunyang in https://github.com/alipay/fury/pull/985 https://github.com/alipay/fury/pull/986 https://github.com/alipay/fury/pull/987[Java] add serializeJavaObject API to ThreadSafeFury by @chaokunyang in https://github.com/alipay/fury/pull/988[Java] fix jdk17/21 ci latest_jdk_tests skip by @chaokunyang in https://github.com/alipay/fury/pull/989  ","version":null,"tagName":"h2"},{"title":"New Contributors​","type":1,"pageTitle":"Fury v0.2.0 released","url":"/zh-CN/blog/fury_0_2_0_release#new-contributors","content":" @pandalee99 made their first contribution in https://github.com/alipay/fury/pull/908@ilxqx made their first contribution in https://github.com/fury-project/dubbo-serialization-fury/pull/1@T-baby made their first contribution in https://github.com/fury-project/dubbo-serialization-fury/pull/13  Full Changelog: https://github.com/alipay/fury/compare/v0.1.0...v0.2.0 ","version":null,"tagName":"h2"},{"title":"Fury v0.2.1 released","type":0,"sectionRef":"#","url":"/zh-CN/blog/fury_0_2_1_release","content":"","keywords":"","version":null},{"title":"Highlight​","type":1,"pageTitle":"Fury v0.2.1 released","url":"/zh-CN/blog/fury_0_2_1_release#highlight","content":" [Go] Support tiny go compilation[Java] Support private JDK17+ record class JIT serialization  ","version":null,"tagName":"h2"},{"title":"Bug fix​","type":1,"pageTitle":"Fury v0.2.1 released","url":"/zh-CN/blog/fury_0_2_1_release#bug-fix","content":" Fix jit error for register private serializersUpgrade janino version to fix package name conflict with classname  ","version":null,"tagName":"h2"},{"title":"What's Changed​","type":1,"pageTitle":"Fury v0.2.1 released","url":"/zh-CN/blog/fury_0_2_1_release#whats-changed","content":" [Doc] Update JDK support doc by @chaokunyang in https://github.com/alipay/fury/pull/992[Go] Make compilation support tinygo by @springrain in https://github.com/alipay/fury/pull/991[Doc] fix config class imports by @chaokunyang in https://github.com/alipay/fury/pull/993[go] fixed typo in readme import path by @voldyman in https://github.com/alipay/fury/pull/995[Java] fix jit error for register private serializers by @chaokunyang in https://github.com/alipay/fury/pull/999[Java] Refine reflection contructor by MethodHandle by @chaokunyang in https://github.com/alipay/fury/pull/1000[Java] Fix private record JIT by @chaokunyang in https://github.com/alipay/fury/pull/1004[Java] Upgrade janino version to fix package name conflict with classname by @chaokunyang in https://github.com/alipay/fury/pull/1006[Java] fix janino deps for fury-benchmark by @chaokunyang in https://github.com/alipay/fury/pull/1007[Doc] Improve README by @caicancai in https://github.com/alipay/fury/pull/1009  ","version":null,"tagName":"h2"},{"title":"New Contributors​","type":1,"pageTitle":"Fury v0.2.1 released","url":"/zh-CN/blog/fury_0_2_1_release#new-contributors","content":" @springrain made their first contribution in https://github.com/alipay/fury/pull/991@voldyman made their first contribution in https://github.com/alipay/fury/pull/995@caicancai made their first contribution in https://github.com/alipay/fury/pull/1009  Full Changelog: https://github.com/alipay/fury/compare/v0.2.0...v0.2.1 ","version":null,"tagName":"h2"},{"title":"Fury v0.3.1 released","type":0,"sectionRef":"#","url":"/zh-CN/blog/fury_0_3_1_release","content":"","keywords":"","version":null},{"title":"Highlight​","type":1,"pageTitle":"Fury v0.3.1 released","url":"/zh-CN/blog/fury_0_3_1_release#highlight","content":" Support python 3.11 and 3.12, drop python 3.6 supportRefactor collection serialization framework to support writeReplace JITIntegrate scala collection with fury java collection frameworkSupport scala collection jit serializationSupport shim dispatcher to resolve compatibility problems for common used classesUse lastest arrow 14 version for row format in Java and Python  ","version":null,"tagName":"h2"},{"title":"What's Changed​","type":1,"pageTitle":"Fury v0.3.1 released","url":"/zh-CN/blog/fury_0_3_1_release#whats-changed","content":" [Doc] add scala sbt install doc by @chaokunyang in https://github.com/alipay/fury/pull/1066[Doc] Update scala_guide.md by @chaokunyang in https://github.com/alipay/fury/pull/1067[Doc] Add scala 2/3 support doc by @chaokunyang in https://github.com/alipay/fury/pull/1068[Java] Refactor collection serialization framework to support writeReplace JIT by @chaokunyang in https://github.com/alipay/fury/pull/1062[Java] Refine collection package by @chaokunyang in https://github.com/alipay/fury/pull/1070[Java] merge map/collection into collection package by @chaokunyang in https://github.com/alipay/fury/pull/1072[Scala] integrate scala collection with fury java collection framework by @chaokunyang in https://github.com/alipay/fury/pull/1073remove unused part of build.sbt by @pjfanning in https://github.com/alipay/fury/pull/1074[Scala] get build to work with Scala 3 by @pjfanning in https://github.com/alipay/fury/pull/1075[Scala] support scala collection jit serialization by @chaokunyang in https://github.com/alipay/fury/pull/1077[Doc] add apache license section to readme by @caicancai in https://github.com/alipay/fury/pull/1080[Java] add option to disable class check warnings by @chaokunyang in https://github.com/alipay/fury/pull/1084[Java] Fix collection serialization NPE when all elements are null by @chaokunyang in https://github.com/alipay/fury/pull/1086[Java] FuryPooledObjectFactory getFury refactor, remove redundant recursive call by @mof-dev-3 in https://github.com/alipay/fury/pull/1088[Rust] add rust-version by @wangweipeng2 in https://github.com/alipay/fury/pull/1091[DOC] add javascript sample by @wangweipeng2 in https://github.com/alipay/fury/pull/1095Make sure the c++ standard is set to 17 by @PragmaTwice in https://github.com/alipay/fury/pull/1093Fix undefined behavior due to use of uninitialized field in Buffer by @PragmaTwice in https://github.com/alipay/fury/pull/1092[Rust] merge derive and make it sample by @wangweipeng2 in https://github.com/alipay/fury/pull/1098[DOC] add rust sample by @wangweipeng2 in https://github.com/alipay/fury/pull/1100Simplify endian utility functions and IsOneOf by @PragmaTwice in https://github.com/alipay/fury/pull/1096[Java] throw error if nested fury serialize happen in serialization by @chaokunyang in https://github.com/alipay/fury/pull/1103[C++] remove useless FromXXXEndian by @chaokunyang in https://github.com/alipay/fury/pull/1105[Rust ] Remove the magic numbers by @wangweipeng2 in https://github.com/alipay/fury/pull/1107[Rust] chore: add rust doc by @wangweipeng2 in https://github.com/alipay/fury/pull/1109[JavaScript] Fill in readme by @wangweipeng2 in https://github.com/alipay/fury/pull/1110chore: check xlang flag by @wangweipeng2 in https://github.com/alipay/fury/pull/1112[Java] Remove guava part1 by @chaokunyang in https://github.com/alipay/fury/pull/1114[Rust] Correct language flag by @wangweipeng2 in https://github.com/alipay/fury/pull/1120[Java] DateTimeUtils minor refactor, reuse floorDiv to calculate floorMod by @mof-dev-3 in https://github.com/alipay/fury/pull/1122[Python] Support python3.11/12 by @chaokunyang in https://github.com/alipay/fury/pull/1064[java] support shim dispatcher to resolve compatibility problems for common used classes by @xiguashu in https://github.com/alipay/fury/pull/1123  ","version":null,"tagName":"h2"},{"title":"New Contributors​","type":1,"pageTitle":"Fury v0.3.1 released","url":"/zh-CN/blog/fury_0_3_1_release#new-contributors","content":" @pjfanning made their first contribution in https://github.com/alipay/fury/pull/1074@mof-dev-3 made their first contribution in https://github.com/alipay/fury/pull/1088@PragmaTwice made their first contribution in https://github.com/alipay/fury/pull/1093@xiguashu made their first contribution in https://github.com/alipay/fury/pull/1123  Full Changelog: https://github.com/alipay/fury/compare/v0.3.0...v0.3.1 ","version":null,"tagName":"h2"},{"title":"Fury 0.4.0 Released","type":0,"sectionRef":"#","url":"/zh-CN/blog/fury_0_4_0_release","content":"","keywords":"","version":null},{"title":"Highlight​","type":1,"pageTitle":"Fury 0.4.0 Released","url":"/zh-CN/blog/fury_0_4_0_release#highlight","content":" [Java] Support Graalvm native image. The implementation will generate all serialization code at image build time, the runtime will be extremely fast, see fury graalvm usage doc[Java] Fury vs JDK benchmark on Graalvm native image[Scala] Serialization support for package scoped object[C++] Reflection support by macro/template programing[C++] Automatic row format encoder  ","version":null,"tagName":"h2"},{"title":"What's Changed​","type":1,"pageTitle":"Fury 0.4.0 Released","url":"/zh-CN/blog/fury_0_4_0_release#whats-changed","content":" [Python] fix python release by @chaokunyang in https://github.com/alipay/fury/pull/1125[Java] make unsafe offset compatible with graalvm by @chaokunyang in https://github.com/alipay/fury/pull/1117[Scala] Fix scala package object JIT error by @chaokunyang in https://github.com/alipay/fury/pull/1130[Java] Refine maven pom config by @chaokunyang in https://github.com/alipay/fury/pull/1126[Rust] add rust building by @caicancai in https://github.com/alipay/fury/pull/1129[C++] Remove useless overload of Writer::WriteString by @PragmaTwice in https://github.com/alipay/fury/pull/1136[Rust] fix typo by @caicancai in https://github.com/alipay/fury/pull/1133[Rust] add mesaage about rust ci by @caicancai in https://github.com/alipay/fury/pull/1131[C++] Add move ctor/assign op to Status by @PragmaTwice in https://github.com/alipay/fury/pull/1134[Rust] fix cargo test error by @wangweipeng2 in https://github.com/alipay/fury/pull/1135[Rust] improve rust ci by @caicancai in https://github.com/alipay/fury/pull/1138[Scala] Fix scala collection serialization nested in pojo by @chaokunyang in https://github.com/alipay/fury/pull/1140[Java] make sting builder serializer codegen eager by @chaokunyang in https://github.com/alipay/fury/pull/1141[Rust] fix rust ci bug by @caicancai in https://github.com/alipay/fury/pull/1139[Java] support add static fields in fury codegen by @chaokunyang in https://github.com/alipay/fury/pull/1147[C++] Add the basic row format serializer for C++ class types via reflection by @PragmaTwice in https://github.com/alipay/fury/pull/1144[C++] Add duplicated fields detection in FURY_FIELD_INFO macro by @PragmaTwice in https://github.com/alipay/fury/pull/1151[Java] support create serializer when register class by @chaokunyang in https://github.com/alipay/fury/pull/1154[Java] Support graalvm native image by @chaokunyang in https://github.com/alipay/fury/pull/1143[C++] Support string type in RowEncoder by @PragmaTwice in https://github.com/alipay/fury/pull/1158[Scala] add graalvm support for scala singleton by @chaokunyang in https://github.com/alipay/fury/pull/1159[Scala] Fix scala singleton map/collection serialization in struct by @chaokunyang in https://github.com/alipay/fury/pull/1160[Java] add read resolve circular test suite by @chaokunyang in https://github.com/alipay/fury/pull/1161[Java] Remove load arrow serializers by default by @chaokunyang in https://github.com/alipay/fury/pull/1163[Java] Support thread safe fury for graalvm native image by @chaokunyang in https://github.com/alipay/fury/pull/1164[Scala] Fix package object serialization in scala App by @chaokunyang in https://github.com/alipay/fury/pull/1166[Java] add graalvm usage doc by @chaokunyang in https://github.com/alipay/fury/pull/1168[C++] Split util.h to bit_util.h and time_util.h by @PragmaTwice in https://github.com/alipay/fury/pull/1171[C++] Support cv-qualified types in row encoder by @PragmaTwice in https://github.com/alipay/fury/pull/1172[C++] Add support for nested class types in row encoder by @PragmaTwice in https://github.com/alipay/fury/pull/1173[Java] Add graalvm benchmark by @chaokunyang in https://github.com/alipay/fury/pull/1178[Java] Fix string key serializer ref tracking by @chaokunyang in https://github.com/alipay/fury/pull/1174[Java] Add graalvm benchmark test results by @chaokunyang in https://github.com/alipay/fury/pull/1180[Scala] fix package object inaccessible from source code by @chaokunyang in https://github.com/alipay/fury/pull/1181  Full Changelog: https://github.com/alipay/fury/compare/v0.3.1...v0.4.0 ","version":null,"tagName":"h2"},{"title":"Fury 0.4.1 Released","type":0,"sectionRef":"#","url":"/zh-CN/blog/fury_0_4_1_release","content":"","keywords":"","version":null},{"title":"Highlight​","type":1,"pageTitle":"Fury 0.4.1 Released","url":"/zh-CN/blog/fury_0_4_1_release#highlight","content":" [Rust] Support row format[C++] Support iterable types for RowEncoder[JavaScript] Support partial record[Java] Fix JIT error in corner case, now Fury can generate serializer for every class  ","version":null,"tagName":"h2"},{"title":"What's Changed​","type":1,"pageTitle":"Fury 0.4.1 Released","url":"/zh-CN/blog/fury_0_4_1_release#whats-changed","content":" [Doc] Refine issue template by a yaml form by @chaokunyang in https://github.com/alipay/fury/pull/1185[C++] Fix ownership problem for children writers by visitor by @PragmaTwice in https://github.com/alipay/fury/pull/1193[C++] Remove useless fields and macro in logging by @PragmaTwice in https://github.com/alipay/fury/pull/1195[Doc] add docs for java FuryBuilder #1188 by @mof-dev-3 in https://github.com/alipay/fury/pull/1192[Rust] support row format by @wangweipeng2 in https://github.com/alipay/fury/pull/1196[C++] Add RowEncoder wrapper to RowEncodeTrait by @PragmaTwice in https://github.com/alipay/fury/pull/1200[Rust] Row support more types by @wangweipeng2 in https://github.com/alipay/fury/pull/1202[Rust] Support row map by @wangweipeng2 in https://github.com/alipay/fury/pull/1206[C++] update bazel version from 4.2 to 6.3.2 by @chaokunyang in https://github.com/alipay/fury/pull/1204[JavaScript] Support partial record by @wangweipeng2 in https://github.com/alipay/fury/pull/1208[Java] fix package access level class accessor jit by @chaokunyang in https://github.com/alipay/fury/pull/1210[JavaScript] Fix register a description twice will get undefined serializer by @bytemain in https://github.com/alipay/fury/pull/1211[C++] Support iterable types in RowEncodeTrait by @PragmaTwice in https://github.com/alipay/fury/pull/1212[C++] Support iterable types for RowEncoder by @PragmaTwice in https://github.com/alipay/fury/pull/1215[Python] Refine py register class method by @chaokunyang in https://github.com/alipay/fury/pull/1218[Java] Clear extRegistry.getClassCtx if generate serializer class failed in https://github.com/alipay/fury/pull/1221  ","version":null,"tagName":"h2"},{"title":"New Contributors​","type":1,"pageTitle":"Fury 0.4.1 Released","url":"/zh-CN/blog/fury_0_4_1_release#new-contributors","content":" @bytemain made their first contribution in https://github.com/alipay/fury/pull/1211  Full Changelog: https://github.com/alipay/fury/compare/v0.4.0...v0.4.1 ","version":null,"tagName":"h2"},{"title":"Fury v0.3.0 released","type":0,"sectionRef":"#","url":"/zh-CN/blog/fury_0_3_0_release","content":"","keywords":"","version":null},{"title":"Scala Serialization Guide​","type":1,"pageTitle":"Fury v0.3.0 released","url":"/zh-CN/blog/fury_0_3_0_release#scala-serialization-guide","content":" Install dependecy:  libraryDependencies += &quot;org.furyio&quot; % &quot;fury-core&quot; % &quot;0.3.0&quot;   Creating fury:  val fury = Fury.builder() .withScalaOptimizationEnabled(true) .requireClassRegistration(false) .withRefTracking(true) .build()   Serialize case objects:  case class Person(github: String, age: Int, id: Long) val p = Person(&quot;https://github.com/chaokunyang&quot;, 18, 1) println(fury.deserialize(fury.serialize(p))) println(fury.deserializeJavaObject(fury.serializeJavaObject(p)))   Serialize singleton objects:  object singleton { } val o1 = fury.deserialize(fury.serialize(singleton)) val o2 = fury.deserialize(fury.serialize(singleton)) println(o1 == o2)   Serialize collection objects:  val seq = Seq(1,2) val list = List(&quot;a&quot;, &quot;b&quot;) val map = Map(&quot;a&quot; -&gt; 1, &quot;b&quot; -&gt; 2) println(fury.deserialize(fury.serialize(seq))) println(fury.deserialize(fury.serialize(list))) println(fury.deserialize(fury.serialize(map)))   Serialize enum:  enum Color { case Red, Green, Blue } println(fury.deserialize(fury.serialize(Color.Green)))   ","version":null,"tagName":"h2"},{"title":"Highlight​","type":1,"pageTitle":"Fury v0.3.0 released","url":"/zh-CN/blog/fury_0_3_0_release#highlight","content":" [Scala] Support scala serialization: case/object/tuple/string/collection/enum/basic all supported[Scala] Add scala user documentation[Scala] add optimized scala singleton object serializer[Java] Make java.io.Externalizable compatible with Java writeReplace/readResolve API[Java] Integrate fury with dubbo https://github.com/apache/dubbo-spi-extensions/pull/226[Java] support bytes string serialization for jdk8 with JDK17 runtime  ","version":null,"tagName":"h2"},{"title":"BugFix​","type":1,"pageTitle":"Fury v0.3.0 released","url":"/zh-CN/blog/fury_0_3_0_release#bugfix","content":" [Java] Allow for InputStream not reading entire length[Java] Use ReflectionUtils.getCtrHandle() for non-public constructor in ExternalizableSerializer[Java] fix jdk compatible serialization for inheritance  ","version":null,"tagName":"h2"},{"title":"What's Changed​","type":1,"pageTitle":"Fury v0.3.0 released","url":"/zh-CN/blog/fury_0_3_0_release#whats-changed","content":" [Impove]-[Doc] Improve README by @caicancai in https://github.com/alipay/fury/pull/1011[Java] rename wrong ascii naming to latin by @chaokunyang in https://github.com/alipay/fury/pull/1013[Doc] Update go install doc by @chaokunyang in https://github.com/alipay/fury/pull/1015fix(grammatical): correct typos and improve grammar by @iamahens in https://github.com/alipay/fury/pull/1018[Improve]-[Doc] Improve README by @caicancai in https://github.com/alipay/fury/pull/1020[Improve]-[Doc] add environment requirement by @caicancai in https://github.com/alipay/fury/pull/1022chore(docs): fixed typos by @Smoothieewastaken in https://github.com/alipay/fury/pull/1023bugfix: read buffer error when object contain binary field by @wangweipeng2 in https://github.com/alipay/fury/pull/1026[Doc] Optimize class registration doc by @chaokunyang in https://github.com/alipay/fury/pull/1027[Java] fix jdk compatible serialization for inheritance by @chaokunyang in https://github.com/alipay/fury/pull/1030[Doc] add scala user doc by @chaokunyang in https://github.com/alipay/fury/pull/1028[Doc] refine scala doc by @chaokunyang in https://github.com/alipay/fury/pull/1031Update README.md - fix grammatrical errors in README. by @ayushrakesh in https://github.com/alipay/fury/pull/1037[Java] Support local static class jit by @chaokunyang in https://github.com/alipay/fury/pull/1036[Java] support bytes string serialization for jdk8 by @chaokunyang in https://github.com/alipay/fury/pull/1039[Java] set timeout to JITContextTest by @chaokunyang in https://github.com/alipay/fury/pull/1040[Java] fix string builder serialization for jdk8 with jdk17 runtime by @chaokunyang in https://github.com/alipay/fury/pull/1042[Doc] add auto code reviewers by @chaokunyang in https://github.com/alipay/fury/pull/1043[Java] Allow for InputStream not reading entire length by @knutwannheden in https://github.com/alipay/fury/pull/1034[Java] Use ReflectionUtils.getCtrHandle() in ExternalizableSerializer by @knutwannheden in https://github.com/alipay/fury/pull/1044[Improve] make maven-spotless-plugin version as a parameter by @caicancai in https://github.com/alipay/fury/pull/1046Update README.md by @Shivam250702 in https://github.com/alipay/fury/pull/1047[Java] support writeReplace/readResolve for Externalizable by @chaokunyang in https://github.com/alipay/fury/pull/1048Update README.md by @Spyrosigma in https://github.com/alipay/fury/pull/1051Grammatical error in CODE_OF_CONDUCT.md by @HimanshuMahto in https://github.com/alipay/fury/pull/1050Update scala link title README.md by @chaokunyang in https://github.com/alipay/fury/pull/1052[Doc] add scala readme and refine document by @chaokunyang in https://github.com/alipay/fury/pull/1041[Java] populate StackOverflowError with enable ref tracking message by @chaokunyang in https://github.com/alipay/fury/pull/1049[Scala] Setup scala project by @chaokunyang in https://github.com/alipay/fury/pull/1054[Scala] add scala singleton object serializer by @chaokunyang in https://github.com/alipay/fury/pull/1053Updated README.md by @vidhijain27 in https://github.com/alipay/fury/pull/1056[Scala] add scala tuple serialization tests by @chaokunyang in https://github.com/alipay/fury/pull/1059Empty ListExpression#genCode will throw npe by @farmerworking in https://github.com/alipay/fury/pull/1063  ","version":null,"tagName":"h2"},{"title":"New Contributors​","type":1,"pageTitle":"Fury v0.3.0 released","url":"/zh-CN/blog/fury_0_3_0_release#new-contributors","content":" @iamahens made their first contribution in https://github.com/alipay/fury/pull/1018@Smoothieewastaken made their first contribution in https://github.com/alipay/fury/pull/1023@ayushrakesh made their first contribution in https://github.com/alipay/fury/pull/1037@knutwannheden made their first contribution in https://github.com/alipay/fury/pull/1034@Shivam250702 made their first contribution in https://github.com/alipay/fury/pull/1047@Spyrosigma made their first contribution in https://github.com/alipay/fury/pull/1051@HimanshuMahto made their first contribution in https://github.com/alipay/fury/pull/1050@vidhijain27 made their first contribution in https://github.com/alipay/fury/pull/1056@farmerworking made their first contribution in https://github.com/alipay/fury/pull/1063  Full Changelog: https://github.com/alipay/fury/compare/v0.2.1...v0.3.0 ","version":null,"tagName":"h2"},{"title":"Fury v0.5.0 Released","type":0,"sectionRef":"#","url":"/zh-CN/blog/fury_0_5_0_release","content":"","keywords":"","version":null},{"title":"New Features​","type":1,"pageTitle":"Fury v0.5.0 Released","url":"/zh-CN/blog/fury_0_5_0_release#new-features","content":" ","version":null,"tagName":"h2"},{"title":"Specification​","type":1,"pageTitle":"Fury v0.5.0 Released","url":"/zh-CN/blog/fury_0_5_0_release#specification","content":" Introduced fury cross-language serialization specification (#1413, #1508)Introduced xlang type mapping (#1468)Introduced fury java specification (#1240)Introduced meta string encoding specification (#1565, #1513, #1517)  ","version":null,"tagName":"h3"},{"title":"Java​","type":1,"pageTitle":"Fury v0.5.0 Released","url":"/zh-CN/blog/fury_0_5_0_release#java","content":" Support for compatible mode with GraalVM (#1586, #1587).Support unexisted array/enum classes and enabled deserializeUnexistedClass by default (#1569, #1575).meta string encoding algorithm in java (#1514, #1568, #1516, #1565)Support meta string encoding for classname and package name (#1527)native streaming mode deserialization (#1451, #1551)native channel stream reader (#1483)Support registration in thread safe fury (#1280)Implement fury logger and remove slf4j library (#1485, #1494, #1506, #1492)Support adjust logger level dynamically (#1557)Support jdk proxy serialization for graalvm (#1379)Specify JPMS module names (#1343)Align string array to collection protocol v2 (#1228)  ","version":null,"tagName":"h3"},{"title":"JavaScript​","type":1,"pageTitle":"Fury v0.5.0 Released","url":"/zh-CN/blog/fury_0_5_0_release#javascript","content":" Align implementation to new Xlang protocol (#1487)Implement Xlang map (#1549)Implemented xlang map code generator (#1571)Added magic number feature for better serialization control (#1550).Support oneof (#1348)create zero-copy buffer when convert (#1386)Implement the collection protocol (#1337)Implement Enum (#1321)compress numbers (#1290)  ","version":null,"tagName":"h3"},{"title":"C++​","type":1,"pageTitle":"Fury v0.5.0 Released","url":"/zh-CN/blog/fury_0_5_0_release#c","content":" Support optional fields/elements in RowEncoder (#1223)Support mapping types for RowEncodeTrait (#1247)  ","version":null,"tagName":"h3"},{"title":"Golang​","type":1,"pageTitle":"Fury v0.5.0 Released","url":"/zh-CN/blog/fury_0_5_0_release#golang","content":" Implemented Fury meta string encoding algorithm (#1566).concat meta string len with flags (#1517)  ","version":null,"tagName":"h3"},{"title":"Enhancements​","type":1,"pageTitle":"Fury v0.5.0 Released","url":"/zh-CN/blog/fury_0_5_0_release#enhancements","content":" ","version":null,"tagName":"h2"},{"title":"Java​","type":1,"pageTitle":"Fury v0.5.0 Released","url":"/zh-CN/blog/fury_0_5_0_release#java-1","content":" Improved buffer growth strategy to support larger data sizes for serialization (#1582).Performance optimizations for MetaStringDecoder and various serialization processes (#1568, #1511, #1493).concat write classname flag with package name (#1523)concat meta string len with flags (#1517)fastpath for read/write small varint in range [0,127] (#1503)optimize read float/double for jvm jit inline (#1472)replace Guava's TypeToken with self-made (#1553)Remove basic guava API usage (#1244)optimize fury creation speed (#1511)optimize string serialization by concat coder and length (#1486)carry read objects when deserialization fail for better trouble shooting (#1420)implement define_class insteadof using javaassist (#1422)avoid recompilation when gc happens for memory pressure (#1411, #1585)Fix immutable collection ref tracking (#1403)reduce fury caller stack (#1496)Extract BaseFury interface (#1382)refine collection builder util (#1334)disable async compilation for graalvm (#1222)refine endian check code size in buffer (#1501)generate list fori loop instead of iterator loop for list serialization (#1493)Reduce unsafeWritePositiveVarLong bytecode size. (#1491)Reduce unsafePutPositiveVarInt bytecode size. (#1490, #1489)optimize read char/short jvm jit inline (#1471)reduce code size of read long to optimize jvm jit inline (#1470)reduce readInt/readVarInt code size for for jvm jit inline (#1469)refactor readVarUint32 algorithm (#1462)rewrite readVarUint64 algorithm (#1463)  ","version":null,"tagName":"h3"},{"title":"JavaScript​","type":1,"pageTitle":"Fury v0.5.0 Released","url":"/zh-CN/blog/fury_0_5_0_release#javascript-1","content":" Make PlatformBuffer available if has Buffer polyfill (#1373)enhance performance 64bits number (#1320)Refactor &amp; Compress Long (#1313)Improve tag write performance (#1241)Add more methods for BinaryReader (#1231)Implements tuple serializer (#1216)  ","version":null,"tagName":"h3"},{"title":"Python​","type":1,"pageTitle":"Fury v0.5.0 Released","url":"/zh-CN/blog/fury_0_5_0_release#python","content":" concat meta string len with flags (#1517)  ","version":null,"tagName":"h3"},{"title":"Bug Fix​","type":1,"pageTitle":"Fury v0.5.0 Released","url":"/zh-CN/blog/fury_0_5_0_release#bug-fix","content":" Java​  Fix bytebuffer no such method error (#1580)Prevent exception in ObjectArray.clearObjectArray() (#1573)Fix slf4j on graalvm (#1432)Fix illegal classname caused by negative hash (#1436)Fix BigDecimal serializer (#1431)Fix BigInteger serialization (#1479)Fix type conflict in method split (#1371)Fix CodeGen Name conflicts when omitting java.lang prefix #1363 (#1366)Fix ClassLoader npe in loadOrGenCodecClass (#1346)Fix big buffer trunc (#1402)Make Blacklist detection is also performed when the Class is registered. (#1398)avoid big object graph cause buffer take up too much memory (#1397)Fix get static field by unsafe (#1380)Fix javax package for accessor codegen (#1388)Fix nested collection cast for scala/java (#1333)Fix References within InvocationHandler (#1365)Allow partial read of serialized size from InputStream (#1391)add potential missing bean class-loader (#1381)Fix polymorphic array serialization (#1324)Fix nested collection num elements (#1306)Fix collection init size typo (#1342)Clear extRegistry.getClassCtx if generate serializer class failed (#1221)  Rust​  Fix memory errors caused by casting (#1372)Fix incorrect cast (#1345)  ","version":null,"tagName":"h3"},{"title":"Miscellaneous​","type":1,"pageTitle":"Fury v0.5.0 Released","url":"/zh-CN/blog/fury_0_5_0_release#miscellaneous","content":" Numerous code cleanups, refactorings, and internal improvements across all supported languages to enhance code quality and maintainability.Moved various utilities into more appropriate packages to improve code organization and readability (#1584, #1583, #1578).rename MemoryBuffer read/write/put/getType with read/write/put/getTypeNumber (#1480, #1464, #1505, #1500)extract public Fury methods to BaseFury (#1467)Optimize Class ID allocation. (#1406)refine Collection util data structure (#1287) (#1288)Improve Status by using unique_ptr (#1234)Improve FormatTimePoint by removing sstream (#1233)Drop optional chaining expression (#1338)  ","version":null,"tagName":"h2"},{"title":"New Contributors​","type":1,"pageTitle":"Fury v0.5.0 Released","url":"/zh-CN/blog/fury_0_5_0_release#new-contributors","content":" @nandakumar131 made their first contribution in https://github.com/apache/fury/pull/1244@vesense made their first contribution in https://github.com/apache/fury/pull/1260@LiangliangSui made their first contribution in https://github.com/apache/fury/pull/1294@liuxiaocs7 made their first contribution in https://github.com/apache/fury/pull/1312@mtf90 made their first contribution in https://github.com/apache/fury/pull/1343@bowin made their first contribution in https://github.com/apache/fury/pull/1353@cn-at-osmit made their first contribution in https://github.com/apache/fury/pull/1366@Maurice-Betzel made their first contribution in https://github.com/apache/fury/pull/1381@phogh made their first contribution in https://github.com/apache/fury/pull/1391@laglangyue made their first contribution in https://github.com/apache/fury/pull/1415@Munoon made their first contribution in https://github.com/apache/fury/pull/1467@pixeeai made their first contribution in https://github.com/apache/fury/pull/1559@huisman6 made their first contribution in https://github.com/apache/fury/pull/1572@tommyettinger made their first contribution in https://github.com/apache/fury/pull/1573@qingoba made their first contribution in https://github.com/apache/fury/pull/1566  ","version":null,"tagName":"h2"},{"title":"Acknowledgements​","type":1,"pageTitle":"Fury v0.5.0 Released","url":"/zh-CN/blog/fury_0_5_0_release#acknowledgements","content":" Thanks @chaokunyang @theweipeng @PragmaTwice @LiangliangSui @nandakumar131 @Munoon @qingoba @vesense @liuxiaocs7 @mtf90 @bowin @cn-at-osmit @Maurice-Betzel @phogh @laglangyue @tommyettinger @huisman6 @pixeeai  A big thank you to all our contributors who have worked hard on this release. Your contributions, whether through code, documentation, or issue reporting, are really appreciated.  Full Changelog: https://github.com/apache/fury/compare/v0.4.1...v0.5.0 ","version":null,"tagName":"h2"},{"title":"Fury 0.5.1 Released","type":0,"sectionRef":"#","url":"/zh-CN/blog/fury_0_5_1_release","content":"","keywords":"","version":null},{"title":"Feature​","type":1,"pageTitle":"Fury 0.5.1 Released","url":"/zh-CN/blog/fury_0_5_1_release#feature","content":" feat(spec): remove list/map header from type meta spec by @chaokunyang in https://github.com/apache/fury/pull/1590perf(java): Reduce performance regression caused by deleteCharAt by @LiangliangSui in https://github.com/apache/fury/pull/1591feat(java): type meta encoding for java by @chaokunyang in https://github.com/apache/fury/pull/1556 and https://github.com/apache/fury/pull/1601feat(sepc): update type meta field info spec by @chaokunyang in https://github.com/apache/fury/pull/1603feat(javascript): add data to description util by @bytemain in https://github.com/apache/fury/pull/1609feat(java): Support CopyOnWriteArrayListSerializer by @MrChang0 in https://github.com/apache/fury/pull/1613feat(java): add blocked stream utils by @chaokunyang in https://github.com/apache/fury/pull/1617feat(go/java): Add ASCII check before meta string encoding by @jasonmokk in https://github.com/apache/fury/pull/1620feat(java): register old version guava collect by @MrChang0 in https://github.com/apache/fury/pull/1622feat(java): support deserialization ignoreEnumDeserializeError by @157152688 in https://github.com/apache/fury/pull/1623feat(java): add set serializer for concurrent set by @MrChang0 in https://github.com/apache/fury/pull/1616feat(java): add custom serializer register in case of special serializer ctr by @MrChang0 in https://github.com/apache/fury/pull/1625feat(java): remove soft/weak ref values from thread safe fury by @chaokunyang in https://github.com/apache/fury/pull/1639refactor(java): Remove Guava's Collection usages by @Munoon in https://github.com/apache/fury/pull/1611 and https://github.com/apache/fury/pull/1614refactor(java): replace Guava's string utility methods with own implementation by @Munoon in https://github.com/apache/fury/pull/1624  ","version":null,"tagName":"h2"},{"title":"Bug Fix​","type":1,"pageTitle":"Fury 0.5.1 Released","url":"/zh-CN/blog/fury_0_5_1_release#bug-fix","content":" fix(java): compatible low version guava by @MrChang0 in https://github.com/apache/fury/pull/1593 and https://github.com/apache/fury/pull/1594fix(java): fix getClassDef thead safety by @chaokunyang in https://github.com/apache/fury/pull/1597fix(java): remove maven groupId change by @chaokunyang in https://github.com/apache/fury/pull/1602fix(java): make slf4j provided by @chaokunyang in https://github.com/apache/fury/pull/1605fix(java): clear serializer for collection/map by @chaokunyang in https://github.com/apache/fury/pull/1606fix(java): fix TypeRef getSubType by @chaokunyang in https://github.com/apache/fury/pull/1608fix(java): fix fastutil Object2ObjectOpenHashMap serialization by @chaokunyang in https://github.com/apache/fury/pull/1618fix(java): subclass without fields will encode superclass by @MrChang0 in https://github.com/apache/fury/pull/1626fix(java): fix wildcard capturer capture NullPointerException by @chaokunyang in https://github.com/apache/fury/pull/1637fix(java): fix abstract collection elems same type serialization by @chaokunyang in https://github.com/apache/fury/pull/1641fix(java): ThreadPoolFury#factoryCallback don't work when create new classLoaderFuryPooled by @MrChang0 in https://github.com/apache/fury/pull/1628fix(go/java): Enhance ASCII check in meta string encoding by @jasonmokk in https://github.com/apache/fury/pull/1631  ","version":null,"tagName":"h2"},{"title":"Misc​","type":1,"pageTitle":"Fury 0.5.1 Released","url":"/zh-CN/blog/fury_0_5_1_release#misc","content":" chore(java): move tests to meta/reflect pkg by @chaokunyang in https://github.com/apache/fury/pull/1592chore(java): make enum serializer as an upper level class by @chaokunyang in https://github.com/apache/fury/pull/1598chore: bump dev version to 0.6.0 by @chaokunyang in https://github.com/apache/fury/pull/1599chore: Fury header add language field by @LiangliangSui in https://github.com/apache/fury/pull/1612chore(java): rename deserializeUnexistentEnumValueAsNull to deserializeNonexistentAsNull by @chaokunyang in https://github.com/apache/fury/pull/1634chore(java): remove gpg pinentry-mode by @chaokunyang in https://github.com/apache/fury/pull/1636  ","version":null,"tagName":"h2"},{"title":"New Contributors​","type":1,"pageTitle":"Fury 0.5.1 Released","url":"/zh-CN/blog/fury_0_5_1_release#new-contributors","content":" @MrChang0 made their first contribution in https://github.com/apache/fury/pull/1594@jasonmokk made their first contribution in https://github.com/apache/fury/pull/1620@157152688 made their first contribution in https://github.com/apache/fury/pull/1623  Full Changelog: https://github.com/apache/fury/compare/v0.5.0...v0.5.1 ","version":null,"tagName":"h2"},{"title":"Fury v0.7.0 Released","type":0,"sectionRef":"#","url":"/zh-CN/blog/fury_0_7_0_release","content":"","keywords":"","version":null},{"title":"High Light​","type":1,"pageTitle":"Fury v0.7.0 Released","url":"/zh-CN/blog/fury_0_7_0_release#high-light","content":" ","version":null,"tagName":"h2"},{"title":"Experimental​","type":1,"pageTitle":"Fury v0.7.0 Released","url":"/zh-CN/blog/fury_0_7_0_release#experimental","content":" Implement fast object deep copy framework for java:  Fury fury = Fury.builder().withRefCopy(true).build(); fury.register(SomeClass.class); SomeClass a = xxx; SomeClass copied = fury.copy(a);   Benchmark result:  Benchmark\tobjectType\tScore\tError\tUnitsfury_copy\tMEDIA_CONTENT\t1243297.690\t± 451828.452\tops/s fury_copy\tSAMPLE\t2670545.816\t± 1378536.021\tops/s fury_copy\tSTRUCT\t2673356.422\t± 202288.322\tops/s fury_copy\tSTRUCT2\t1943587.774\t± 392513.707\tops/s fury_copy_int_map\tint map\t1470264.733\t± 1021875.257\tops/s fury_copy_list\tint list\t3556892.276\t± 127410.724\tops/s fury_copy_object_array\tarray\t4430589.112\t± 25366.893\tops/s fury_copy_string_map\tstring map\t1736145.327\t± 377806.877\tops/s kryo_copy\tMEDIA_CONTENT\t804208.092\t± 27429.069\tops/s kryo_copy\tSAMPLE\t717669.608\t± 71093.370\tops/s kryo_copy\tSTRUCT\t1076048.642\t± 223194.146\tops/s kryo_copy\tSTRUCT2\t141374.767\t± 14150.535\tops/s kryo_copy_int_map\tint map\t546203.187\t± 54669.173\tops/s kryo_copy_list\tint list\t843643.496\t± 312306.921\tops/s kryo_copy_object_array\tobject array\t1593267.344\t± 1721824.436\tops/s kryo_copy_string_map\tstring map\t574809.875\t± 47316.340\tops/s  ","version":null,"tagName":"h3"},{"title":"Features​","type":1,"pageTitle":"Fury v0.7.0 Released","url":"/zh-CN/blog/fury_0_7_0_release#features","content":" feat(Rust): add meta string encoding algorithm in Rust by @urlyy in https://github.com/apache/fury/pull/1712feat(Rust): Implement utf16 to utf8 conversion algorithm by @urlyy in https://github.com/apache/fury/pull/1730perf(java): add struct benchmark with pb by @chaokunyang in https://github.com/apache/fury/pull/1736feat(java): fast object copy framework in fury java by @zhaommmmomo in https://github.com/apache/fury/pull/1701perf(java): optimize pojo copy performance by @chaokunyang in https://github.com/apache/fury/pull/1739feat(java): support jdk17+ record copy by @chaokunyang in https://github.com/apache/fury/pull/1741feat(RUST): String detection is performed using SIMD techniques by @kitty-eu-org in https://github.com/apache/fury/pull/1752feat(java): Add 'Expose' annotation to support &quot;only de/serialize annotated fields&quot; by @urlyy in https://github.com/apache/fury/pull/1751feat(java): support Ignore inconsistent types deserialize by @weijiang157152688 in https://github.com/apache/fury/pull/1737perf(java): optimize map copy perf by @chaokunyang in https://github.com/apache/fury/pull/1767perf(java): optimize list copy perf by @chaokunyang in https://github.com/apache/fury/pull/1769perf(java): optimize object array copy perf by @chaokunyang in https://github.com/apache/fury/pull/1770feat(java): support deep ref copy by @chaokunyang in https://github.com/apache/fury/pull/1771  ","version":null,"tagName":"h2"},{"title":"Bug Fix​","type":1,"pageTitle":"Fury v0.7.0 Released","url":"/zh-CN/blog/fury_0_7_0_release#bug-fix","content":" fix(java): fix janino commons classes issue by @chaokunyang in https://github.com/apache/fury/pull/1753fix(scala): fix scala release version by @chaokunyang in https://github.com/apache/fury/pull/1756fix(java): fix streaming classdef read by @chaokunyang in https://github.com/apache/fury/pull/1758fix(java): fix big buffer streaming MetaShared read offset by @chaokunyang in https://github.com/apache/fury/pull/1760fix(java): fix fury logger npe by @chaokunyang in https://github.com/apache/fury/pull/1762fix(java): fix enum abstract field serialization by @chaokunyang in https://github.com/apache/fury/pull/1765fix(java): Fix memory leak in StructSerializer.xread() caused by re-pushing instead of popping GenericType. by @komamitsu in https://github.com/apache/fury/pull/1768  ","version":null,"tagName":"h2"},{"title":"Other Improvements​","type":1,"pageTitle":"Fury v0.7.0 Released","url":"/zh-CN/blog/fury_0_7_0_release#other-improvements","content":" chore: Update case in DISCLAIMER by @pjfanning in https://github.com/apache/fury/pull/1746chore: bump dev version to 0.7.0 by @chaokunyang in https://github.com/apache/fury/pull/1755chore(java): rename copyTrackingRef to copyRef by @chaokunyang in https://github.com/apache/fury/pull/1748chore(java): add fury deep copy documentation by @chaokunyang in https://github.com/apache/fury/pull/1773  ","version":null,"tagName":"h2"},{"title":"New Contributors​","type":1,"pageTitle":"Fury v0.7.0 Released","url":"/zh-CN/blog/fury_0_7_0_release#new-contributors","content":" @urlyy made their first contribution in https://github.com/apache/fury/pull/1712@zhaommmmomo made their first contribution in https://github.com/apache/fury/pull/1701@kitty-eu-org made their first contribution in https://github.com/apache/fury/pull/1752@komamitsu made their first contribution in https://github.com/apache/fury/pull/1768  Full Changelog: https://github.com/apache/fury/compare/v0.6.0...v0.7.0  ","version":null,"tagName":"h2"},{"title":"Acknowledgements​","type":1,"pageTitle":"Fury v0.7.0 Released","url":"/zh-CN/blog/fury_0_7_0_release#acknowledgements","content":" Thanks @komamitsu @pjfanning @chaokunyang @weijiang157152688 @kitty-eu-org @urlyy @zhaommmmomo A big thank you to all our contributors who have worked hard on this release. Your contributions, whether through code, documentation, or issue reporting, are really appreciated.  Full Changelog: https://github.com/apache/fury/compare/v0.6.0...v0.7.0 ","version":null,"tagName":"h2"},{"title":"Fury v0.7.1 Released","type":0,"sectionRef":"#","url":"/zh-CN/blog/fury_0_7_1_release","content":"","keywords":"","version":null},{"title":"Features​","type":1,"pageTitle":"Fury v0.7.1 Released","url":"/zh-CN/blog/fury_0_7_1_release#features","content":" feat(javascript): Added MetaString Class for Unicode Encoding/Decoding in Type.Object Code Generation by @Forchapeatl in https://github.com/apache/fury/pull/1774feat(Rust): Refine Code Structure &amp; Prepare for Future Compatibility Features by @theweipeng in https://github.com/apache/fury/pull/1787feat(java): ThreadSafeFury add getClassResolver method by @funky-eyes in https://github.com/apache/fury/pull/1780feat(Rust): Implement TypeMeta part of the compatibility features by @theweipeng in https://github.com/apache/fury/pull/1789feat(Rust): Support polymorphism by @theweipeng in https://github.com/apache/fury/pull/1795feat(java): Support copy capabilities for some classes without no-argument constructors by @zhaommmmomo in https://github.com/apache/fury/pull/1794feat(java): support jdk9+ java.util.ImmutableCollections copy by @zhaommmmomo in https://github.com/apache/fury/pull/1800feat(rust): support enum serialization by @jiacai2050 in https://github.com/apache/fury/pull/1817refine fury website and add chinese documents by @yuluo-yx and @LofiSu  ","version":null,"tagName":"h2"},{"title":"Bug Fix​","type":1,"pageTitle":"Fury v0.7.1 Released","url":"/zh-CN/blog/fury_0_7_1_release#bug-fix","content":" ci: fix rust ci failed by @LiangliangSui in https://github.com/apache/fury/pull/1783fix(java): fix classloader get npe by @chaokunyang in https://github.com/apache/fury/pull/1792fix(scala): fix nested type serialization in scala object type by @chaokunyang in https://github.com/apache/fury/pull/1809fix(java): Fix replace resolver serializaiton by @chaokunyang in https://github.com/apache/fury/pull/1812fix(java): fix reserved keyword conflict by @chaokunyang in https://github.com/apache/fury/pull/1819fix(java): fix nested map field value serialization by private map serializer by @chaokunyang in https://github.com/apache/fury/pull/1820fix(rust): use iter to avoid reallocate by @jiacai2050 in https://github.com/apache/fury/pull/1821  ","version":null,"tagName":"h2"},{"title":"Other Improvements​","type":1,"pageTitle":"Fury v0.7.1 Released","url":"/zh-CN/blog/fury_0_7_1_release#other-improvements","content":" chore(java): Disallow writing meta classdef when obj is null by @LiangliangSui in https://github.com/apache/fury/pull/1686chore(infra): optimize github tmpl &amp; update actions/checkout version to 4.1.7 by @yuluo-yx in https://github.com/apache/fury/pull/1807chore(infra): remove redundant bug reporting options by @yuluo-yx in https://github.com/apache/fury/pull/1810docs: add check lint ci &amp; fix md lint by @yuluo-yx in https://github.com/apache/fury/pull/1811  ","version":null,"tagName":"h2"},{"title":"New Contributors​","type":1,"pageTitle":"Fury v0.7.1 Released","url":"/zh-CN/blog/fury_0_7_1_release#new-contributors","content":" @Forchapeatl made their first contribution in https://github.com/apache/fury/pull/1774@funky-eyes made their first contribution in https://github.com/apache/fury/pull/1780@yuluo-yx made their first contribution in https://github.com/apache/fury/pull/1807  Full Changelog: https://github.com/apache/fury/compare/v0.7.0...v0.7.1  ","version":null,"tagName":"h2"},{"title":"Acknowledgements​","type":1,"pageTitle":"Fury v0.7.1 Released","url":"/zh-CN/blog/fury_0_7_1_release#acknowledgements","content":" Thanks @jiacai2050 @chaokunyang @theweipeng @funky-eyes @Forchapeatl @zhaommmmomo @yuluo-yx @LiangliangSui @LofiSu  A big thank you to all our contributors who have worked hard on this release. Your contributions, whether through code, documentation, or issue reporting, are really appreciated. ","version":null,"tagName":"h2"},{"title":"Fury v0.9.0 Released","type":0,"sectionRef":"#","url":"/zh-CN/blog/fury_0_9_0_release","content":"","keywords":"","version":null},{"title":"Highlight​","type":1,"pageTitle":"Fury v0.9.0 Released","url":"/zh-CN/blog/fury_0_9_0_release#highlight","content":" Optimized serializers for Fury kotlin supportHighly-optimized UTF-8 string encoding implementation for Java(2x faster than JDK utf8 encoding)Reduce metastring hashcode payload for small string(&lt;=16 bytes)Support building C++ libs on windows platform  ","version":null,"tagName":"h2"},{"title":"Features​","type":1,"pageTitle":"Fury v0.9.0 Released","url":"/zh-CN/blog/fury_0_9_0_release#features","content":" feat(kotlin): Introduce kotlin package with stdlib collections and tests by @wywen in https://github.com/apache/fury/pull/1877feat(kotlin): Add Unsigned Primitive Support by @wywen in https://github.com/apache/fury/pull/1886feat(kotlin): Add unsigned array support and tests for arrays and strings by @wywen in https://github.com/apache/fury/pull/1891feat(java): Refactor String serialization and deserialization by @HuangXingBo in https://github.com/apache/fury/pull/1890feat(java): support thread safe register callback for scala kotlin by @chaokunyang in https://github.com/apache/fury/pull/1895feat(scala): add scala range serializer by @chaokunyang in https://github.com/apache/fury/pull/1899feat(java): add option to treat enum as string by @orisgarno in https://github.com/apache/fury/pull/1892feat(kotlin): Add tests and support for built-in types from the kotlin stdlib by @wywen in https://github.com/apache/fury/pull/1901feat(java): reduce metastring hashcode payload for small string(&lt;=16 bytes) by @chaokunyang in https://github.com/apache/fury/pull/1909feat(javascript): Added serialization and serialization for Type Meta Layer by @Forchapeatl in https://github.com/apache/fury/pull/1825feat(bazel): support building C++ libs on windows platform by @An-DJ in https://github.com/apache/fury/pull/1873feat(scala): support scala native image build by @chaokunyang in https://github.com/apache/fury/pull/1922perf(python): Add python benchmark test by @penguin-wwy in https://github.com/apache/fury/pull/1916  ","version":null,"tagName":"h2"},{"title":"Bug Fix​","type":1,"pageTitle":"Fury v0.9.0 Released","url":"/zh-CN/blog/fury_0_9_0_release#bug-fix","content":" fix(scala): ban these sbt commands by @pjfanning in https://github.com/apache/fury/pull/1862fix(java): fix async compilation switch for non-public nested class by @chaokunyang in https://github.com/apache/fury/pull/1883fix(java): fix add fury thread safety issue by @chaokunyang in https://github.com/apache/fury/pull/1889fix(other): fix feature request template by @chaokunyang in https://github.com/apache/fury/pull/1898fix(java): NonExistentEnum on mode serializeEnumByName by @orisgarno in https://github.com/apache/fury/pull/1904fix(java): ThreadLocalFury and ThreadPoolFury prioritize using the user classloader by @Aliothmoon in https://github.com/apache/fury/pull/1907fix(java): child container deep copy by @zhaommmmomo in https://github.com/apache/fury/pull/1911fix(java): Fix incorrect results of utf16 to utf8 conversion for latin1 but not ascii characters in https://github.com/apache/fury/pull/1914fix(python): Eliminate PytestCollectionWarning when running pytest by @penguin-wwy in https://github.com/apache/fury/pull/1917  ","version":null,"tagName":"h2"},{"title":"Other Improvements​","type":1,"pageTitle":"Fury v0.9.0 Released","url":"/zh-CN/blog/fury_0_9_0_release#other-improvements","content":" chore(py314): Replace deprecated pkgutil.find_loader by @effigies in https://github.com/apache/fury/pull/1888docs(guide): Fix package typo by @mandrean in https://github.com/apache/fury/pull/1906build(kotlin): Add spotless ktfmt and enable explicit api mode for library code. by @wywen in https://github.com/apache/fury/pull/1912build(deps): upgrade scala (2.13.15/3.3.4) by @pjfanning in https://github.com/apache/fury/pull/1861feat(rust): add rust-analyzer to toolchain by @caicancai in https://github.com/apache/fury/pull/1865chore(scala): add scala build script by @chaokunyang in https://github.com/apache/fury/pull/1920chore(kotlin): add parent pom for fury kotlin by @chaokunyang in https://github.com/apache/fury/pull/1921feat(java): Improve error message on architecture not using little-endian format by @apupier in https://github.com/apache/fury/pull/1918  ","version":null,"tagName":"h2"},{"title":"New Contributors​","type":1,"pageTitle":"Fury v0.9.0 Released","url":"/zh-CN/blog/fury_0_9_0_release#new-contributors","content":" @An-DJ made their first contribution in https://github.com/apache/fury/pull/1873@wywen made their first contribution in https://github.com/apache/fury/pull/1877@effigies made their first contribution in https://github.com/apache/fury/pull/1888@HuangXingBo made their first contribution in https://github.com/apache/fury/pull/1890@orisgarno made their first contribution in https://github.com/apache/fury/pull/1892@mandrean made their first contribution in https://github.com/apache/fury/pull/1906@Aliothmoon made their first contribution in https://github.com/apache/fury/pull/1907@penguin-wwy made their first contribution in https://github.com/apache/fury/pull/1916@apupier made their first contribution in https://github.com/apache/fury/pull/1918  Full Changelog: https://github.com/apache/fury/compare/v0.8.0...v0.9.0  ","version":null,"tagName":"h2"},{"title":"Acknowledgements​","type":1,"pageTitle":"Fury v0.9.0 Released","url":"/zh-CN/blog/fury_0_9_0_release#acknowledgements","content":" Thanks @effigies @apupier @wywen @mandrean @HuangXingBo @pjfanning @chaokunyang @penguin-wwy @An-DJ @Forchapeatl @orisgarno @zhaommmmomo @caicancai @Aliothmoon  A big thank you to all our contributors who have worked hard on this release. Your contributions, whether through code, documentation, or issue reporting, are really appreciated. ","version":null,"tagName":"h2"},{"title":"Fury v0.8.0 Released","type":0,"sectionRef":"#","url":"/zh-CN/blog/fury_0_8_0_release","content":"","keywords":"","version":null},{"title":"Highlights​","type":1,"pageTitle":"Fury v0.8.0 Released","url":"/zh-CN/blog/fury_0_8_0_release#highlights","content":" Support graalvm 17/21/22 native imageRelease fury optimized serializers for scala collectionReduce scala collection classname serialization cost using dict encoding  ","version":null,"tagName":"h2"},{"title":"Features​","type":1,"pageTitle":"Fury v0.8.0 Released","url":"/zh-CN/blog/fury_0_8_0_release#features","content":" refactor(rust): simplify error handle by @jiacai2050 in https://github.com/apache/fury/pull/1823feat(java): support graalvm 17/21/22 by @chaokunyang in https://github.com/apache/fury/pull/1845perf(java): inline same element invoke in jit by @chaokunyang in https://github.com/apache/fury/pull/1851perf(java): optimize read classdef perf by @chaokunyang in https://github.com/apache/fury/pull/1852feat(scala): optimize scala class serialization by @chaokunyang in https://github.com/apache/fury/pull/1853feat(java): implement sublist serializers by @chaokunyang in https://github.com/apache/fury/pull/1856feat(java): use SubListViewSerializer only when tracking ref by @chaokunyang in https://github.com/apache/fury/pull/1858  ","version":null,"tagName":"h2"},{"title":"Bug Fix​","type":1,"pageTitle":"Fury v0.8.0 Released","url":"/zh-CN/blog/fury_0_8_0_release#bug-fix","content":" fix(java): DeserializationException#getMessage call by @yoohaemin in https://github.com/apache/fury/pull/1830fix(java): fix collection view serialization by @chaokunyang in https://github.com/apache/fury/pull/1833fix(java): fix long type name meta string encoding by @chaokunyang in https://github.com/apache/fury/pull/1837fix(java): fix serializer factory getSerializerClass by @chaokunyang in https://github.com/apache/fury/pull/1836fix(rust): replace (value &lt;&lt; 8) | (value &gt;&gt; 8) with value.rotate_right(8) by @chaokunyang in https://github.com/apache/fury/pull/1841fix(java): Fix for maximum size of java arrays by @fink-arthur in https://github.com/apache/fury/pull/1843fix(java): Fix max Java array size for reader by @fink-arthur in https://github.com/apache/fury/pull/1844fix(java): fix jdk proxy serialization when proxy writeReplace method by @chaokunyang in https://github.com/apache/fury/pull/1857  ","version":null,"tagName":"h2"},{"title":"Other Improvements​","type":1,"pageTitle":"Fury v0.8.0 Released","url":"/zh-CN/blog/fury_0_8_0_release#other-improvements","content":" chore(java): fix default value doc for metaShareEnabled/scopedMetaShareEnabled by @chaokunyang in https://github.com/apache/fury/pull/1826chore(doc): fix 'how to upgrade fury' link in README by @sh-cho in https://github.com/apache/fury/pull/1846build(deps): bump com.google.protobuf:protobuf-java from 3.16.3 to 3.25.5 in /java/benchmark by @dependabot in https://github.com/apache/fury/pull/1847chore(java): simplify generated codec name by @chaokunyang in https://github.com/apache/fury/pull/1850ci: only run sync job if the repo is apache/fury by @pjfanning in https://github.com/apache/fury/pull/1860feat(scala): upgrade sbt and sbt-apache-sonatype by @pjfanning in https://github.com/apache/fury/pull/1859  ","version":null,"tagName":"h2"},{"title":"New Contributors​","type":1,"pageTitle":"Fury v0.8.0 Released","url":"/zh-CN/blog/fury_0_8_0_release#new-contributors","content":" @yoohaemin made their first contribution in https://github.com/apache/fury/pull/1830@fink-arthur made their first contribution in https://github.com/apache/fury/pull/1843@sh-cho made their first contribution in https://github.com/apache/fury/pull/1846  Full Changelog: https://github.com/apache/fury/compare/v0.7.1...v0.8.0  ","version":null,"tagName":"h2"},{"title":"Acknowledgements​","type":1,"pageTitle":"Fury v0.8.0 Released","url":"/zh-CN/blog/fury_0_8_0_release#acknowledgements","content":" Thanks @jiacai2050 @fink-arthur @sh-cho @pjfanning @chaokunyang @yoohaemin  A big thank you to all our contributors who have worked hard on this release. Your contributions, whether through code, documentation, or issue reporting, are really appreciated. ","version":null,"tagName":"h2"},{"title":"Fury 0.6.0 Released","type":0,"sectionRef":"#","url":"/zh-CN/blog/fury_0_6_0_release","content":"","keywords":"","version":null},{"title":"High light​","type":1,"pageTitle":"Fury 0.6.0 Released","url":"/zh-CN/blog/fury_0_6_0_release#high-light","content":" In this release, we introduced a scoped meta share mode for schema evolution in java and enabled it by default when CompatibleMode is set to Compatible:  This mode is 50% faster than previous KV compatible mode, and only 1/6 size of serialized payload than before.It's 4x faster than protobuf, less than 1/2 serialized size of protobuf for complex object.    Protobuf/JSON will write message fields meta and values in a KV layout, so when serializzing a list of message, they will have two issues:  Write meta multiple times even those message are the same type.KV layout is dispersive, which is not friendly for compression.  The meta share mode will write field name&amp;type meta of a struct only once for multiple objects of same type, which will save space and improve performance comparedto protobuf.  With meta share, we can write field name&amp;type meta of a struct only once for multiple objects of same type, which will save space and improve performance comparedto protobuf. And we can also encode the meta into binary in advance, and use one memory copy to write it which will be much faster.  ","version":null,"tagName":"h2"},{"title":"Serialize data​","type":1,"pageTitle":"Fury 0.6.0 Released","url":"/zh-CN/blog/fury_0_6_0_release#serialize-data","content":"  public static class NumericStruct { public int f1; public int f2; public int f3; public int f4; public int f5; public int f6; public int f7; public int f8; public static NumericStruct build() { NumericStruct struct = new NumericStruct(); struct.f1 = 1; struct.f2 = 2; struct.f3 = 3; struct.f4 = 4; struct.f5 = 5; struct.f6 = 6; struct.f7 = 7; struct.f8 = 8; return struct; } } public static class NumericStructList { public List&lt;NumericStruct&gt; list; public static NumericStructList build() { NumericStructList structList = new NumericStructList(); structList.list = new ArrayList&lt;&gt;(1000); for (int i = 0; i &lt; 1000; i++) { structList.list.add(NumericStruct.build()); } return structList; }   ","version":null,"tagName":"h3"},{"title":"Result​","type":1,"pageTitle":"Fury 0.6.0 Released","url":"/zh-CN/blog/fury_0_6_0_release#result","content":" Performance:  Benchmark Mode Cnt Score Error Units fury_deserialize thrpt 30 49667.900 ± 3004.061 ops/s fury_kv_compatible_deserialize thrpt 30 33014.595 ± 3716.199 ops/s fury_kv_compatible_serialize thrpt 30 23915.260 ± 3968.119 ops/s fury_serialize thrpt 30 63146.826 ± 2930.505 ops/s protobuf_deserialize thrpt 30 14156.610 ± 685.272 ops/s protobuf_serialize thrpt 30 10060.293 ± 706.064 ops/s   Size:  Lib\tSerialized Payload Sizefury\t8077 furystrict\t8009 furykv\t48028 protobuf\t18000  ","version":null,"tagName":"h3"},{"title":"Feature​","type":1,"pageTitle":"Fury 0.6.0 Released","url":"/zh-CN/blog/fury_0_6_0_release#feature","content":" feat(java): support nonexistent class deserialization in meta share mode by @chaokunyang in https://github.com/apache/fury/pull/1646feat(java): scoped meta share mode for type forward/backward compaibility by @chaokunyang in https://github.com/apache/fury/pull/1660feat(java): support meta compression by Deflater by @chaokunyang in https://github.com/apache/fury/pull/1663perf(java): Add ClassInfo ClassBytes generation conditions. by @LiangliangSui in https://github.com/apache/fury/pull/1667feat(javascript): use TextDecoder to decode buffer by @bytemain in https://github.com/apache/fury/pull/1699feat(Python): meta string encoding algorithm in Python by @pandalee99 in https://github.com/apache/fury/pull/1702feat(C++): String detection is performed using SIMD techniques by @pandalee99 in https://github.com/apache/fury/pull/1720feat(C++): The use of SIMD accelerated to implement and optimize utf16 utf8 by @pandalee99 in https://github.com/apache/fury/pull/1732feat(java): enable scoped meta share for compatible mode by default by @chaokunyang in https://github.com/apache/fury/pull/1733perf(java): optimize scoped meta share mode perf by @chaokunyang in https://github.com/apache/fury/pull/1734  ","version":null,"tagName":"h2"},{"title":"Bug Fix​","type":1,"pageTitle":"Fury 0.6.0 Released","url":"/zh-CN/blog/fury_0_6_0_release#bug-fix","content":" chore(doc): fix example by @wangjie-fourth in https://github.com/apache/fury/pull/1657fix(java): fix scala object type codegen by @chaokunyang in https://github.com/apache/fury/pull/1659fix(java): Fix header offset issue in MetaStringBytes hashcode by @LiangliangSui in https://github.com/apache/fury/pull/1668fix(java): return fury to pooled which get from by @MrChang0 in https://github.com/apache/fury/pull/1697fix(doc): codestyle version in python by @pandalee99 in https://github.com/apache/fury/pull/1706fix(java): fix nested map serialization codegen by @chaokunyang in https://github.com/apache/fury/pull/1713fix(java): fix fastjson object serialization by @chaokunyang in https://github.com/apache/fury/pull/1717  ","version":null,"tagName":"h2"},{"title":"Others​","type":1,"pageTitle":"Fury 0.6.0 Released","url":"/zh-CN/blog/fury_0_6_0_release#others","content":" chore: Add IssueNavigationLink and icon for IDEA by @lvshaokang in https://github.com/apache/fury/pull/1665chore(rust): resolve deprecate warnings by @waynexia in https://github.com/apache/fury/pull/1662chore(doc): fix doc example code by @wangjie-fourth in https://github.com/apache/fury/pull/1666chore(rust): Setup rustfmt and toolchain for rust by @Xuanwo in https://github.com/apache/fury/pull/1677chore(rust): Make rust clippy happy by @Xuanwo in https://github.com/apache/fury/pull/1678chore(doc): add incubating DISCLAIMER by @chaokunyang in https://github.com/apache/fury/pull/1681chore(java): Update github URL in IntelliJ vcs.xml by @pjfanning in https://github.com/apache/fury/pull/1689ci: fix ci error by @LiangliangSui in https://github.com/apache/fury/pull/1691docs: fix badge x by @vesense in https://github.com/apache/fury/pull/1694chore(doc): fix compiler error by @wangjie-fourth in https://github.com/apache/fury/pull/1698refactor(java): move latin language checker method from string serializer to string util by @anagh07 in https://github.com/apache/fury/pull/1708chore(doc): the more complete readme is in python by @pandalee99 in https://github.com/apache/fury/pull/1709build: update scala build by @pjfanning in https://github.com/apache/fury/pull/1725build: publish jars for fury-scala by @pjfanning in https://github.com/apache/fury/pull/1729chore(java): merge reflect.Types into TypeRef by @chaokunyang in https://github.com/apache/fury/pull/1731  ","version":null,"tagName":"h2"},{"title":"New Contributors​","type":1,"pageTitle":"Fury 0.6.0 Released","url":"/zh-CN/blog/fury_0_6_0_release#new-contributors","content":" @wangjie-fourth made their first contribution in https://github.com/apache/fury/pull/1657@lvshaokang made their first contribution in https://github.com/apache/fury/pull/1665@waynexia made their first contribution in https://github.com/apache/fury/pull/1662@Xuanwo made their first contribution in https://github.com/apache/fury/pull/1677@anagh07 made their first contribution in https://github.com/apache/fury/pull/1708  Full Changelog: https://github.com/apache/fury/compare/v0.5.1...v0.6.0 ","version":null,"tagName":"h2"},{"title":"Apache Fury: A blazing fast multi-language serialization framework powered by JIT and zero-copy","type":0,"sectionRef":"#","url":"/zh-CN/blog/fury_blazing_fast_multiple_language_serialization_framework","content":"","keywords":"","version":null},{"title":"Background​","type":1,"pageTitle":"Apache Fury: A blazing fast multi-language serialization framework powered by JIT and zero-copy","url":"/zh-CN/blog/fury_blazing_fast_multiple_language_serialization_framework#background","content":" Serialization is a basic component of system communication, and widely used in big data, AI framework, cloud native and other distributed systems. Data transfer between processes, languages, nodes, or object persistence, state read-write and copy, all need serialization. The performance and ease-of-use of serialization affects runtime and development efficiency of the system.  Static serialization frameworks like Protobuf or FlatBuffers cannot be used for cross-language application development directly, because they don't support shared reference and polymorphism, and also need to generate code ahead.  Dynamic serialization frameworks such as JDK serialization, Kryo, Fst, Hessian, Pickle provide ease-of-use and dynamics, but don't support cross-language and suffer significant performance issues, which is unsuitable for high throughput, low latency, and large-scale data transfer scenarios.  Therefore, we developed a new multi-language serialization framework Apache Fury, which is open-sourced on https://github.com/apache/fury. Through highly optimized serialization primitives, JIT dynamic compilation and zero-copy technologies, Fury is both fast and easy-to-use. It can cross-language serialize any object automatically and provides ultimate performance at the same time.    ","version":null,"tagName":"h2"},{"title":"What is Apache Fury?​","type":1,"pageTitle":"Apache Fury: A blazing fast multi-language serialization framework powered by JIT and zero-copy","url":"/zh-CN/blog/fury_blazing_fast_multiple_language_serialization_framework#what-is-apache-fury","content":" Apache Fury is a multi-language serialization framework powered by JIT dynamic compilation and zero copy, providing blazing fast speed and ease of use:  Multiple languages: Java, Python, C++, Golang, JavaScript, Rust. Other languages can be added easily.Highly optimized serialization primitives.Zero-copy: Support out-of-band serialization and off-heap read/write.High performance: Use JIT to generate serialization code at runtime in an async multithreaded way, which can optimize methods inlining, code cache, dead code elimination, hash lookup, meta writing and memory read/write.Multi protocols: Provide flexibility and ease of use of dynamic serialization, as well as the cross-language of static serialization. Java Serialization: Drop-in replaces JDK, Kryo, and Hessian. No need to modify user code, but providing 170x speed up at most, which can improve efficiency of rpc, data transfer and object persistence significantly.100% JDK compatible, support JDK custom serialization methods writeObject, readObject, writeReplace, readResolve, readObjectNoData natively. Cross-language object graph: Cross-language serialize any objects automatically, no need for IDL, schema compilation, and object/protocol conversion.Cross-language serialize shared/circular reference, no data duplication or recursion error.Support object polymorphism, multiple children type objects can be serialized simultaneously. Row format A cache-friendly binary random-access format, supports skipping deserialization and lazy deserialization, efficient for high-performance computing and large-scale data transfer.Support automatic conversion to Apache Arrow.  ","version":null,"tagName":"h2"},{"title":"Core Serialization Capabilities​","type":1,"pageTitle":"Apache Fury: A blazing fast multi-language serialization framework powered by JIT and zero-copy","url":"/zh-CN/blog/fury_blazing_fast_multiple_language_serialization_framework#core-serialization-capabilities","content":" Although different scenarios require different serialization protocols, the underlying operations of serialization are similar.  Therefore, Fury defines and implements a set of basic serialization capabilities, which can be used for quickly building new multi-language serialization protocols and get speedup by JIT acceleration and other optimizations.  At the same time, performance optimization for a protocol on the primitives can also benefit all other protocols.  ","version":null,"tagName":"h2"},{"title":"Serialization Primitives​","type":1,"pageTitle":"Apache Fury: A blazing fast multi-language serialization framework powered by JIT and zero-copy","url":"/zh-CN/blog/fury_blazing_fast_multiple_language_serialization_framework#serialization-primitives","content":" Common serialization operations contains:  Bitmap operationsNumber encoding and decodingCompression for int and longString creation and copyString encoding: ASCII, UTF8, UTF16Memory copyArray copy and compressionMeta encoding, compression, and cache  Fury use SIMD and other advanced language features to make basic operations extremely fast in every languages.  ","version":null,"tagName":"h3"},{"title":"Zero-copy Serialization​","type":1,"pageTitle":"Apache Fury: A blazing fast multi-language serialization framework powered by JIT and zero-copy","url":"/zh-CN/blog/fury_blazing_fast_multiple_language_serialization_framework#zero-copy-serialization","content":" Large-scale data transfer often has multiple binary buffers in an object graph. Some serialization frameworks will write the binaries into an intermediate buffer and introduce multiple time-consuming memory copies. Fury implemented an out-of-band serialization protocol inspired by pickle5, Ray and Apache Arrow, which can capture all binary buffers in an object graph to avoid intermediate copies of these buffers.  The following figure shows the serialization process of zero-copy:    Currently, Fury supports the following types of zero-copy:  Java: all basic types of arrays, ByteBuffer, ArrowRecordBatch, and VectorSchemaRootPython: all arrays of the array module, numpy arrays, pyarrow.Table, and pyarrow.RecordBatchGolang: byte slice  You can also add the new zero copy type based on the Fury interface.  ","version":null,"tagName":"h3"},{"title":"JIT dynamic compilation acceleration​","type":1,"pageTitle":"Apache Fury: A blazing fast multi-language serialization framework powered by JIT and zero-copy","url":"/zh-CN/blog/fury_blazing_fast_multiple_language_serialization_framework#jit-dynamic-compilation-acceleration","content":" Custom type objects usually contain lots of type information, Fury used this information to generate efficient serialization code at runtime, which can push lots of runtime operations into the dynamic compilation stage. By inlining more methods, better code cache, reducing virtual method calls, conditional branches, hash lookup, metadata writes, and memory reads/writes, the serialization performance is greatly accelerated.  For Java, Fury implements a runtime codegen framework and defines an operator expression IR. Then fury can perform type inference based on the generic type information of the object at runtime to build an expression tree that describes the logic of serialized code.  The codegen framework will generate efficient Java code from the expression tree, then pass to Janino to compile it into bytecode, and load it into the user's ClassLoader or the ClassLoader created by Fury, and finally compile it into efficient assembly code through Java JIT.  Since JVM JIT skips Big method compilation and inlining, Fury also implements an optimizer to split big methods into small methods recursively, thus ensuring that all code can be compiled and inlined.    Fury also supports asynchronous multithreaded compilation by running the codegen tasks in a thread pool, and using interpretation mode until JIT finishes to ensure no serialization burrs. Users can skip warm up serialization of objects.  Python and JavaScript codegen are similar. Generating source code is easier for development and troubleshooting problems.  Since serialization will manipulate objects extensively in each programming language, and the language does not expose the low-level API of the memory model, native methods call has a large cost too, so we cannot use LLVM to build a unified serializer JIT framework. Instead, we implemented a codegen framework for every language separately.  ","version":null,"tagName":"h3"},{"title":"Static code generation​","type":1,"pageTitle":"Apache Fury: A blazing fast multi-language serialization framework powered by JIT and zero-copy","url":"/zh-CN/blog/fury_blazing_fast_multiple_language_serialization_framework#static-code-generation","content":" Although JIT compilation can greatly improve serialization efficiency and generate better serialization code based on the statistical distribution of data at runtime, languages like C++ do not support reflection, have no virtual machines, and no low-level API for memory models. We cannot generate serialization code dynamically for such languages through JIT.  In such scenarios, Fury is implementing an AOT codegen framework, which generates the serialized code statically according to the object schema, and objects can be serialized automatically using the generated serializer. For Rust, Rust macro is used to generate code statically.  ","version":null,"tagName":"h3"},{"title":"Cache optimization​","type":1,"pageTitle":"Apache Fury: A blazing fast multi-language serialization framework powered by JIT and zero-copy","url":"/zh-CN/blog/fury_blazing_fast_multiple_language_serialization_framework#cache-optimization","content":" When serializing a custom type, fury will reorder fields to ensure that fields of the same type are serialized in order. This can hit more data cache and CPU instruction cache.  The basic type fields are written in descending order by byte size. In this way, if the initial addresses are aligned, subsequent read and write operations will occur at the position where the memory addresses are aligned, making CPU execution more efficient.  ","version":null,"tagName":"h3"},{"title":"Multi-protocol Design and Implementation​","type":1,"pageTitle":"Apache Fury: A blazing fast multi-language serialization framework powered by JIT and zero-copy","url":"/zh-CN/blog/fury_blazing_fast_multiple_language_serialization_framework#multi-protocol-design-and-implementation","content":" Based on the multi-language serialization features provided by Fury core, we have built three serialization protocols for different scenarios:  Java serialization: Suitable for pure Java serialization scenarios and provides up to 170x speed up;Cross-language object graph serialization: Suitable for application-oriented multi-language programming and high-performance cross-language serialization;Row-format serialization: Suitable for distributed computing engines such as Apache Spark, Apache Flink, Apache Doris, Velox, and features frameworks.  In the future, we will add new protocols for other core scenarios. Users can also build their own protocols based on Fury's serialization framework.  ","version":null,"tagName":"h2"},{"title":"Java serialization​","type":1,"pageTitle":"Apache Fury: A blazing fast multi-language serialization framework powered by JIT and zero-copy","url":"/zh-CN/blog/fury_blazing_fast_multiple_language_serialization_framework#java-serialization","content":" Java is widely used in big data, cloud native, microservices, and enterprise applications. Therefore, Fury made lots of optimizations for Java serialization, which reduces system latency and server costs a lot, and improves throughput significantly. Our implementation has the following highlights:  Blazing fast performance: Based on Java types, JIT compilation and Unsafe low-level operations, Fury is 170x faster than JDK, and 50~110x faster than Kryo/Hessian at most.100% JDK serialization API compatibility : Supports all JDK custom serialization methods writeObject, readObject, writeReplace, readResolve, readObjectNoData natively to ensure the serialization correctness in any scenario. Kryo and Hessian have some correctness issues in these scenarios.Type compatibility: When the deserialization and serialization class schema are inconsistent, it can still deserialize correctly. It supports application upgrade and deployment, add/delete fields independently. Fury type-compatible mode is implemented with no performance loss compared to type-consistent mode.Metadata sharing : share metadata(class name, field name&amp;type, etc.) across multiple serializations under a context (TCP connection), meta will be sent to the peer only for the first serialization, the peer can reconstruct the same deserializer based on this information. Subsequent serialization will skip transferring metadata, which can reduce network traffic, and support type compatibility automatically.Zero-copy support: supports out-of-band zero copy and off-heap memory read and write.  ","version":null,"tagName":"h3"},{"title":"Cross-language object graph serialization​","type":1,"pageTitle":"Apache Fury: A blazing fast multi-language serialization framework powered by JIT and zero-copy","url":"/zh-CN/blog/fury_blazing_fast_multiple_language_serialization_framework#cross-language-object-graph-serialization","content":" Fury cross-language object graph serialization is primarily used for scenarios that require higher dynamics and ease-of-use.  Although frameworks like Protobuf or FlatBuffers support cross-language serialization, they still have limitations:  They require pre-defined IDLs and generate code statically ahead, lacking sufficient dynamics and flexibility;The generated classes don't conform to object-oriented design and it's impossible to add behavior to classes, which make them unsuitable for use as domain objects in cross-language application development.They don't support polymorphism. Object-oriented programming uses interfaces to invoke subclass methods, but this pattern isn't supported well in those frameworks. Although FlatBuffers offers Union, and Protobuf provides OneOf/Any, those API require check object type during serialization and deserialization, which isn't polymorphic.They don't support circular references and shared references. Users need to define a set of IDLs for domain objects and implement reference resolution by themselves, as well as writing code to convert between domain objects and protocol objects in each language. If the object graph depth is deep, more code needs to be written.  Due to the above limitations, Fury implemented a cross-language object graph serialization protocol that:  Automatically serializes any object across multiple languages: By defining classes in the serialization and deserialization peer, objects in one language can be automatically serialized into objects in another language without creating IDL files, compiling schema to generate code, or writing conversion code.Automatically serializes shared and circular references across multiple languages.Supports object type polymorphism, consistent with the object-oriented programming paradigm, and multiple subtypes can be automatically deserialized without manual intervention.Out-of-band zero-copy is also supported in this protocol.  Example of Automatic Cross-Language Serialization:    ","version":null,"tagName":"h3"},{"title":"Row-format​","type":1,"pageTitle":"Apache Fury: A blazing fast multi-language serialization framework powered by JIT and zero-copy","url":"/zh-CN/blog/fury_blazing_fast_multiple_language_serialization_framework#row-format","content":" For high-performance computing and large-scale data transfer scenarios, data serialization and transfer are often the performance bottlenecks of the system. If users only need to read part of the data or filter data based on some field of an object, deserializing the entire data will result in unnecessary overhead. Therefore, Fury provides a binary data structure for direct reading and writing on binary data to avoid serialization.  Apache Arrow is a standardized columnar storage format that supports binary read and write. However, columnar format is not suitable for all scenarios. Data in online and streaming computing are naturally stored row by row, and row is also used in columnar computing engines when involving data updates, Hash/Join/Aggregation operations.  However, there is no standardized implementation for row format. Computing engines such as Spark/Flink/Doris/Velox all defined their row format, which doesn't support cross-language and can only be used internally by themselves. FlatBuffers does support lazy deserialization, but it requires static compilation of schema IDL and management of offset, which is impossible for complex scenarios.  Therefore, Fury implemented a binary row format inspired by Spark Tungsten and Apache Arrow format, which allows random access and partial deserialization. Currently, Java/Python/C++ versions have been implemented, allowing direct reading and writing on binary data to avoid all serialization overhead, and can convert to arrow format automatically.    This format is densely stored, byte aligned and cache-friendly, which enables faster read and write operations. By avoiding deserialization, it reduces Java GC pressure and Python overhead. Based on Python's dynamics, Fury's data structure implements special methods such as getattr, getitem, slice, etc., ensuring behavior consistency with Python dataclass, list, object, and users have no perception of this.  ","version":null,"tagName":"h3"},{"title":"Performance Comparison​","type":1,"pageTitle":"Apache Fury: A blazing fast multi-language serialization framework powered by JIT and zero-copy","url":"/zh-CN/blog/fury_blazing_fast_multiple_language_serialization_framework#performance-comparison","content":" Here are some Java serialization performance data, where charts with &quot;compatible&quot; in the title are performance data under type compatible mode: Support type forward vs. Backward compatibility. Charts without &quot;compatible&quot; in the title are performance data without type compatibility: class schema must be same between serialization and deserialization.  For fairness, Fury disabled the zero-copy feature for all tests.        ","version":null,"tagName":"h2"},{"title":"Roadmap​","type":1,"pageTitle":"Apache Fury: A blazing fast multi-language serialization framework powered by JIT and zero-copy","url":"/zh-CN/blog/fury_blazing_fast_multiple_language_serialization_framework#roadmap","content":" Meta compression, auto meta sharing and cross-language schema compatibility.AOT Framework for C++ and Golang to generate code statically.Object graph serialization support for C++ and RustRow format support for Golang, Rust, and NodeJSProtobuf compatibility supportProtocols for features and knowledge graph serializationContinuously improve our serialization infrastructure for any new protocols  ","version":null,"tagName":"h2"},{"title":"Join us​","type":1,"pageTitle":"Apache Fury: A blazing fast multi-language serialization framework powered by JIT and zero-copy","url":"/zh-CN/blog/fury_blazing_fast_multiple_language_serialization_framework#join-us","content":" We are committed to building Apache Fury into an open and neutral community project that pursues passion and innovation. The development and discussion are open-sourced and transparent in the community. Any form of participation is welcome, including but not limited to questions, code contributions, technical discussions, etc. We are looking forward to receiving your ideas and feedback, participating in the project together, pushing the project forward and creating a better serialization framework.  The GitHub address of the fury repository is: https://github.com/apache/fury  Official website: https://fury.apache.org  All issues, PR, and Discussion are welcome. ","version":null,"tagName":"h2"},{"title":"Meta String: A 37.5% space efficient string encoding than UTF-8 in Fury serialization","type":0,"sectionRef":"#","url":"/zh-CN/blog/fury_meta_string_37_5_percent_space_efficient_encoding_than_utf8","content":"","keywords":"","version":null},{"title":"Background​","type":1,"pageTitle":"Meta String: A 37.5% space efficient string encoding than UTF-8 in Fury serialization","url":"/zh-CN/blog/fury_meta_string_37_5_percent_space_efficient_encoding_than_utf8#background","content":" In rpc/serialization systems, we often need to send namespace/path/filename/fieldName/packageName/moduleName/className/enumValue string between processes.  Those strings are mostly ascii strings. In order to transfer between processes, we encode such strings using utf-8 encodings. Such encoding will take one byte for every char, which is not space efficient actually.  If we take a deeper look, we will found that most chars are lowercase chars, ., $ and _, which can be expressed in a much smaller range 0~32. But one byte can represent range 0~255, the significant bits are wasted, and this cost is not ignorable. In a dynamic serialization framework, such meta will take considerable cost compared to actual data.  So we proposed a new string encoding algorithm which we called meta string encoding in Fury. It will encode most chars using 5 bits instead of 8 bits in utf-8 encoding, which can bring 37.5% space cost savings compared to utf-8 encoding.  ","version":null,"tagName":"h2"},{"title":"Meta String Introduction​","type":1,"pageTitle":"Meta String: A 37.5% space efficient string encoding than UTF-8 in Fury serialization","url":"/zh-CN/blog/fury_meta_string_37_5_percent_space_efficient_encoding_than_utf8#meta-string-introduction","content":" Meta string encoding algorithm is mainly used to encode meta strings such as field names, namespace, packageName, className, path and filename. Such a string is enumerated and limited, so the encoding performance is not important since we can cache the encoding result.  Meta string encoding uses 5/6 bits instead of 8 bits in utf-8 encoding for every chars. Since it uses less bits than utf8, it can bring37.5% space cost savings compared to utf-8 and has a smaller encoded binary size, which uses less storage and makes the network transfer faster.  More details about meta string spec can be found in Fury xlang serialization specification.  ","version":null,"tagName":"h2"},{"title":"Encoding Algorithms​","type":1,"pageTitle":"Meta String: A 37.5% space efficient string encoding than UTF-8 in Fury serialization","url":"/zh-CN/blog/fury_meta_string_37_5_percent_space_efficient_encoding_than_utf8#encoding-algorithms","content":" String binary encoding algorithm:  Algorithm\tPattern\tDescriptionLOWER_SPECIAL\ta-z._$|\tevery char is written using 5 bits, a-z: 0b00000~0b11001, ._$|: 0b11010~0b11101, prepend one bit at the start to indicate whether strip last char since last byte may have 7 redundant bits(1 indicates strip last char) LOWER_UPPER_DIGIT_SPECIAL\ta-zA-Z0~9._\tevery char is written using 6 bits, a-z: 0b00000~0b11001, A-Z: 0b11010~0b110011, 0~9: 0b110100~0b111101, ._: 0b111110~0b111111, prepend one bit at the start to indicate whether strip last char since last byte may have 7 redundant bits(1 indicates strip last char) UTF-8\tany chars\tUTF-8 encoding  If we use LOWER_SPECIAL/LOWER_UPPER_DIGIT_SPECIAL, we must add a strip last char flag in encoded data. This is because every char will be encoded using 5/6 bits, and the last char may have 1~7 bits which are unused by encoding, such bits may cause an extra char to be read, which we must strip off.  Here is encoding code snippet in java, see org.apache.fury.meta.MetaStringEncoder#encodeGeneric(char[], int) for more details:  private byte[] encodeGeneric(char[] chars, int bitsPerChar) { int totalBits = chars.length * bitsPerChar + 1; int byteLength = (totalBits + 7) / 8; // Calculate number of needed bytes byte[] bytes = new byte[byteLength]; int currentBit = 1; for (char c : chars) { int value = (bitsPerChar == 5) ? charToValueLowerSpecial(c) : charToValueLowerUpperDigitSpecial(c); // Encode the value in bitsPerChar bits for (int i = bitsPerChar - 1; i &gt;= 0; i--) { if ((value &amp; (1 &lt;&lt; i)) != 0) { // Set the bit in the byte array int bytePos = currentBit / 8; int bitPos = currentBit % 8; bytes[bytePos] |= (byte) (1 &lt;&lt; (7 - bitPos)); } currentBit++; } } boolean stripLastChar = bytes.length * 8 &gt;= totalBits + bitsPerChar; if (stripLastChar) { bytes[0] = (byte) (bytes[0] | 0x80); } return bytes; } private int charToValueLowerSpecial(char c) { if (c &gt;= 'a' &amp;&amp; c &lt;= 'z') { return c - 'a'; } else if (c == '.') { return 26; } else if (c == '_') { return 27; } else if (c == '$') { return 28; } else if (c == '|') { return 29; } else { throw new IllegalArgumentException(&quot;Unsupported character for LOWER_SPECIAL encoding: &quot; + c); } } private int charToValueLowerUpperDigitSpecial(char c) { if (c &gt;= 'a' &amp;&amp; c &lt;= 'z') { return c - 'a'; } else if (c &gt;= 'A' &amp;&amp; c &lt;= 'Z') { return 26 + (c - 'A'); } else if (c &gt;= '0' &amp;&amp; c &lt;= '9') { return 52 + (c - '0'); } else if (c == specialChar1) { return 62; } else if (c == specialChar2) { return 63; } else { throw new IllegalArgumentException( &quot;Unsupported character for LOWER_UPPER_DIGIT_SPECIAL encoding: &quot; + c); } }   Here is decoding code snippet in golang, see go/fury/meta/meta_string_decoder.go:70 for more details:  func (d *Decoder) decodeGeneric(data []byte, algorithm Encoding) ([]byte, error) { bitsPerChar := 5 if algorithm == LOWER_UPPER_DIGIT_SPECIAL { bitsPerChar = 6 } // Retrieve 5 bits every iteration from data, convert them to characters, and save them to chars // &quot;abc&quot; encodedBytes as [00000] [000,01] [00010] [0, corresponding to three bytes, which are 0, 68, 0 // Take the highest digit first, then the lower, in order // here access data[0] before entering the loop, so we had to deal with empty data in Decode method // totChars * bitsPerChar &lt;= totBits &lt; (totChars + 1) * bitsPerChar stripLastChar := (data[0] &amp; 0x80) &gt;&gt; 7 totBits := len(data)*8 - 1 - int(stripLastChar)*bitsPerChar totChars := totBits / bitsPerChar chars := make([]byte, totChars) bitPos, bitCount := 6, 1 // first highest bit indicates whether strip last char for i := 0; i &lt; totChars; i++ { var val byte = 0 for i := 0; i &lt; bitsPerChar; i++ { if data[bitCount/8]&amp;(1&lt;&lt;bitPos) &gt; 0 { val |= 1 &lt;&lt; (bitsPerChar - i - 1) } bitPos = (bitPos - 1 + 8) % 8 bitCount++ } ch, err := d.decodeChar(val, algorithm) if err != nil { return nil, err } chars[i] = ch } return chars, nil }   ","version":null,"tagName":"h2"},{"title":"Select Best Encoding​","type":1,"pageTitle":"Meta String: A 37.5% space efficient string encoding than UTF-8 in Fury serialization","url":"/zh-CN/blog/fury_meta_string_37_5_percent_space_efficient_encoding_than_utf8#select-best-encoding","content":" For most lowercase characters, meta string will use 5 bits to encode every char. For string containing uppercase chars, meta string will try to convert the string into a lower case representation by inserting some markers, and compare used bytes with 6 bits encoding, then select the encoding which has smaller encoded size.  Here is the common encoding selection strategy:  Encoding Flag\tPattern\tEncoding AlgorithmLOWER_SPECIAL\tevery char is in a-z._|\tLOWER_SPECIAL FIRST_TO_LOWER_SPECIAL\tevery char is in a-z._ except first char is upper case\treplace first upper case char to lower case, then use LOWER_SPECIAL ALL_TO_LOWER_SPECIAL\tevery char is in a-zA-Z._\treplace every upper case char by | + lower case, then use LOWER_SPECIAL, use this encoding if it's smaller than Encoding LOWER_UPPER_DIGIT_SPECIAL LOWER_UPPER_DIGIT_SPECIAL\tevery char is in a-zA-Z._\tuse LOWER_UPPER_DIGIT_SPECIAL encoding if it's smaller than Encoding FIRST_TO_LOWER_SPECIAL UTF8\tany utf-8 char\tuse UTF-8 encoding Compression\tany utf-8 char\tlossless compression  For package name, module name or namespace, LOWER_SPECIAL will be used mostly. ALL_TO_LOWER_SPECIAL can be used too, since it can represent the same chars as LOWER_SPECIAL without using more bits, but also support string with uppercase chars.  For className, FIRST_TO_LOWER_SPECIAL will be used mostly. If there are multiple uppercase chars, then ALL_TO_LOWER_SPECIAL will be used instead. If a string contains digits, then LOWER_UPPER_DIGIT_SPECIAL will be used.  Finally, utf8 will be the fallback encoding if the string contains some chars which is not in range a-z0-9A-Z.  ","version":null,"tagName":"h2"},{"title":"Encoding Flags and Data jointly​","type":1,"pageTitle":"Meta String: A 37.5% space efficient string encoding than UTF-8 in Fury serialization","url":"/zh-CN/blog/fury_meta_string_37_5_percent_space_efficient_encoding_than_utf8#encoding-flags-and-data-jointly","content":" Depending on the case, one can choose encoding flags + data jointly, using 3 bits of first byte for flags and other bytes for data. This can be useful since there are some holes remaining in last byte, adding flags in data doesn't always increase serialized bytes size.Or one can use a header to encode such flags with other meta such as encoded size, this is what Fury does in https://github.com/apache/fury/pull/1556  ","version":null,"tagName":"h2"},{"title":"Benchmark​","type":1,"pageTitle":"Meta String: A 37.5% space efficient string encoding than UTF-8 in Fury serialization","url":"/zh-CN/blog/fury_meta_string_37_5_percent_space_efficient_encoding_than_utf8#benchmark","content":" utf8 encoding uses 30 bytes for string org.apache.fury.benchmark.data, fury meta string uses only 19 bytes. utf8 encoding uses 12 bytes for string MediaContent, but fury meta string uses only 9 bytes.  // utf8 use 30 bytes, we use only 19 bytes assertEquals(encoder.encode(&quot;org.apache.fury.benchmark.data&quot;).getBytes().length, 19); // utf8 uses 12 bytes, we use only 9 bytes. assertEquals(encoder.encode(&quot;MediaContent&quot;).getBytes().length, 9);  ","version":null,"tagName":"h2"},{"title":"社区","type":0,"sectionRef":"#","url":"/zh-CN/docs/community/","content":"","keywords":"","version":"下一步"},{"title":"邮件列表​","type":1,"pageTitle":"社区","url":"/zh-CN/docs/community/#邮件列表","content":" 邮件列表\t描述\t订阅\t取消订阅\t发送邮件\t活动dev@fury.apache.org\t开发相关讨论\t订阅\t取消订阅\t发送邮件\t邮件列表活动 commits@fury.apache.org\t仓库的所有 commits\t订阅\t取消订阅\t只读的邮件列表\t邮件列表活动  在尝试发送邮件之前，请确保订阅上述的邮件列表。  如果您没有订阅邮件列表，您的邮件将被拒绝或不会收到回复。  ","version":"下一步","tagName":"h2"},{"title":"如何订阅邮件列表​","type":1,"pageTitle":"社区","url":"/zh-CN/docs/community/#如何订阅邮件列表","content":" 要发送邮件至邮件列表，请先通过以下方式订阅：  发送电子邮件至 listname-subscribe@fury.apache.org，并相应替换 listname；回复您将收到的确认电子邮件，保持邮件主题行完整；然后您将收到一封欢迎的电子邮件，订阅成功。  在讨论电子邮件中的代码片段时，请确保：  您不要链接到外部服务中的文件，因为此类文件可能会更改、被删除或链接可能会中断，从而使存档的电子邮件线程变得无用；您粘贴文本而不是文本屏幕截图；粘贴代码时保持格式，以保持代码可读；有足够的导入语句以避免产生代码歧义。  ","version":"下一步","tagName":"h3"},{"title":"Slack​","type":1,"pageTitle":"社区","url":"/zh-CN/docs/community/#slack","content":" 您可以加入Slack 上的 Apache Fury™ 社区。  这里有一些社区规则：  保持尊重和友善；所有重要的决定和结论都必须反映到邮件列表中。 “如果这没有在邮件列表中有相关的讨论记录，则代表它不生效” ；The Apache Way；使用 Slack 线程来防止并行对话淹没当前的对话频道；请不要直接向邮件列表发送 Bug fix、Issue 分配和 Code Review 消息。这些内容应该被社区贡献者自愿处理并分配。  ","version":"下一步","tagName":"h2"},{"title":"Issue 跟踪​","type":1,"pageTitle":"社区","url":"/zh-CN/docs/community/#issue-跟踪","content":" 我们使用 GitHub Issues 来跟踪所有 Issues：  代码相关问题：https://github.com/apache/fury/issues网站相关问题：https://github.com/apache/fury-site/issues  您需要有一个 GitHub 帐户 才能创建问题。 如果您没有 GitHub 帐户，您可以发送电子邮件至 dev@fury.apache.org。  ","version":"下一步","tagName":"h2"},{"title":"报告 Bug​","type":1,"pageTitle":"社区","url":"/zh-CN/docs/community/#报告-bug","content":" 您在报告 Bug 之前，应该：  验证该 Bug 确实存在；搜索 Issue List 以确保不存在相关 Bug。在 Issue List 中创建 bug 报告。如果可能的话，深入研究 Apache Fury 的源代码，并针对您报告的 Bug 提交补丁，这有助于快速修复 Bug。  ","version":"下一步","tagName":"h3"},{"title":"报告安全漏洞​","type":1,"pageTitle":"社区","url":"/zh-CN/docs/community/#报告安全漏洞","content":" Apache Fury 是 Apache 软件基金会 的一个项目，遵循 ASF 漏洞处理流程。  要报告您发现的新的安全漏洞，请遵循 ASF 漏洞报告流程，该流程解释了如何私下向社区维护者发送详细的漏洞信息。  ","version":"下一步","tagName":"h3"},{"title":"New Feature​","type":1,"pageTitle":"社区","url":"/zh-CN/docs/community/#new-feature","content":" 欢迎您增强功能或新功能建议。提案越具体、越合理，您在 Fury 社区的影响力就越大。它有可能在之后版本发布。  ","version":"下一步","tagName":"h3"},{"title":"项目源代码​","type":1,"pageTitle":"社区","url":"/zh-CN/docs/community/#项目源代码","content":" Fury Core 存储库：https://github.com/apache/furyFury 网站存储库：https://github.com/apache/fury-site ","version":"下一步","tagName":"h3"},{"title":"如何加入 Fury 社区","type":0,"sectionRef":"#","url":"/zh-CN/docs/community/how_to_join_community","content":"","keywords":"","version":"下一步"},{"title":"Fury 贡献指南​","type":1,"pageTitle":"如何加入 Fury 社区","url":"/zh-CN/docs/community/how_to_join_community#fury-贡献指南","content":" Fury 团队通常在 github 上进行开发和 issue 维护，请打开 Github 网站，点击右上角 Sign up 按钮，注册一个自己的账号，开启你开源之旅的第一步。  在 Fury仓库中，我们有一份面向所有开源贡献者的指南，介绍了有关版本管理、分支管理等内容，请花几分钟时间阅读了解一下。  ","version":"下一步","tagName":"h2"},{"title":"你的第一个 Pull Request​","type":1,"pageTitle":"如何加入 Fury 社区","url":"/zh-CN/docs/community/how_to_join_community#你的第一个-pull-request","content":" ","version":"下一步","tagName":"h2"},{"title":"Step0：安装 Git​","type":1,"pageTitle":"如何加入 Fury 社区","url":"/zh-CN/docs/community/how_to_join_community#step0安装-git","content":" Git 是一种版本控制系统，用于跟踪和管理软件开发项目中的代码变更。它帮助开发者记录和管理代码的历史记录，方便团队协作、代码版本控制、合并代码等操作。通过 Git，您可以追踪每个文件的每个版本，并轻松地在不同版本之间进行切换和比较。Git 还提供了分支管理功能，使得可以同时进行多个并行开发任务。  访问 Git 官方网站：https://git-scm.com下载最新版本的 Git 安装程序。运行下载的安装程序，按照安装向导的提示进行安装。安装完成后，你可以通过命令行使用 git version 命令确认安装成功。  ","version":"下一步","tagName":"h3"},{"title":"Step1：Fork 项目​","type":1,"pageTitle":"如何加入 Fury 社区","url":"/zh-CN/docs/community/how_to_join_community#step1fork-项目","content":" 首先需要 fork 这个项目，进入Fury项目页面，点击右上角的 Fork 按钮你的 github 帐号中会出现 xxxx(你的 github 用户名)/fury 这个项目在本地电脑上使用以下命令: 得到一个 fury 文件夹  // ssh git clone git@github.com:xxxx(你的github用户名)/fury.git // https git clone https://github.com/xxxx(你的github用户名)/fury.git   ","version":"下一步","tagName":"h3"},{"title":"Step2：获取项目代码​","type":1,"pageTitle":"如何加入 Fury 社区","url":"/zh-CN/docs/community/how_to_join_community#step2获取项目代码","content":" 进入 fury 文件夹，添加 fury 的远程地址  git remote add upstream https://github.com/apache/fury.git   ","version":"下一步","tagName":"h3"},{"title":"Step3：创建分支​","type":1,"pageTitle":"如何加入 Fury 社区","url":"/zh-CN/docs/community/how_to_join_community#step3创建分支","content":" 好了，现在可以开始贡献我们的代码了。fury 默认分支为 main 分支。无论是功能开发、bug 修复、文档编写，都请新建立一个分支，再合并到 main 分支上。使用以下代码创建分支：  // 创建功能开发分支 git checkout -b feat/xxxx // 创建问题修复开发分支 git checkout -b fix/xxxx // 创建文档、demo分支 git checkout -b docs/add-java-demo   假设我们创建了文档修改分支 docs/add-java-demo  假设我们已经添加了一些代码，提交到代码库 git add . git commit -a -m &quot;docs: add java demo and related docs&quot; 。  ","version":"下一步","tagName":"h3"},{"title":"Step4：合并修改​","type":1,"pageTitle":"如何加入 Fury 社区","url":"/zh-CN/docs/community/how_to_join_community#step4合并修改","content":" 切换回自己的开发分支:  git checkout docs/add-java-demo   把更新代码提交到自己的分支中:  git push origin docs/add-java-demo   ","version":"下一步","tagName":"h3"},{"title":"Step5：提交 Pull Request​","type":1,"pageTitle":"如何加入 Fury 社区","url":"/zh-CN/docs/community/how_to_join_community#step5提交-pull-request","content":" 你可以在你的 github 代码仓库页面点击 Compare &amp; pull request 按钮。或通过 contribute 按钮创建。  填写这是什么类型的修改填写关联的 issue若有复杂变更，请说明背景和解决方案  相关信息填写完成后，点击 Create pull request 提交。  ","version":"下一步","tagName":"h3"},{"title":"轻松步入 Fury 开源贡献之旅​","type":1,"pageTitle":"如何加入 Fury 社区","url":"/zh-CN/docs/community/how_to_join_community#轻松步入-fury-开源贡献之旅","content":" &quot;good first issue&quot; 是一个在开源社区常见的标签，这个标签的目的是帮助新贡献者找到适合入门的问题。  Fury 的入门问题，你可以通过 issue 列表查看。  如果你当前有时间和意愿参与到社区贡献，可以在 issue 里看一看 good first issue，选择一个感兴趣、适合自己的认领。  ","version":"下一步","tagName":"h2"},{"title":"拥抱 Apache Fury 社区​","type":1,"pageTitle":"如何加入 Fury 社区","url":"/zh-CN/docs/community/how_to_join_community#拥抱-apache-fury-社区","content":" 在你为 Fury 贡献代码之余，我们鼓励你参与其他让社区更加繁荣的事情，比如：  为项目的发展、功能规划 等提建议。创作文章、视频，开办讲座来宣传 Fury。撰写推广计划，同团队一同执行。 ","version":"下一步","tagName":"h2"},{"title":"如何验证 Apache Fury","type":0,"sectionRef":"#","url":"/zh-CN/docs/community/how_to_verify","content":"","keywords":"","version":"下一步"},{"title":"下载 Apache Fury​","type":1,"pageTitle":"如何验证 Apache Fury","url":"/zh-CN/docs/community/how_to_verify#下载-apache-fury","content":" # If there is svn locally, you can clone to the local svn co https://dist.apache.org/repos/dist/dev/incubator/fury/${release_version}-${rc_version}/ # You can download the material file directly wget https://dist.apache.org/repos/dist/dev/incubator/fury/${release_version}-${rc_version}/xxx.xxx   ","version":"下一步","tagName":"h2"},{"title":"验证 checksums 和 signatures​","type":1,"pageTitle":"如何验证 Apache Fury","url":"/zh-CN/docs/community/how_to_verify#验证-checksums-和-signatures","content":" 首先，您需要安装 gpg：  apt-get install gnupg # or yum install gnupg # or brew install gnupg   之后，导入 Apache Fury release manager 的公钥：  curl https://downloads.apache.org/incubator/fury/KEYS &gt; KEYS # Download KEYS gpg --import KEYS # Import KEYS to local # Then, trust the public key: gpg --edit-key &lt;KEY-used-in-this-version&gt; # Edit the key(mentioned in vote email) # It will enter the interactive mode, use the following command to trust the key: gpg (GnuPG) 2.0.22; Copyright (C) 2013 Free Software Foundation, Inc. This is free software: you are free to change and redistribute it. There is NO WARRANTY, to the extent permitted by law. pub 4096R/5E580BA4 created: 2024-03-27 expires: never usage: SC trust: unknown validity: unknown sub 4096R/A31EF728 created: 2024-03-27 expires: never usage: E [ unknown] (1). chaokunyang (CODE SIGNING KEY) &lt;chaokunyang@apache.org&gt; gpg&gt; trust pub 4096R/5E580BA4 created: 2024-03-27 expires: never usage: SC trust: unknown validity: unknown sub 4096R/A31EF728 created: 2024-03-27 expires: never usage: E [ unknown] (1). chaokunyang (CODE SIGNING KEY) &lt;chaokunyang@apache.org&gt; Please decide how far you trust this user to correctly verify other users' keys (by looking at passports, checking fingerprints from different sources, etc.) 1 = I don't know or won't say 2 = I do NOT trust 3 = I trust marginally 4 = I trust fully 5 = I trust ultimately m = back to the main menu Your decision? 5 Do you really want to set this key to ultimate trust? (y/N) y pub 4096R/5E580BA4 created: 2024-03-27 expires: never usage: SC trust: ultimate validity: unknown sub 4096R/A31EF728 created: 2024-03-27 expires: never usage: E [ unknown] (1). chaokunyang (CODE SIGNING KEY) &lt;chaokunyang@apache.org&gt; Please note that the shown key validity is not necessarily correct unless you restart the program.   接下来验证签名：  for i in *.tar.gz; do echo $i; gpg --verify $i.asc $i; done   如果出现如下内容，则表示签名正确：  apache-fury-incubating-0.5.0-src.tar.gz gpg: Signature made Wed 17 Apr 2024 11:49:45 PM CST using RSA key ID 5E580BA4 gpg: checking the trustdb gpg: 3 marginal(s) needed, 1 complete(s) needed, PGP trust model gpg: depth: 0 valid: 1 signed: 0 trust: 0-, 0q, 0n, 0m, 0f, 1u gpg: Good signature from &quot;chaokunyang (CODE SIGNING KEY) &lt;chaokunyang@apache.org&gt;&quot;   然后验证 checksum：  for i in *.tar.gz; do echo $i; sha512sum --check $i.sha512; done   它应该输出如下内容：  apache-fury-incubating-0.5.0-src.tar.gz apache-fury-incubating-0.5.0-src.tar.gz: OK   ","version":"下一步","tagName":"h2"},{"title":"检查源码包中的文件​","type":1,"pageTitle":"如何验证 Apache Fury","url":"/zh-CN/docs/community/how_to_verify#检查源码包中的文件","content":" 解压缩 apache-fury-${release_version}-${rc_version}-src.tar.gz 并检查以下内容：  此存储库 LICENSE 和 NOTICE 文件是正确的；如有必要，所有文件都有 ASF 许可证标头；项目构建通过。  ","version":"下一步","tagName":"h2"},{"title":"检查 fury-java 的 Maven artifacts​","type":1,"pageTitle":"如何验证 Apache Fury","url":"/zh-CN/docs/community/how_to_verify#检查-fury-java-的-maven-artifacts","content":" 下载 Apache Fury：https://repository.apache.org/content/repositories/orgapachefury-${maven_artifact_number}/.  您可以检查以下内容：  JAR 的 Checksum 与项目绑定的 checksum 文件一致。JAR 的 signature 与项目绑定的 signature 文件一致。JAR 在本地是可重复的。这意味着您可以在计算机上构建 JAR，并验证 checksum 和与项目绑定的相同。 ","version":"下一步","tagName":"h2"},{"title":"开发指南","type":0,"sectionRef":"#","url":"/zh-CN/docs/guide/development","content":"","keywords":"","version":"下一步"},{"title":"本地构建 Apache Fury​","type":1,"pageTitle":"开发指南","url":"/zh-CN/docs/guide/development#本地构建-apache-fury","content":" 从 Github 代码库 拉取最新代码。  ","version":"下一步","tagName":"h2"},{"title":"构建 Apache Fury Java​","type":1,"pageTitle":"开发指南","url":"/zh-CN/docs/guide/development#构建-apache-fury-java","content":" cd java mvn clean compile -DskipTests   本地环境要求​  java 1.8+maven 3.6.3+  ","version":"下一步","tagName":"h3"},{"title":"构建 Apache Fury Python​","type":1,"pageTitle":"开发指南","url":"/zh-CN/docs/guide/development#构建-apache-fury-python","content":" cd python pip install pyarrow==14.0.0 Cython wheel numpy pytest pip install -v -e .   本地环境要求​  python 3.6+  ","version":"下一步","tagName":"h3"},{"title":"构建 Apache Fury C++​","type":1,"pageTitle":"开发指南","url":"/zh-CN/docs/guide/development#构建-apache-fury-c","content":" Build fury row format：  pip install pyarrow==14.0.0 bazel build //cpp/fury/row:fury_row_format   Build fury row format encoder:  pip install pyarrow==14.0.0 bazel build //cpp/fury/encoder:fury_encoder   本地环境要求​  compilers with C++17 supportbazel 6.3.2  ","version":"下一步","tagName":"h3"},{"title":"构建 Apache Fury GoLang​","type":1,"pageTitle":"开发指南","url":"/zh-CN/docs/guide/development#构建-apache-fury-golang","content":" cd go/fury # run test go test -v # run xlang test go test -v fury_xlang_test.go   本地环境要求​  go 1.13+  ","version":"下一步","tagName":"h3"},{"title":"构建 Apache Fury Rust​","type":1,"pageTitle":"开发指南","url":"/zh-CN/docs/guide/development#构建-apache-fury-rust","content":" cd rust # build cargo build # run test cargo test   本地环境要求​  curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh   ","version":"下一步","tagName":"h3"},{"title":"构建 Apache Fury JavaScript​","type":1,"pageTitle":"开发指南","url":"/zh-CN/docs/guide/development#构建-apache-fury-javascript","content":" cd javascript npm install # run build npm run build # run test npm run test   本地环境要求​  node 14+npm 8+ ","version":"下一步","tagName":"h3"},{"title":"如何发布","type":0,"sectionRef":"#","url":"/zh-CN/docs/community/how_to_release","content":"","keywords":"","version":"下一步"},{"title":"介绍​","type":1,"pageTitle":"如何发布","url":"/zh-CN/docs/community/how_to_release#介绍","content":" 源代码发布是 Apache 最重视以及最重要的部分。  请注意许可证和发布的软件签名问题。发布软件是一件严肃的事情，并会产生相应的法律后果。  ","version":"下一步","tagName":"h2"},{"title":"release manager 第一次发布​","type":1,"pageTitle":"如何发布","url":"/zh-CN/docs/community/how_to_release#release-manager-第一次发布","content":" ","version":"下一步","tagName":"h2"},{"title":"环境要求​","type":1,"pageTitle":"如何发布","url":"/zh-CN/docs/community/how_to_release#环境要求","content":" 此发布过程在 Ubuntu 系统中运行，需要以下几个环境依赖：  JDK 1.8+Apache Maven 3.x+Python 3.8GnuPG 2.xGitSVN（Apache 基金会使用 svn 来托管项目发布）设置环境变量：如果您在不同的目录下配置了 gpg 密钥，请执行 export GNUPGHOME=$(xxx) 导出环境变量。  ","version":"下一步","tagName":"h3"},{"title":"准备 GPG 密钥​","type":1,"pageTitle":"如何发布","url":"/zh-CN/docs/community/how_to_release#准备-gpg-密钥","content":" 如果您是第一次作为软件发布者，您需要准备一个 GPG 密钥。  您可以参考这里的快速开始获取一个 GPG 密钥或者获取更多相关信息。  安装 GPG​  sudo apt install gnupg2   生成 GPG 密钥​  请使用您的 Apache 名字和电子邮件地址生成 GPG 密钥：  $ gpg --full-gen-key gpg (GnuPG) 2.2.20; Copyright (C) 2020 Free Software Foundation, Inc. This is free software: you are free to change and redistribute it. There is NO WARRANTY, to the extent permitted by law. Please select what kind of key you want: (1) RSA and RSA (default) (2) DSA and Elgamal (3) DSA (sign only) (4) RSA (sign only) (14) Existing key from card Your selection? 1 # input 1 RSA keys may be between 1024 and 4096 bits long. What keysize do you want? (2048) 4096 # input 4096 Requested keysize is 4096 bits Please specify how long the key should be valid. 0 = key does not expire &lt;n&gt; = key expires in n days &lt;n&gt;w = key expires in n weeks &lt;n&gt;m = key expires in n months &lt;n&gt;y = key expires in n years Key is valid for? (0) 0 # input 0 Key does not expire at all Is this correct? (y/N) y # input y GnuPG needs to construct a user ID to identify your key. Real name: Chaokun Yang # input your name Email address: chaokunyang@apache.org # input your email Comment: CODE SIGNING KEY # input some annotations, optional You selected this USER-ID: &quot;Chaokun &lt;chaokunyang@apache.org&gt;&quot; Change (N)ame, (C)omment, (E)mail or (O)kay/(Q)uit? O # input O We need to generate a lot of random bytes. It is a good idea to perform some other action (type on the keyboard, move the mouse, utilize the disks) during the prime generation; this gives the random number generator a better chance to gain enough entropy. We need to generate a lot of random bytes. It is a good idea to perform some other action (type on the keyboard, move the mouse, utilize the disks) during the prime generation; this gives the random number generator a better chance to gain enough entropy. # Input the security key ┌──────────────────────────────────────────────────────┐ │ Please enter this passphrase │ │ │ │ Passphrase: _______________________________ │ │ │ │ &lt;OK&gt; &lt;Cancel&gt; │ └──────────────────────────────────────────────────────┘ # key generation will be done after your inputting the key with the following output gpg: key E49B00F626B marked as ultimately trusted gpg: revocation certificate stored as '/Users/chaokunyang/.gnupg/openpgp-revocs.d/1E2CDAE4C08AD7D694D1CB139D7BE8E45E580BA4.rev' public and secret key created and signed. pub rsa4096 2022-07-12 [SC] 1E2CDAE4C08AD7D694D1CB139D7BE8E45E580BA4 uid [ultimate] Chaokun &lt;chaokunyang@apache.org&gt; sub rsa4096 2022-07-12 [E]   上传公钥至 GPG 密钥服务器​  首先，列出您所创建的 GPG 密钥：  gpg --list-keys   执行相关命令之后，您将看到如下输出：  -------------------------------------------------- pub rsa4096 2024-03-27 [SC] 1E2CDAE4C08AD7D694D1CB139D7BE8E45E580BA4 uid [ultimate] chaokunyang (CODE SIGNING KEY) &lt;chaokunyang@apache.org&gt; sub rsa4096 2024-03-27 [E]   然后，将您的密钥 ID 发送到密钥服务器：  gpg --keyserver keys.openpgp.org --send-key &lt;key-id&gt; # e.g., 1E2CDAE4C08AD7D694D1CB139D7BE8E45E580BA4   其中，keys.openpgp.org 是一个随机选择的密钥服务器，可以使用 keyserver.ubuntu.com 或任何其他功能完备的密钥服务器。  检查密钥是否创建成功​  上传大约需要一分钟；之后，您可以通过电子邮件在相应的密钥服务器上检查。  将密钥上传到密钥服务器的主要目的是为了加入一个可信的信任网络。  将 GPG 公钥添加到项目 KEYS 文件中​  发布分支的 svn 仓库是：https://dist.apache.org/repos/dist/release/incubator/fury  请在发布分支的 KEYS 中添加公钥：  svn co https://dist.apache.org/repos/dist/release/incubator/fury fury-dist # As this step will copy all the versions, it will take some time. If the network is broken, please use svn cleanup to delete the lock before re-execute it. cd fury-dist (gpg --list-sigs YOUR_NAME@apache.org &amp;&amp; gpg --export --armor YOUR_NAME@apache.org) &gt;&gt; KEYS # Append your key to the KEYS file svn add . # It is not needed if the KEYS document exists before. svn ci -m &quot;add gpg key for YOUR_NAME&quot; # Later on, if you are asked to enter a username and password, just use your apache username and password.   将 GPG 公钥上传到您的 GitHub 帐户​  输入 https://github.com/settings/keys 以添加您的 GPG 密钥。如果添加后发现“未验证”字样，请将 GPG 密钥中使用的电子邮件地址绑定到您的 GitHub 帐户（https://github.com/settings/emails）。  ","version":"下一步","tagName":"h3"},{"title":"延伸阅读​","type":1,"pageTitle":"如何发布","url":"/zh-CN/docs/community/how_to_release#延伸阅读","content":" 建议您在发布之前阅读以下文档，了解有关 Apache 基金会发布软件的更多详细信息，但这不是必须的：  发布政策：https://www.apache.org/legal/release-policy.html孵化器发布：http://incubator.apache.org/guides/releasemanagement.htmlTLP 版本：https://infra.apache.org/release-distribution发布标志：https://infra.apache.org/release-signing.html发布发布：https://infra.apache.org/release-publishing.html发布下载页面：https://infra.apache.org/release-download-pages.html发布 maven artifacts：https://infra.apache.org/publishing-maven-artifacts.html  ","version":"下一步","tagName":"h3"},{"title":"开始有关发布的讨论​","type":1,"pageTitle":"如何发布","url":"/zh-CN/docs/community/how_to_release#开始有关发布的讨论","content":" 通过发送电子邮件至以下地址发起有关下一个版本的讨论：dev@fury.apache.org：  标题：  [DISCUSS] Release Apache Fury(incubating) ${release_version}   内容：  Hello, Apache Fury(incubating) Community, This is a call for a discussion to release Apache Fury(incubating) version ${release_version}. The change lists about this release: https://github.com/apache/fury/compare/v0.4.1...v0.5.0 Please leave your comments here about this release plan. We will bump the version in repo and start the release process after the discussion. Thanks, ${name}   ","version":"下一步","tagName":"h2"},{"title":"准备发布​","type":1,"pageTitle":"如何发布","url":"/zh-CN/docs/community/how_to_release#准备发布","content":" 如果讨论结果中没有出现反对声音，您需要做一些发布版本的准备工作。  ","version":"下一步","tagName":"h2"},{"title":"Github 分支和标签​","type":1,"pageTitle":"如何发布","url":"/zh-CN/docs/community/how_to_release#github-分支和标签","content":" 创建一个名为 releases-0.5.0通过执行命令将版本 $version 升级到 python ci/release.py bump_version -l all -version $version执行 git commit 并将分支推送到 git@github.com:apache/fury.git通过 git tag v0.5.0-rc1 创建一个新标签，然后将其推送到 git@github.com:apache/fury.git  ","version":"下一步","tagName":"h3"},{"title":"构建 artifacts 并上传到 SVN dist/dev 仓库​","type":1,"pageTitle":"如何发布","url":"/zh-CN/docs/community/how_to_release#构建-artifacts-并上传到-svn-distdev-仓库","content":" 首先，您需要通过 python ci/release.py build -v $version 构建预发布 artifacts。  然后您需要把它上传到 svn dist repo。dev 分支的 dist 仓库地址是：https://dist.apache.org/repos/dist/dev/incubator/fury  # As this step will copy all the versions, it will take some time. If the network is broken, please use svn cleanup to delete the lock before re-execute it. svn co https://dist.apache.org/repos/dist/dev/incubator/fury fury-dist-dev   然后，上传项目：  cd fury-dist-dev # create a directory named by version mkdir ${release_version}-${rc_version} # copy source code and signature package to the versioned directory cp ${repo_dir}/dist/* ${release_version}-${rc_version} # check svn status svn status # add to svn svn add ${release_version}-${rc_version} # check svn status svn status # commit to SVN remote server svn commit -m &quot;Prepare for fury ${release_version}-${rc_version}&quot;   访问 https://dist.apache.org/repos/dist/dev/incubator/fury/ 以检查 artifacts 是否正确上传。  ","version":"下一步","tagName":"h3"},{"title":"如果出现问题该怎么办​","type":1,"pageTitle":"如何发布","url":"/zh-CN/docs/community/how_to_release#如果出现问题该怎么办","content":" 如果某些文件是意外出现或者发生某些错误，则需要删除相关内容并执行 svn delete，然后重复上述上传过程。  ","version":"下一步","tagName":"h3"},{"title":"投票​","type":1,"pageTitle":"如何发布","url":"/zh-CN/docs/community/how_to_release#投票","content":" 作为一个孵化项目，新版本发布需要 Apache Fury 社区和孵化器社区的投票。  release_version：Fury 的版本，如 0.5.0。release_candidate_version：投票的版本，如 0.5.0-rc1。maven_artifact_number：Maven 暂存 artifacts 的数量。如 1001. 具体来说，可以通过搜索 “fury” 来找到 maven_artifact_number https://repository.apache.org/#stagingRepositories.  ","version":"下一步","tagName":"h2"},{"title":"Fury 社区投票​","type":1,"pageTitle":"如何发布","url":"/zh-CN/docs/community/how_to_release#fury-社区投票","content":" 发送电子邮件至 Fury Community：dev@fury.apache.org：  标题：  [VOTE] Release Apache Fury(incubating) v${release_version}-${rc_version}   内容：  Hello, Apache Fury(incubating) Community: This is a call for vote to release Apache Fury(Incubating) version release-0.5.0-rc3. Apache Fury(incubating) - A blazingly fast multi-language serialization framework powered by JIT and zero-copy. The change lists about this release: https://github.com/apache/fury/compare/v0.4.1...v0.5.0-rc3 The release candidates: https://dist.apache.org/repos/dist/dev/incubator/fury/0.5.0-rc3/ The maven staging for this release: https://repository.apache.org/content/repositories/orgapachefury-1003 Git tag for the release: https://github.com/apache/fury/releases/tag/v0.5.0-rc3 Git commit for the release: https://github.com/apache/fury/commit/fae06330edd049bb960536e978a45b97bca66faf The artifacts signed with PGP key [5E580BA4], corresponding to [chaokunyang@apache.org], that can be found in keys file: https://downloads.apache.org/incubator/fury/KEYS The vote will be open for at least 72 hours until the necessary number of votes are reached. Please vote accordingly: [ ] +1 approve [ ] +0 no opinion [ ] -1 disapprove with the reason To learn more about Fury, please see https://fury.apache.org/ *Valid check is a requirement for a vote. *Checklist for reference: [ ] Download Fury is valid. [ ] Checksums and PGP signatures are valid. [ ] Source code distributions have correct names matching the current release. [ ] LICENSE and NOTICE files are correct. [ ] All files have license headers if necessary. [ ] No compiled archives bundled in source archive. [ ] Can compile from source. More detail checklist please refer: https://cwiki.apache.org/confluence/display/INCUBATOR/Incubator+Release+Checklist How to Build and Test, please refer to: https://github.com/apache/fury/blob/main/docs/guide/DEVELOPMENT.md Thanks, Chaokun Yang   在至少获得 3 + 1 且具有约束力的投票（来自 Fury Podling PMC 成员和提交者）并没有收到否决票之后，发布投票结果：  标题：  [RESULT][VOTE] Release Apache Fury(incubating) v${release_version}-${rc_version}   内容：  Hello, Apache Fury(incubating) Community, The vote to release Apache Fury(Incubating) v${release_version}-${rc_version} has passed. The vote PASSED with 3 binding +1 and 0 -1 vote: Binding votes: - xxx - yyy - zzz Vote thread: ${vote_thread_url} Thanks, ${name}   ","version":"下一步","tagName":"h3"},{"title":"孵化器社区投票​","type":1,"pageTitle":"如何发布","url":"/zh-CN/docs/community/how_to_release#孵化器社区投票","content":" 发送电子邮件至：general@incubator.apache.org：  标题：  [VOTE] Release Apache Fury(incubating) v${release_version}-${rc_version}   内容：  Hello everyone, This is a call for the vote to release Apache Fury(Incubating) v${release_version}-${rc_version}. The Apache Fury community has voted and approved the release of Apache Fury(incubating) v${release_version}-${rc_version}. We now kindly request the IPMC members review and vote for this release. Apache Fury(incubating) - A blazingly fast multi-language serialization framework powered by JIT and zero-copy. Fury community vote thread: ${community_vote_thread_url} Vote result thread: ${community_vote_result_thread_url} The release candidate: https://dist.apache.org/repos/dist/dev/incubator/fury/${release_version}-${rc_version}/ This release has been signed with a PGP available here: https://downloads.apache.org/incubator/fury/KEYS Git tag for the release: https://github.com/apache/fury/releases/tag/v${release_version}-${rc_version}/ Git commit for the release: https://github.com/apache/fury/commit/$xxx Maven staging repo: https://repository.apache.org/content/repositories/orgapachefury-${maven_artifact_number}/ How to Build and Test, please refer to: https://github.com/apache/fury/blob/main/docs/guide/DEVELOPMENT.md Please download, verify, and test. The VOTE will pass after 3 binding approve. [ ] +1 approve [ ] +0 no opinion [ ] -1 disapprove with the reason To learn more about apache fury, please see https://fury.apache.org/ Checklist for reference: [ ] Download links are valid. [ ] Checksums and signatures. [ ] LICENSE/NOTICE files exist [ ] No unexpected binary files [ ] All source files have ASF headers [ ] Can compile from source Thanks, ${name}   至少 72 小时后，至少有 3 + 1 具有约束力的投票（来自孵化器 PMC 成员）且没有否决票，发布投票结果：  标题：  [RESULT][VOTE] Release Apache Fury(incubating) v${release_version}-${rc_version}   内容：  Hi Incubator PMC, The vote to release Apache Fury(incubating) v${release_version}-${rc_version} has passed with 4 +1 binding and 3 +1 non-binding votes, no +0 or -1 votes. Binding votes： - xxx - yyy - zzz Non-Binding votes: - aaa Vote thread: ${incubator_vote_thread_url} Thanks for reviewing and voting for our release candidate. We will proceed with publishing the approved artifacts and sending out the announcement soon.   ","version":"下一步","tagName":"h3"},{"title":"如果投票失败怎么办​","type":1,"pageTitle":"如何发布","url":"/zh-CN/docs/community/how_to_release#如果投票失败怎么办","content":" 如果投票失败，请单击“删除”以删除暂存的 Maven artifacts。  解决提出的问题，然后再次提出 rc_version 的新投票。  ","version":"下一步","tagName":"h3"},{"title":"官方发布​","type":1,"pageTitle":"如何发布","url":"/zh-CN/docs/community/how_to_release#官方发布","content":" ","version":"下一步","tagName":"h2"},{"title":"将 artifacts 发布到 SVN 发布目录​","type":1,"pageTitle":"如何发布","url":"/zh-CN/docs/community/how_to_release#将-artifacts-发布到-svn-发布目录","content":" release_version：Fury 的发布版本，如 0.5.0release_candidate_version：投票版本，如 0.5.0-rc1  svn mv https://dist.apache.org/repos/dist/dev/incubator/fury/${release_version}-${rc_version} https://dist.apache.org/repos/dist/release/incubator/fury/${release_version} -m &quot;Release fury ${release_version}&quot;   ","version":"下一步","tagName":"h3"},{"title":"更改 Fury 网站下载链接​","type":1,"pageTitle":"如何发布","url":"/zh-CN/docs/community/how_to_release#更改-fury-网站下载链接","content":" 提交 PR 到 https://github.com/apache/fury-site 仓库更新 Fury 版本，下载页面  ","version":"下一步","tagName":"h3"},{"title":"发布 Maven artifacts​","type":1,"pageTitle":"如何发布","url":"/zh-CN/docs/community/how_to_release#发布-maven-artifacts","content":" maven_artifact_number：Maven 暂存 artifacts 的数量。如 1001。打开https://repository.apache.org/#stagingRepositories.找到 artifacts orgapachefury-${maven_artifact_number}，点击“发布”。  ","version":"下一步","tagName":"h3"},{"title":"发送公告​","type":1,"pageTitle":"如何发布","url":"/zh-CN/docs/community/how_to_release#发送公告","content":" 将发布公告发送给 dev@fury.apache.org 并且抄送给 announce@apache.org。  标题：  [ANNOUNCE] Release Apache Fury(incubating) ${release_version}   内容：  Hi all, The Apache Fury(incubating) community is pleased to announce that Apache Fury(incubating) {release_version} has been released! Apache Fury(incubating) - A blazingly fast multi-language serialization framework powered by JIT and zero-copy. The release notes are available here: https://github.com/apache/fury/releases/tag/v${release_version} For the complete list of changes: https://github.com/apache/fury/compare/v0.5.0...v${release_version} Apache Fury website: https://fury.apache.org/ Download Links: https://fury.apache.org/download Fury Resources: - Fury github repo: https://github.com/apache/fury - Issue: https://github.com/apache/fury/issues - Mailing list: dev@fury.apache.org We are looking to grow our community and welcome new contributors. If you are interested in contributing to Fury, please contact us on the mailing list or on GitHub. We will be happy to help you get started. ------------------ Best Regards, ${your_name}   至此，整个发布流程结束。 ","version":"下一步","tagName":"h3"},{"title":"Row format 指南","type":0,"sectionRef":"#","url":"/zh-CN/docs/guide/row_format_guide","content":"","keywords":"","version":"下一步"},{"title":"Row format protocol​","type":1,"pageTitle":"Row format 指南","url":"/zh-CN/docs/guide/row_format_guide#row-format-protocol","content":" ","version":"下一步","tagName":"h2"},{"title":"Java​","type":1,"pageTitle":"Row format 指南","url":"/zh-CN/docs/guide/row_format_guide#java","content":" public class Bar { String f1; List&lt;Long&gt; f2; } public class Foo { int f1; List&lt;Integer&gt; f2; Map&lt;String, Integer&gt; f3; List&lt;Bar&gt; f4; } RowEncoder&lt;Foo&gt; encoder = Encoders.bean(Foo.class); Foo foo = new Foo(); foo.f1 = 10; foo.f2 = IntStream.range(0, 1000000).boxed().collect(Collectors.toList()); foo.f3 = IntStream.range(0, 1000000).boxed().collect(Collectors.toMap(i -&gt; &quot;k&quot;+i, i-&gt;i)); List&lt;Bar&gt; bars = new ArrayList&lt;&gt;(1000000); for (int i = 0; i &lt; 1000000; i++) { Bar bar = new Bar(); bar.f1 = &quot;s&quot;+i; bar.f2 = LongStream.range(0, 10).boxed().collect(Collectors.toList()); bars.add(bar); } foo.f4 = bars; // Can be zero-copy read by python BinaryRow binaryRow = encoder.toRow(foo); // can be data from python Foo newFoo = encoder.fromRow(binaryRow); // zero-copy read List&lt;Integer&gt; f2 BinaryArray binaryArray2 = binaryRow.getArray(1); // zero-copy read List&lt;Bar&gt; f4 BinaryArray binaryArray4 = binaryRow.getArray(3); // zero-copy read 11th element of `readList&lt;Bar&gt; f4` BinaryRow barStruct = binaryArray4.getStruct(10); // zero-copy read 6th of f2 of 11th element of `readList&lt;Bar&gt; f4` barStruct.getArray(1).getInt64(5); RowEncoder&lt;Bar&gt; barEncoder = Encoders.bean(Bar.class); // deserialize part of data. Bar newBar = barEncoder.fromRow(barStruct); Bar newBar2 = barEncoder.fromRow(binaryArray4.getStruct(20));   ","version":"下一步","tagName":"h3"},{"title":"Python​","type":1,"pageTitle":"Row format 指南","url":"/zh-CN/docs/guide/row_format_guide#python","content":" @dataclass class Bar: f1: str f2: List[pa.int64] @dataclass class Foo: f1: pa.int32 f2: List[pa.int32] f3: Dict[str, pa.int32] f4: List[Bar] encoder = pyfury.encoder(Foo) foo = Foo(f1=10, f2=list(range(1000_000)), f3={f&quot;k{i}&quot;: i for i in range(1000_000)}, f4=[Bar(f1=f&quot;s{i}&quot;, f2=list(range(10))) for i in range(1000_000)]) binary: bytes = encoder.to_row(foo).to_bytes() print(f&quot;start: {datetime.datetime.now()}&quot;) foo_row = pyfury.RowData(encoder.schema, binary) print(foo_row.f2[100000], foo_row.f4[100000].f1, foo_row.f4[200000].f2[5]) print(f&quot;end: {datetime.datetime.now()}&quot;) binary = pickle.dumps(foo) print(f&quot;pickle start: {datetime.datetime.now()}&quot;) new_foo = pickle.loads(binary) print(new_foo.f2[100000], new_foo.f4[100000].f1, new_foo.f4[200000].f2[5]) print(f&quot;pickle end: {datetime.datetime.now()}&quot;)   ","version":"下一步","tagName":"h3"},{"title":"Apache Arrow 支持​","type":1,"pageTitle":"Row format 指南","url":"/zh-CN/docs/guide/row_format_guide#apache-arrow-支持","content":" Apache Fury Format 还支持从 Arrow Table/RecordBatch 自动转换。  Java：  Schema schema = TypeInference.inferSchema(BeanA.class); ArrowWriter arrowWriter = ArrowUtils.createArrowWriter(schema); Encoder&lt;BeanA&gt; encoder = Encoders.rowEncoder(BeanA.class); for (int i = 0; i &lt; 10; i++) { BeanA beanA = BeanA.createBeanA(2); arrowWriter.write(encoder.toRow(beanA)); } return arrowWriter.finishAsRecordBatch();   Python：  import pyfury encoder = pyfury.encoder(Foo) encoder.to_arrow_record_batch([foo] * 10000) encoder.to_arrow_table([foo] * 10000)   C++:  std::shared_ptr&lt;ArrowWriter&gt; arrow_writer; EXPECT_TRUE( ArrowWriter::Make(schema, ::arrow::default_memory_pool(), &amp;arrow_writer) .ok()); for (auto &amp;row : rows) { EXPECT_TRUE(arrow_writer-&gt;Write(row).ok()); } std::shared_ptr&lt;::arrow::RecordBatch&gt; record_batch; EXPECT_TRUE(arrow_writer-&gt;Finish(&amp;record_batch).ok()); EXPECT_TRUE(record_batch-&gt;Validate().ok()); EXPECT_EQ(record_batch-&gt;num_columns(), schema-&gt;num_fields()); EXPECT_EQ(record_batch-&gt;num_rows(), row_nums);   Schema schema = TypeInference.inferSchema(BeanA.class); ArrowWriter arrowWriter = ArrowUtils.createArrowWriter(schema); Encoder&lt;BeanA&gt; encoder = Encoders.rowEncoder(BeanA.class); for (int i = 0; i &lt; 10; i++) { BeanA beanA = BeanA.createBeanA(2); arrowWriter.write(encoder.toRow(beanA)); } return arrowWriter.finishAsRecordBatch();  ","version":"下一步","tagName":"h3"},{"title":"GraalVM 指南","type":0,"sectionRef":"#","url":"/zh-CN/docs/guide/graalvm_guide","content":"","keywords":"","version":"下一步"},{"title":"GraalVM Native Image 介绍​","type":1,"pageTitle":"GraalVM 指南","url":"/zh-CN/docs/guide/graalvm_guide#graalvm-native-image-介绍","content":" GraalVM Native Image 能够将 Java 应用代码编译成为原生的本地应用程序代码，以构建更快、更小、更精简的应用程序。 其不能使用 JIT 编译器将字节码编译为机器码，并且在没有配置相关反射文件的前提下不支持反射，在很多情况下使用较为复杂。  Apache Fury 对 GraalVM Native Image 支持非常完善。Apache Fury 在 Graalvm 构建时能够为 Fury JIT framework 和 MethodHandle/LambdaMetafactory 生成所有的序列化代码。然后在运行时使用这些生成的代码进行序列化，无需任何额外成本，性能非常出色。  为了在 Graalvm Native Images 上使用 Fury，您必须将 Apache Fury 创建为静态的类字段，并且在 enclosing class 初始化时间期间完成所有的类注册。 然后在resources/META-INF/native-image/$xxx/ 目录下添加 native-image.properties 配置文件。指导 GraalVM 在构建 Native Images 时初始化配置的类。  例如，这里我们在配置文件中加入 org.apache.fury.graalvm.Example 类：  Args = --initialize-at-build-time=org.apache.fury.graalvm.Example   使用 Apache Fury 的另一个好处是，您不必配置反射 JSON和序列化 JSON，这非常乏味、繁琐且不方便。使用 Apache Fury 时，您只需为要序列化的每个类型调用 org.apache.fury.Fury.register(Class&lt;?&gt;, boolean) 即可。  请注意，由于 GraalVM Native Image 在镜像运行时不支持 JIT，因此 Apache Fury 的 asyncCompilationEnabled 选项将在使用 GraalVM Native Image 构建应用时自动禁用。  ","version":"下一步","tagName":"h2"},{"title":"线程不安全​","type":1,"pageTitle":"GraalVM 指南","url":"/zh-CN/docs/guide/graalvm_guide#线程不安全","content":" Example：  import org.apache.fury.Fury; import org.apache.fury.util.Preconditions; import java.util.List; import java.util.Map; public class Example { public record Record ( int f1, String f2, List&lt;String&gt; f3, Map&lt;String, Long&gt; f4) { } static Fury fury; static { fury = Fury.builder().build(); // register and generate serializer code. fury.register(Record.class, true); } public static void main(String[] args) { Record record = new Record(10, &quot;abc&quot;, List.of(&quot;str1&quot;, &quot;str2&quot;), Map.of(&quot;k1&quot;, 10L, &quot;k2&quot;, 20L)); System.out.println(record); byte[] bytes = fury.serialize(record); Object o = fury.deserialize(bytes); System.out.println(o); Preconditions.checkArgument(record.equals(o)); } }   之后在 native-image.properties 中加入 org.apache.fury.graalvm.Example 配置：  Args = --initialize-at-build-time=org.apache.fury.graalvm.Example   ","version":"下一步","tagName":"h2"},{"title":"线程安全​","type":1,"pageTitle":"GraalVM 指南","url":"/zh-CN/docs/guide/graalvm_guide#线程安全","content":" import org.apache.fury.Fury; import org.apache.fury.ThreadLocalFury; import org.apache.fury.ThreadSafeFury; import org.apache.fury.util.Preconditions; import java.util.List; import java.util.Map; public class ThreadSafeExample { public record Foo ( int f1, String f2, List&lt;String&gt; f3, Map&lt;String, Long&gt; f4) { } static ThreadSafeFury fury; static { fury = new ThreadLocalFury(classLoader -&gt; { Fury f = Fury.builder().build(); // register and generate serializer code. f.register(Foo.class, true); return f; }); } public static void main(String[] args) { System.out.println(fury.deserialize(fury.serialize(&quot;abc&quot;))); System.out.println(fury.deserialize(fury.serialize(List.of(1,2,3)))); System.out.println(fury.deserialize(fury.serialize(Map.of(&quot;k1&quot;, 1, &quot;k2&quot;, 2)))); Foo foo = new Foo(10, &quot;abc&quot;, List.of(&quot;str1&quot;, &quot;str2&quot;), Map.of(&quot;k1&quot;, 10L, &quot;k2&quot;, 20L)); System.out.println(foo); byte[] bytes = fury.serialize(foo); Object o = fury.deserialize(bytes); System.out.println(o); } }   之后在 native-image.properties 中加入 org.apache.fury.graalvm.ThreadSafeExample 配置：  Args = --initialize-at-build-time=org.apache.fury.graalvm.ThreadSafeExample   ","version":"下一步","tagName":"h2"},{"title":"框架集成​","type":1,"pageTitle":"GraalVM 指南","url":"/zh-CN/docs/guide/graalvm_guide#框架集成","content":" 对于框架开发人员，如果您想集成 Apache Fury 进行序列化。您可以提供一个配置文件，让用户列出他们想要序列化的所有类，然后您可以加载这些类并调用 org.apache.fury.Fury.register(Class&lt;?&gt;, boolean) 在您的 Fury 集成类中注册这些类，并配置该类在 GraalVM Native Image 构建时进行初始化。  ","version":"下一步","tagName":"h2"},{"title":"基准测试​","type":1,"pageTitle":"GraalVM 指南","url":"/zh-CN/docs/guide/graalvm_guide#基准测试","content":" 在这里，我们给出了 Apache Fury 和 Graalvm 序列化之间的两个类基准测试。  禁用 Apache Fury compression 时：  Struct：Fury 与 46x speed, 43% size JDK 进行比较。Pojo：Fury 与 12x speed, 56% size JDK进行比较。  启用 Apache Fury compression 时：  Struct：Fury 与 24x speed, 31% size JDK进行比较。Pojo：Fury 与 12x speed, 48% size JDK进行比较。  有关基准测试代码，请参阅 Benchmark.java。  ","version":"下一步","tagName":"h2"},{"title":"结构体基准测试​","type":1,"pageTitle":"GraalVM 指南","url":"/zh-CN/docs/guide/graalvm_guide#结构体基准测试","content":" 类字段​  public class Struct implements Serializable { public int f1; public long f2; public float f3; public double f4; public int f5; public long f6; public float f7; public double f8; public int f9; public long f10; public float f11; public double f12; }   基准测试结果​  不开启压缩时测试结果：  Benchmark repeat number: 400000 Object type: class org.apache.fury.graalvm.Struct Compress number: false Fury size: 76.0 JDK size: 178.0 Fury serialization took mills: 49 JDK serialization took mills: 2254 Compare speed: Fury is 45.70x speed of JDK Compare size: Fury is 0.43x size of JDK   开启压缩时测试结果：  Benchmark repeat number: 400000 Object type: class org.apache.fury.graalvm.Struct Compress number: true Fury size: 55.0 JDK size: 178.0 Fury serialization took mills: 130 JDK serialization took mills: 3161 Compare speed: Fury is 24.16x speed of JDK Compare size: Fury is 0.31x size of JDK   ","version":"下一步","tagName":"h3"},{"title":"Pojo 基准测试​","type":1,"pageTitle":"GraalVM 指南","url":"/zh-CN/docs/guide/graalvm_guide#pojo-基准测试","content":" 类字段​  public class Foo implements Serializable { int f1; String f2; List&lt;String&gt; f3; Map&lt;String, Long&gt; f4; }   基准测试结果​  不开启压缩时测试结果：  Benchmark repeat number: 400000 Object type: class org.apache.fury.graalvm.Foo Compress number: false Fury size: 541.0 JDK size: 964.0 Fury serialization took mills: 1663 JDK serialization took mills: 16266 Compare speed: Fury is 12.19x speed of JDK Compare size: Fury is 0.56x size of JDK   开启压缩时测试结果：  Benchmark repeat number: 400000 Object type: class org.apache.fury.graalvm.Foo Compress number: true Fury size: 459.0 JDK size: 964.0 Fury serialization took mills: 1289 JDK serialization took mills: 15069 Compare speed: Fury is 12.11x speed of JDK Compare size: Fury is 0.48x size of JDK  ","version":"下一步","tagName":"h3"},{"title":"Scala 序列化指南","type":0,"sectionRef":"#","url":"/zh-CN/docs/guide/scala_guide","content":"","keywords":"","version":"下一步"},{"title":"安装​","type":1,"pageTitle":"Scala 序列化指南","url":"/zh-CN/docs/guide/scala_guide#安装","content":" libraryDependencies += &quot;org.apache.fury&quot; % &quot;fury-core&quot; % &quot;0.7.1&quot;   ","version":"下一步","tagName":"h2"},{"title":"Fury 对象创建​","type":1,"pageTitle":"Scala 序列化指南","url":"/zh-CN/docs/guide/scala_guide#fury-对象创建","content":" 当使用 Apache Fury 进行 Scala 序列化时，您应该至少使用以下选项创建 Fury 对象：  val fury = Fury.builder() .withScalaOptimizationEnabled(true) .requireClassRegistration(true) .withRefTracking(true) .build()   根据您序列化的对象类型，您可能需要注册一些 Scala 的内部类型：  fury.register(Class.forName(&quot;scala.collection.generic.DefaultSerializationProxy&quot;)) fury.register(Class.forName(&quot;scala.Enumeration.Val&quot;))   如果要避免此类注册，可以通过禁用类 FuryBuilder#requireClassRegistration(false) 来完成。  请注意：此选项可以反序列化未知的对象类型，使用更灵活。但如果类包含任何的恶意代码，会有安全风险。  循环引用在 Scala 中很常见，Reference tracking 应该由 FuryBuilder#withRefTracking(true) 配置选项开启。如果不启用 Reference tracking，则在序列化 Scala Enumeration 时，某些 Scala 版本可能会发生 StackOverflowError 错误。  注意：Fury 实例应该在多个序列化之间共享，创建 Fury 实例开销很大，应该尽量复用。  如果您在多个线程中使用共享的 Fury 实例，您应该使用 ThreadSafeFury 代替 FuryBuilder#buildThreadSafeFury()。  ","version":"下一步","tagName":"h2"},{"title":"序列化 case 对象​","type":1,"pageTitle":"Scala 序列化指南","url":"/zh-CN/docs/guide/scala_guide#序列化-case-对象","content":" case class Person(github: String, age: Int, id: Long) val p = Person(&quot;https://github.com/chaokunyang&quot;, 18, 1) println(fury.deserialize(fury.serialize(p))) println(fury.deserializeJavaObject(fury.serializeJavaObject(p)))   ","version":"下一步","tagName":"h2"},{"title":"序列化 pojo​","type":1,"pageTitle":"Scala 序列化指南","url":"/zh-CN/docs/guide/scala_guide#序列化-pojo","content":" class Foo(f1: Int, f2: String) { override def toString: String = s&quot;Foo($f1, $f2)&quot; } println(fury.deserialize(fury.serialize(Foo(1, &quot;chaokunyang&quot;))))   ","version":"下一步","tagName":"h2"},{"title":"序列化对象单例​","type":1,"pageTitle":"Scala 序列化指南","url":"/zh-CN/docs/guide/scala_guide#序列化对象单例","content":" object singleton { } val o1 = fury.deserialize(fury.serialize(singleton)) val o2 = fury.deserialize(fury.serialize(singleton)) println(o1 == o2)   ","version":"下一步","tagName":"h2"},{"title":"序列化集合​","type":1,"pageTitle":"Scala 序列化指南","url":"/zh-CN/docs/guide/scala_guide#序列化集合","content":" val seq = Seq(1,2) val list = List(&quot;a&quot;, &quot;b&quot;) val map = Map(&quot;a&quot; -&gt; 1, &quot;b&quot; -&gt; 2) println(fury.deserialize(fury.serialize(seq))) println(fury.deserialize(fury.serialize(list))) println(fury.deserialize(fury.serialize(map)))   ","version":"下一步","tagName":"h2"},{"title":"序列化元组​","type":1,"pageTitle":"Scala 序列化指南","url":"/zh-CN/docs/guide/scala_guide#序列化元组","content":" val tuple = Tuple2(100, 10000L) println(fury.deserialize(fury.serialize(tuple))) val tuple = Tuple4(100, 10000L, 10000L, &quot;str&quot;) println(fury.deserialize(fury.serialize(tuple)))   ","version":"下一步","tagName":"h2"},{"title":"序列化枚举​","type":1,"pageTitle":"Scala 序列化指南","url":"/zh-CN/docs/guide/scala_guide#序列化枚举","content":" ","version":"下一步","tagName":"h2"},{"title":"Scala3 枚举​","type":1,"pageTitle":"Scala 序列化指南","url":"/zh-CN/docs/guide/scala_guide#scala3-枚举","content":" enum Color { case Red, Green, Blue } println(fury.deserialize(fury.serialize(Color.Green)))   ","version":"下一步","tagName":"h3"},{"title":"Scala2 枚举​","type":1,"pageTitle":"Scala 序列化指南","url":"/zh-CN/docs/guide/scala_guide#scala2-枚举","content":" object ColorEnum extends Enumeration { type ColorEnum = Value val Red, Green, Blue = Value } println(fury.deserialize(fury.serialize(ColorEnum.Green)))   ","version":"下一步","tagName":"h3"},{"title":"序列化 Option 类型​","type":1,"pageTitle":"Scala 序列化指南","url":"/zh-CN/docs/guide/scala_guide#序列化-option-类型","content":" val opt: Option[Long] = Some(100) println(fury.deserialize(fury.serialize(opt))) val opt1: Option[Long] = None println(fury.deserialize(fury.serialize(opt1)))   ","version":"下一步","tagName":"h2"},{"title":"性能​","type":1,"pageTitle":"Scala 序列化指南","url":"/zh-CN/docs/guide/scala_guide#性能","content":" pojo/bean/case/object Scala 对 Apache Fury JIT 的支持很好，性能与 Apache Fury Java 一样优异。  Scala 集合和泛型不遵循 Java 集合框架，并且未与当前发行版中的 Apache Fury JIT 完全集成。性能不会像 Java 的 Fury collections 序列化那么好。  scala 集合的执行将调用 Java 序列化 API writeObject/readObject/writeReplace/readResolve/readObjectNoData/Externalizable 和 Fury ObjectStream 实现。虽然 org.apache.fury.serializer.ObjectStreamSerializer 比 JDK ObjectOutputStream/ObjectInputStream 快很多，但它仍然不知道如何使用 Scala 集合泛型。  未来我们计划为 Scala 类型提供更多优化，敬请期待，更多信息请参看 #682！  Scala 集合序列化已在 #1073 完成 ，如果您想获得更好的性能，请使用 Apache Fury snapshot 版本。 ","version":"下一步","tagName":"h2"},{"title":"Apache Fury 介绍","type":0,"sectionRef":"#","url":"/zh-CN/docs/introduction/","content":"","keywords":"","version":"下一步"},{"title":"协议​","type":1,"pageTitle":"Apache Fury 介绍","url":"/zh-CN/docs/introduction/#协议","content":" 不同的场景有不同的序列化要求。Apache Fury 为这些需求设计并实现了多个二进制协议：  跨语言对象图协议： 跨语言自动序列化任何对象，无需 IDL 定义、Schema编译和对象协议转换；支持共享引用和循环引用，无重复数据或递归错误；原生支持对象多态。 原生 java/python 对象图协议：基于单一语言的完整类型系统进行高度优化；行格式协议：缓存友好的二进制随机访问格式，支持跳过序列化和部分序列化，并且可以自动转换为列格式。  基于 fury 现有的 buffer、encoding、meta、codegen 和其他功能，可以轻松添加新协议。所有这些协议都共享相同的代码库，并且一个协议的优化可以被另一个协议重用。  ","version":"下一步","tagName":"h2"},{"title":"兼容性​","type":1,"pageTitle":"Apache Fury 介绍","url":"/zh-CN/docs/introduction/#兼容性","content":" ","version":"下一步","tagName":"h2"},{"title":"Schema兼容性​","type":1,"pageTitle":"Apache Fury 介绍","url":"/zh-CN/docs/introduction/#schema兼容性","content":" Apache Fury java 对象图序列化支持类架构向前/向后兼容。序列化 Peer 节点和反序列化 Peer 节点可以独立添加/删除字段。  我们计划在元数据压缩完成后支持跨语言序列化Schema兼容性。  ","version":"下一步","tagName":"h3"},{"title":"二进制兼容性​","type":1,"pageTitle":"Apache Fury 介绍","url":"/zh-CN/docs/introduction/#二进制兼容性","content":" 我们仍在改进我们的协议，目前无法确保 fury 版本之间的二进制兼容性。如果您将来要升级 fury，请 shade fury。  在 fury 1.0 之前将确保二进制兼容性。  ","version":"下一步","tagName":"h3"},{"title":"安全​","type":1,"pageTitle":"Apache Fury 介绍","url":"/zh-CN/docs/introduction/#安全","content":" 静态序列化（如行格式）本质上是安全的。但动态对象图序列化支持反序列化未注册的类型，这可能会带来安全风险。  例如：反序列化可能会调用 init constructor 或 equals/ hashCode 方法，如果方法体中包含恶意代码，系统将处于危险之中。  Apache Fury 提供了一个类注册选项，并默认开启该选项，它只允许反序列化受信任的注册类型或内置类型。不要禁用类注册或类注册检查，除非您可以确保您的环境确实是安全的。如果您禁用了 class 注册选项，你需要自行负责序列化的安全性。  ","version":"下一步","tagName":"h2"},{"title":"路线图​","type":1,"pageTitle":"Apache Fury 介绍","url":"/zh-CN/docs/introduction/#路线图","content":" 元压缩、自动元共享和跨语言兼容性；用于 c++/golang 的 AOT 框架，用于静态生成代码；C++/Rust 对象图序列化支持；Golang/Rust/NodeJS 行存格式支持；ProtoBuffer 兼容性支持；特征和模型序列化协议；不断改进我们的序列化基础设施，以更快支持任何新的协议。  ","version":"下一步","tagName":"h2"},{"title":"如何贡献​","type":1,"pageTitle":"Apache Fury 介绍","url":"/zh-CN/docs/introduction/#如何贡献","content":" 请阅读贡献指南以获取有关如何贡献的说明。 ","version":"下一步","tagName":"h2"},{"title":"多语言序列化的类型映射","type":0,"sectionRef":"#","url":"/zh-CN/docs/guide/xlang_type_mapping","content":"","keywords":"","version":"下一步"},{"title":"Type Mapping​","type":1,"pageTitle":"多语言序列化的类型映射","url":"/zh-CN/docs/guide/xlang_type_mapping#type-mapping","content":" Fury 类型\tFury 类型 ID\tJava\tPython\tJavascript\tC++\tGolang\tRustbool\t1\tbool/Boolean\tbool\tBoolean\tbool\tbool\tbool int8\t2\tbyte/Byte\tint/pyfury.Int8\tType.int8()\tint8_t\tint8\ti8 int16\t3\tshort/Short\tint/pyfury.Int16\tType.int16()\tint16_t\tint16\ti6 int32\t4\tint/Integer\tint/pyfury.Int32\tType.int32()\tint32_t\tint32\ti32 var_int32\t5\tint/Integer\tint/pyfury.VarInt32\tType.varint32()\tfury::varint32_t\tfury.varint32\tfury::varint32 int64\t6\tlong/Long\tint/pyfury.Int64\tType.int64()\tint64_t\tint64\ti64 var_int64\t7\tlong/Long\tint/pyfury.VarInt64\tType.varint64()\tfury::varint64_t\tfury.varint64\tfury::varint64 sli_int64\t8\tlong/Long\tint/pyfury.SliInt64\tType.sliint64()\tfury::sliint64_t\tfury.sliint64\tfury::sliint64 float16\t9\tfloat/Float\tfloat/pyfury.Float16\tType.float16()\tfury::float16_t\tfury.float16\tfury::f16 float32\t10\tfloat/Float\tfloat/pyfury.Float32\tType.float32()\tfloat\tfloat32\tf32 float64\t11\tdouble/Double\tfloat/pyfury.Float64\tType.float64()\tdouble\tfloat64\tf64 string\t12\tString\tstr\tString\tstring\tstring\tString/str enum\t13\tEnum subclasses\tenum subclasses\t/\tenum\t/\tenum list\t14\tList/Collection\tlist/tuple\tarray\tvector\tslice\tVec set\t15\tSet\tset\t/\tset\tfury.Set\tSet map\t16\tMap\tdict\tMap\tunordered_map\tmap\tHashMap duration\t17\tDuration\ttimedelta\tNumber\tduration\tDuration\tDuration timestamp\t18\tInstant\tdatetime\tNumber\tstd::chrono::nanoseconds\tTime\tDateTime decimal\t19\tBigDecimal\tDecimal\tbigint\t/\t/\t/ binary\t20\tbyte[]\tbytes\t/\tuint8_t[n]/vector&lt;T&gt;\t[n]uint8/[]T\tVec&lt;uint8_t&gt; array\t21\tarray\tnp.ndarray\t/\t/\tarray/slice\tVec bool_array\t22\tbool[]\tndarray(np.bool_)\t/\tbool[n]\t[n]bool/[]T\tVec&lt;bool&gt; int8_array\t23\tbyte[]\tndarray(int8)\t/\tint8_t[n]/vector&lt;T&gt;\t[n]int8/[]T\tVec&lt;i18&gt; int16_array\t24\tshort[]\tndarray(int16)\t/\tint16_t[n]/vector&lt;T&gt;\t[n]int16/[]T\tVec&lt;i16&gt; int32_array\t25\tint[]\tndarray(int32)\t/\tint32_t[n]/vector&lt;T&gt;\t[n]int32/[]T\tVec&lt;i32&gt; int64_array\t26\tlong[]\tndarray(int64)\t/\tint64_t[n]/vector&lt;T&gt;\t[n]int64/[]T\tVec&lt;i64&gt; float16_array\t27\tfloat[]\tndarray(float16)\t/\tfury::float16_t[n]/vector&lt;T&gt;\t[n]float16/[]T\tVec&lt;fury::f16&gt; float32_array\t28\tfloat[]\tndarray(float32)\t/\tfloat[n]/vector&lt;T&gt;\t[n]float32/[]T\tVec&lt;f32&gt; float64_array\t29\tdouble[]\tndarray(float64)\t/\tdouble[n]/vector&lt;T&gt;\t[n]float64/[]T\tVec&lt;f64&gt; tensor\t30\t/\t/\t/\t/\t/\t/ sparse tensor\t31\t/\t/\t/\t/\t/\t/ arrow record batch\t32\t/\t/\t/\t/\t/\t/ arrow table\t33\t/\t/\t/\t/\t/\t/  ","version":"下一步","tagName":"h2"},{"title":"类型信息（目前尚未实现）​","type":1,"pageTitle":"多语言序列化的类型映射","url":"/zh-CN/docs/guide/xlang_type_mapping#类型信息目前尚未实现","content":" 由于语言类型系统之间的差异，这些类型无法在语言之间一对一地映射。  如果用户看到一种语言中的一种类型对应 Apache Fury 类型系统中的多种类型。  例如：java 中的 long 类型对应 int64/varint64/sliint64 类型。类型为 int64/varint64/sliint64 这意味着该语言缺少某些类型，用户在使用 Fury 时必须提供额外的类型信息。  ","version":"下一步","tagName":"h3"},{"title":"类型注解​","type":1,"pageTitle":"多语言序列化的类型映射","url":"/zh-CN/docs/guide/xlang_type_mapping#类型注解","content":" 如果类型是另一个类的字段，用户可以为类型的字段或整个类型提供 meta hints。 这些信息也可以用其他语言提供：  java：使用注解；cpp：使用宏和模板；golang：使用 struct tag；python: 使用 typehint；rust：使用宏。  下面是一个例子：  Java: class Foo { @Int32Type(varint = true) int f1; List&lt;@Int32Type(varint = true) Integer&gt; f2; } Python: class Foo: f1: Int32Type(varint=True) f2: List[Int32Type(varint=True)]   ","version":"下一步","tagName":"h3"},{"title":"类型包装器​","type":1,"pageTitle":"多语言序列化的类型映射","url":"/zh-CN/docs/guide/xlang_type_mapping#类型包装器","content":" 如果类型不是类的字段，用户必须用 Fury 类型来包装该类型，以传递额外的类型信息。  例如：假设 Apache Fury Java 提供了 VarInt64 类型，当用户调用 fury.serialize(long_value) 时，需要像下面这样调用 调用 fury.serialize(new VarInt64(long_value))。 ","version":"下一步","tagName":"h2"},{"title":"Features","type":0,"sectionRef":"#","url":"/zh-CN/docs/introduction/features","content":"Features 多种语言：Java/Python/C++/Golang/Javascript/Rust。零拷贝：类似pickle5，支持堆外读/写的跨语言序列化。高性能：高度可扩展的 JIT 框架，可在运行时以异步多线程方式生成序列化程序代码，以加快序列化速度，通过以下方式提升 20-170 倍的速度： 减少在生成代码中内联变量减少内存访问；通过在生成的代码中内联调用来减少虚拟方法调用；减少条件分支；减少哈希查找； 二进制协议：对象图、行格式等。 除了跨语言序列化之外，Fury 还支持以下功能： 直接替换 Java 序列化框架，如 JDK/Kryo/Hessian，无需修改任何代码，但速度提高 100 倍。它可以大大提高 RPC 调用性能、数据传输和对象持久化的效率；JDK 序列化 100% 兼容，原生支持 java 自定义序列化 writeObject/readObject/writeReplace/readResolve/readObjectNoData；支持 golang 的共享和循环引用对象序列化；支持 golang 的自动对象序列化。","keywords":"","version":"下一步"},{"title":"Benchmark","type":0,"sectionRef":"#","url":"/zh-CN/docs/introduction/benchmark","content":"","keywords":"","version":"下一步"},{"title":"Java 序列化​","type":1,"pageTitle":"Benchmark","url":"/zh-CN/docs/introduction/benchmark#java-序列化","content":"         ","version":"下一步","tagName":"h3"},{"title":"Java 反序列化​","type":1,"pageTitle":"Benchmark","url":"/zh-CN/docs/introduction/benchmark#java-反序列化","content":"         有关类型向前/向后兼容性、堆外支持、零拷贝序列化的更多 benchmark 测试，请参见benchmarks  ","version":"下一步","tagName":"h3"},{"title":"JavaScript​","type":1,"pageTitle":"Benchmark","url":"/zh-CN/docs/introduction/benchmark#javascript","content":"   该条形图使用的数据包括一个具有多种字段类型的复杂对象，JSON 数据的大小为 3KB。  请参阅benchmarks benchmark 测试代码。 ","version":"下一步","tagName":"h3"},{"title":"Java 序列化指南","type":0,"sectionRef":"#","url":"/zh-CN/docs/guide/java_object_graph_guide","content":"","keywords":"","version":"下一步"},{"title":"Java 对象图序列化​","type":1,"pageTitle":"Java 序列化指南","url":"/zh-CN/docs/guide/java_object_graph_guide#java-对象图序列化","content":" 当只需要 Java 对象序列化时，其相比跨语言的图序列化拥有更好的性能。  ","version":"下一步","tagName":"h2"},{"title":"快速开始​","type":1,"pageTitle":"Java 序列化指南","url":"/zh-CN/docs/guide/java_object_graph_guide#快速开始","content":" 注意：Fury 对象创建的代价很高， 因此 Fury 对象应该尽可能被复用，而不是每次都重新创建。  您应该为 Fury 创建一个全局的静态变量，或者有限的的 Fury 实例对象。Fury本身占用一定内存，请不要创建上万个Fury对象  使用单线程版本 Fury:  import java.util.List; import java.util.Arrays; import org.apache.fury.*; import org.apache.fury.config.*; public class Example { public static void main(String[] args) { SomeClass object = new SomeClass(); // Note that Fury instances should be reused between // multiple serializations of different objects. Fury fury = Fury.builder().withLanguage(Language.JAVA) .requireClassRegistration(true) .build(); // Registering types can reduce class name serialization overhead, but not mandatory. // If class registration enabled, all custom types must be registered. fury.register(SomeClass.class); byte[] bytes = fury.serialize(object); System.out.println(fury.deserialize(bytes)); } }   使用多线程版本 Fury：  import java.util.List; import java.util.Arrays; import org.apache.fury.*; import org.apache.fury.config.*; public class Example { public static void main(String[] args) { SomeClass object = new SomeClass(); // Note that Fury instances should be reused between // multiple serializations of different objects. ThreadSafeFury fury = new ThreadLocalFury(classLoader -&gt; { Fury f = Fury.builder().withLanguage(Language.JAVA) .withClassLoader(classLoader).build(); f.register(SomeClass.class); return f; }); byte[] bytes = fury.serialize(object); System.out.println(fury.deserialize(bytes)); } }   Fury 对象复用示例：  import java.util.List; import java.util.Arrays; import org.apache.fury.*; import org.apache.fury.config.*; public class Example { // reuse fury. private static final ThreadSafeFury fury = new ThreadLocalFury(classLoader -&gt; { Fury f = Fury.builder().withLanguage(Language.JAVA) .withClassLoader(classLoader).build(); f.register(SomeClass.class); return f; }); public static void main(String[] args) { SomeClass object = new SomeClass(); byte[] bytes = fury.serialize(object); System.out.println(fury.deserialize(bytes)); } }   ","version":"下一步","tagName":"h2"},{"title":"FuryBuilder 参数选项​","type":1,"pageTitle":"Java 序列化指南","url":"/zh-CN/docs/guide/java_object_graph_guide#furybuilder-参数选项","content":" 参数选项名\t描述\t默认值timeRefIgnored\t启用 reference tracking 时，是否忽略在 TimeSerializers 中注册的所有时间类型及其子类的引用跟踪。如果忽略，则可以通过调用 Fury#registerSerializer(Class, Serializer) 来启用对每种时间类型的引用跟踪。例如，fury.registerSerializer(Date.class, new DateSerializer(fury, true))。请注意，启用 ref tracking 功能应在任何包含时间字段的类型的序列化程序编码之前进行。否则，这些字段仍将跳过 reference tracking。\ttrue compressInt\t启用或禁用 int 压缩，减小数据体积。\ttrue compressLong\t启用或禁用 long 压缩，减小数据体积。\ttrue compressString\t启用或禁用 String 压缩，减小数据体积。\ttrue classLoader\t关联到当前 Fury 的类加载器，每个 Fury 会关联一个不可变的类加载器，用于缓存类元数据。如果需要切换类加载器，请使用 LoaderBinding 或 ThreadSafeFury 进行更新。\tThread.currentThread().getContextClassLoader() compatibleMode\t类型的向前/向后兼容性配置。也与 checkClassVersion 配置相关。schema_consistent： 类的Schema信息必须在序列化对等节点和反序列化对等节点之间保持一致。COMPATIBLE： 序列化对等节点和反序列化对等节点之间的类模式可以不同。它们可以独立添加/删除字段。\tCompatibleMode.SCHEMA_CONSISTENT checkClassVersion\t决定是否检查类模式的一致性。如果启用，Fury 将写入 classVersionHash 和基于其检查类型一致性。当启用 CompatibleMode#COMPATIBLE 时，它将自动禁用。除非能确保类不会演化，否则不建议禁用。\tfalse checkJdkClassSerializable\t启用或禁用 java.* 下类的 Serializable 接口检查。如果 java.* 下的类不是 Serializable，Fury 将抛出 UnsupportedOperationException。\ttrue registerGuavaTypes\t是否预先注册 Guava 类型，如 RegularImmutableMap/RegularImmutableList。这些类型不是公共 API，但似乎非常稳定。\ttrue requireClassRegistration\t禁用可能会允许未知类被反序列化，从而带来潜在的安全风险。\ttrue suppressClassRegistrationWarnings\t是否抑制类注册警告。这些警告可用于安全审计，但可能会较琐碎，默认情况下将启用此抑制功能。\ttrue metaShareEnabled\t是否否开启原元数据共享。\tfalse scopedMetaShareEnabled\t范围元数据共享侧重于单一序列化流程。在此过程中创建或识别的元数据为该过程独有，不会与其他序列化过程共享。\tfalse metaCompressor\t元数据压缩器。请注意，传递的元压缩器应是线程安全的。默认情况下，将使用基于 Deflater 的压缩器 DeflaterMetaCompressor。用户可以使用其他压缩器，如 zstd 以获得更好的压缩率。\tDeflaterMetaCompressor deserializeNonexistentClass\t启用或禁用反序列化/跳转不存在类的数据。\ttrue， 如果设置了 CompatibleMode.Compatible，将会变为 false。 codeGenEnabled\t禁用后，初始序列化速度会加快，但后续序列化速度会减慢。\ttrue asyncCompilationEnabled\t如果启用，序列化会首先使用解释器模式，并在类的异步序列化 JIT 完成后切换到 JIT 序列化。\tfalse scalaOptimizationEnabled\t启用或禁用特定于 Scala 的序列化优化。\tfalse copyRef\t禁用后，复制性能会更好。但 Fury 深度复制将忽略循环引用和共享引用。对象图中的相同引用将在一次 Fury#copy 中复制到不同的对象中。\ttrue  ","version":"下一步","tagName":"h2"},{"title":"高级用法​","type":1,"pageTitle":"Java 序列化指南","url":"/zh-CN/docs/guide/java_object_graph_guide#高级用法","content":" ","version":"下一步","tagName":"h2"},{"title":"Fury 创建​","type":1,"pageTitle":"Java 序列化指南","url":"/zh-CN/docs/guide/java_object_graph_guide#fury-创建","content":" 单线程 Fury 创建:  Fury fury=Fury.builder() .withLanguage(Language.JAVA) // enable reference tracking for shared/circular reference. // Disable it will have better performance if no duplicate reference. .withRefTracking(false) .withCompatibleMode(CompatibleMode.SCHEMA_CONSISTENT) // enable type forward/backward compatibility // disable it for small size and better performance. // .withCompatibleMode(CompatibleMode.COMPATIBLE) // enable async multi-threaded compilation. .withAsyncCompilation(true) .build(); byte[]bytes=fury.serialize(object); System.out.println(fury.deserialize(bytes));   多线程 Fury 创建:  ThreadSafeFury fury=Fury.builder() .withLanguage(Language.JAVA) // enable reference tracking for shared/circular reference. // Disable it will have better performance if no duplicate reference. .withRefTracking(false) // compress int for smaller size // .withIntCompressed(true) // compress long for smaller size // .withLongCompressed(true) .withCompatibleMode(CompatibleMode.SCHEMA_CONSISTENT) // enable type forward/backward compatibility // disable it for small size and better performance. // .withCompatibleMode(CompatibleMode.COMPATIBLE) // enable async multi-threaded compilation. .withAsyncCompilation(true) .buildThreadSafeFury(); byte[]bytes=fury.serialize(object); System.out.println(fury.deserialize(bytes));   ","version":"下一步","tagName":"h3"},{"title":"配置Fury生成更小的序列化体积：​","type":1,"pageTitle":"Java 序列化指南","url":"/zh-CN/docs/guide/java_object_graph_guide#配置fury生成更小的序列化体积","content":" FuryBuilder#withIntCompressed/FuryBuilder#withLongCompressed 可用于压缩 int/long，使其体积更小。通常压缩 int 类型就足够了。  这两个压缩属性默认启用。如果序列化大小不重要，比如你之前使用flatbuffers进行序列化，flatbuffers不会压缩任何东西，那么这种情况下建议关闭压缩。如果数据都是数字，压缩可能会带来 80%以上的性能损耗。  对于 int 压缩，Fury 使用 1~5 字节进行编码。每个字节的第一位表示是否有下一个字节位，如果下一个字节位被设置，则将读取下一个字节，直到下一个字节位未被设置时停止。  对于 long 压缩，Fury 支持两种编码方式：  Fury SLI（Small long as int）编码（默认使用）： 如果 long 在 [-1073741824, 1073741823] 范围内，则编码为 4 字节 int：| little-endian: ((int) value) &lt;&lt; 1 |否则写成 9 字节： | 0b1 | little-endian 8 bit long | Fury PVL（渐进可变长）编码： 每个字节的第一位表示是否有下一个字节。如果第一位被设置，则将读取下一个字节。 直到下一字节的第一位未设置。负数将通过 (v &lt;&lt; 1) ^ (v &gt;&gt; 63) 转换为正数，以减少小负数的编码空间占用。  如果一个数字是 Long 类型，大多不能用更小的字节表示，压缩效果就不够好。 与占用的性能开销相比，这是不值得的。如果您发现Long类型压缩并没有带来多少好处，也许您应该尝试关闭Long类型压缩，以提升性能。  ","version":"下一步","tagName":"h3"},{"title":"对象深拷贝​","type":1,"pageTitle":"Java 序列化指南","url":"/zh-CN/docs/guide/java_object_graph_guide#对象深拷贝","content":" 深度拷贝示例:  Fury fury=Fury.builder() ... .withRefCopy(true).build(); SomeClass a=xxx; SomeClass copied=fury.copy(a)   使 Fury 深度复制忽略循环引用和共享引用，此配置会将对象图中的相同引用在一次 Fury#copy 之后会被复制到不同的对象中。  Fury fury=Fury.builder() ... .withRefCopy(false).build(); SomeClass a=xxx; SomeClass copied=fury.copy(a)   ","version":"下一步","tagName":"h3"},{"title":"实现自定义的序列化器​","type":1,"pageTitle":"Java 序列化指南","url":"/zh-CN/docs/guide/java_object_graph_guide#实现自定义的序列化器","content":" 在某些情况下，您可能希望为您的自定义类型实现一个序列化器，特别是某些通过 JDK writeObject/writeReplace/readObject/readResolve 实现序列化的类，JDK序列化的性能和空间效率很低。比如说，如果您不想下面的 Foo#writeObject 被调用，你可以实现类型下面的 FooSerializer ：  class Foo { public long f1; private void writeObject(ObjectOutputStream s) throws IOException { System.out.println(f1); s.defaultWriteObject(); } } class FooSerializer extends Serializer&lt;Foo&gt; { public FooSerializer(Fury fury) { super(fury, Foo.class); } @Override public void write(MemoryBuffer buffer, Foo value) { buffer.writeInt64(value.f1); } @Override public Foo read(MemoryBuffer buffer) { Foo foo = new Foo(); foo.f1 = buffer.readInt64(); return foo; } }   注册序列化器:  Fury fury=getFury(); fury.registerSerializer(Foo.class,new FooSerializer(fury));   ","version":"下一步","tagName":"h3"},{"title":"安全与类注册​","type":1,"pageTitle":"Java 序列化指南","url":"/zh-CN/docs/guide/java_object_graph_guide#安全与类注册","content":" 可以使用 FuryBuilder#requireClassRegistration 来禁用类注册，这将允许反序列化未知类型的对象，使用更灵活。但如果类中包含恶意代码，就会出现安全漏洞。  除非能确保运行环境和外部交互环境安全，否则请勿禁用类注册检查。  如果禁用此选项，在反序列化未知/不可信任的类型时，可能会执行init/equals/hashCode中的恶意代码。 禁用。  类注册不仅可以降低安全风险，还可以避免类名序列化成本。  您可以使用 Fury#register API 来注册类。  请注意：类注册顺序很重要，序列化和反序列化对，应具有相同的注册顺序。  Fury fury=xxx; fury.register(SomeClass.class); fury.register(SomeClass1.class,200);   如果调用 FuryBuilder#requireClassRegistration(false) 来禁用类注册检查、 可以通过 ClassResolver#setClassChecker 设置 org.apache.fury.resolver.ClassChecker 来控制哪些类是允许序列化。例如，可以通过以下方式允许以 org.example.* 开头的类：  Fury fury=xxx; fury.getClassResolver().setClassChecker((classResolver,className)-&gt;className.startsWith(&quot;org.example.&quot;));   AllowListChecker checker=new AllowListChecker(AllowListChecker.CheckLevel.STRICT); ThreadSafeFury fury=new ThreadLocalFury(classLoader-&gt;{ Fury f=Fury.builder().requireClassRegistration(true).withClassLoader(classLoader).build(); f.getClassResolver().setClassChecker(checker); checker.addListener(f.getClassResolver()); return f; }); checker.allowClass(&quot;org.example.*&quot;);   Aapche Fury 还提供了一个 org.apache.fury.resolver.AllowListChecker，它是一个基于允许/禁止列表的检查器，用于简化类检查机制的定制。您可以使用此检查器或自行实现更复杂的检查器。  ","version":"下一步","tagName":"h3"},{"title":"序列化器注册​","type":1,"pageTitle":"Java 序列化指南","url":"/zh-CN/docs/guide/java_object_graph_guide#序列化器注册","content":" 您还可以通过 Fury#registerSerializer API 为类注册自定义序列化器。或者为类实现 java.io.Externalizable。  ","version":"下一步","tagName":"h3"},{"title":"零拷贝序列化​","type":1,"pageTitle":"Java 序列化指南","url":"/zh-CN/docs/guide/java_object_graph_guide#零拷贝序列化","content":" import org.apache.fury.*; import org.apache.fury.config.*; import org.apache.fury.serializers.BufferObject; import org.apache.fury.memory.MemoryBuffer; import java.util.*; import java.util.stream.Collectors; public class ZeroCopyExample { // Note that fury instance should be reused instead of creation every time. static Fury fury = Fury.builder() .withLanguage(Language.JAVA) .build(); // mvn exec:java -Dexec.mainClass=&quot;io.ray.fury.examples.ZeroCopyExample&quot; public static void main(String[] args) { List&lt;Object&gt; list = Arrays.asList(&quot;str&quot;, new byte[1000], new int[100], new double[100]); Collection&lt;BufferObject&gt; bufferObjects = new ArrayList&lt;&gt;(); byte[] bytes = fury.serialize(list, e -&gt; !bufferObjects.add(e)); List&lt;MemoryBuffer&gt; buffers = bufferObjects.stream() .map(BufferObject::toBuffer).collect(Collectors.toList()); System.out.println(fury.deserialize(bytes, buffers)); } }   ","version":"下一步","tagName":"h3"},{"title":"Meta 共享​","type":1,"pageTitle":"Java 序列化指南","url":"/zh-CN/docs/guide/java_object_graph_guide#meta-共享","content":" Apache Fury 支持在同一个上下文（例如：TCP Connection）中的多个序列中共享类型元数据（例如：类名称，字段名称，字段类型信息 等），这些信息将在上下文中第一次序列化时发送给 对端。根据这些元数据，对端方可重建相同的反序列化器，从而避免为后续序列化传输元数据，减少网络流量压力，并支持类型向前/向后兼容。  // Fury.builder() // .withLanguage(Language.JAVA) // .withRefTracking(false) // // share meta across serialization. // .withMetaContextShare(true) // Not thread-safe fury. MetaContext context=xxx; fury.getSerializationContext().setMetaContext(context); byte[]bytes=fury.serialize(o); // Not thread-safe fury. MetaContext context=xxx; fury.getSerializationContext().setMetaContext(context); fury.deserialize(bytes) // Thread-safe fury fury.setClassLoader(beanA.getClass().getClassLoader()); byte[]serialized=fury.execute( f-&gt;{ f.getSerializationContext().setMetaContext(context); return f.serialize(beanA); } ); // thread-safe fury fury.setClassLoader(beanA.getClass().getClassLoader()); Object newObj=fury.execute( f-&gt;{ f.getSerializationContext().setMetaContext(context); return f.deserialize(serialized); } );   ","version":"下一步","tagName":"h3"},{"title":"反序列化不存在的类​","type":1,"pageTitle":"Java 序列化指南","url":"/zh-CN/docs/guide/java_object_graph_guide#反序列化不存在的类","content":" Apache Fury 支持反序列化不存在的类，通过FuryBuilder#deserializeNonexistentClass(true) 选项开启。当此选项开启的时候，同时也会开启元数据共享。Apache Fury 会将该类型的反序列化数据存储在 lazy Map 子类中。通过使用 Fury 实现的 lazy Map，可以避免在反序列化过程中填充 map 时 map 内部节点的rebalance来下，从而进一步提高性能。如果这些数据被发送到另一个进程，而该进程中存在该类，那么数据将被反序列化为该类型的对象，而不会丢失任何信息。  如果未启用元数据共享，新类数据将被跳过，并返回一个 NonexistentSkipClass 的stub 对象。  ","version":"下一步","tagName":"h3"},{"title":"序列化库迁移​","type":1,"pageTitle":"Java 序列化指南","url":"/zh-CN/docs/guide/java_object_graph_guide#序列化库迁移","content":" ","version":"下一步","tagName":"h2"},{"title":"JDK 迁移​","type":1,"pageTitle":"Java 序列化指南","url":"/zh-CN/docs/guide/java_object_graph_guide#jdk-迁移","content":" 如果您之前使用 JDK 序列化，并且没有同时升级 client 和 server。这在线上应用很常见，Apache Fury 提供了一个 org.apache.fury.serializer.JavaSerializer.serializedByJDK 工具方法来检查二进制文件是否由 JDK 序列化生成。您可以使用以下模式使已有的序列化具有探测运行协议的能力、然后以异步滚动升级的方式将序列化器逐步升级至 Apache Fury：  if(JavaSerializer.serializedByJDK(bytes)){ ObjectInputStream objectInputStream=xxx; return objectInputStream.readObject(); }else{ return fury.deserialize(bytes); }   ","version":"下一步","tagName":"h3"},{"title":"Apache Fury 更新​","type":1,"pageTitle":"Java 序列化指南","url":"/zh-CN/docs/guide/java_object_graph_guide#apache-fury-更新","content":" 当前只保证小版本之间的兼容性。例如：您使用的 Fury 版本为 0.9.0，当升级到 Fury 0.8.1 版本，可以确保二进制协议的兼容性。但是，如果更新到 Fury 0.9.0 版本，二进制协议兼容性能力不能得到保证。我们计划在1.0.0版本开始提供大版本内的二进制兼容性。  ","version":"下一步","tagName":"h3"},{"title":"常见问题排查​","type":1,"pageTitle":"Java 序列化指南","url":"/zh-CN/docs/guide/java_object_graph_guide#常见问题排查","content":" ","version":"下一步","tagName":"h2"},{"title":"类不一致和类版本检查​","type":1,"pageTitle":"Java 序列化指南","url":"/zh-CN/docs/guide/java_object_graph_guide#类不一致和类版本检查","content":" 如果您在创建 fury 时未将 CompatibleMode 设置为 org.apache.fury.config.CompatibleMode.COMPATIBLE 而出现奇怪的序列化错误，可能是由于序列化对和反序列化对之间的类不一致造成的。  在这种情况下，您可以调用 FuryBuilder#withClassVersionCheck 来创建 Fury 以验证它，如果反序列化时抛出org.apache.fury.exception.ClassNotCompatibleException，则表明类是不一致的，您应该通过FuryBuilder#withCompaibleMode(CompatibleMode.COMPATIBLE) 创建 Fury 对象。  CompatibleMode.COMPATIBLE 会带来更多的性能和空间代价，如果您的类在序列化和反序列化之间保持一致，请不要设置此选项。  ","version":"下一步","tagName":"h3"},{"title":"使用错误的 API 反序列化​","type":1,"pageTitle":"Java 序列化指南","url":"/zh-CN/docs/guide/java_object_graph_guide#使用错误的-api-反序列化","content":" 如果您调用 Fury#serialize 来序列化对象，则应调用 Fury#deserialize 来反序列化对象，而不是使用 Fury#deserializeJavaObject。  如果调用 Fury#serializeJavaObject 来序列化对象，则应调用 Fury#deserializeJavaObject 来进行反序列化。而不是使用Fury#deserializeJavaObjectAndClass 或者 Fury#deserialize。  如果调用 Fury#serializeJavaObjectAndClass 来序列化对象，则应 调用 Fury#deserializeJavaObjectAndClass 进行反序列化，而不是使用Fury#deserializeJavaObject 或者 Fury#deserialize。 ","version":"下一步","tagName":"h3"},{"title":"Fury Row Format","type":0,"sectionRef":"#","url":"/zh-CN/docs/specification/fury_row_format_spec","content":"","keywords":"","version":"下一步"},{"title":"Row Format​","type":1,"pageTitle":"Fury Row Format","url":"/zh-CN/docs/specification/fury_row_format_spec#row-format","content":" Coming soon ","version":"下一步","tagName":"h2"},{"title":"Fury Java Serialization Format","type":0,"sectionRef":"#","url":"/zh-CN/docs/specification/fury_java_serialization_spec","content":"","keywords":"","version":"下一步"},{"title":"Spec overview​","type":1,"pageTitle":"Fury Java Serialization Format","url":"/zh-CN/docs/specification/fury_java_serialization_spec#spec-overview","content":" Fury Java Serialization is an automatic object serialization framework that supports reference and polymorphism. Fury will convert an object from/to fury java serialization binary format. Fury has two core concepts for java serialization:  Fury Java Binary formatFramework to convert object to/from Fury Java Binary format  The serialization format is a dynamic binary format. The dynamics and reference/polymorphism support make Fury flexible, much more easy to use, but also introduce more complexities compared to static serialization frameworks. So the format will be more complex.  Here is the overall format:  | fury header | object ref meta | object class meta | object value data |   The data are serialized using little endian byte order overall. If bytes swap is costly for some object, Fury will write the byte order for that object into the data instead of converting it to little endian.  ","version":"下一步","tagName":"h2"},{"title":"Fury header​","type":1,"pageTitle":"Fury Java Serialization Format","url":"/zh-CN/docs/specification/fury_java_serialization_spec#fury-header","content":" Fury header consists starts one byte:  | 4 bits | 1 bit | 1 bit | 1 bit | 1 bit | optional 4 bytes | +---------------+-------+-------+--------+-------+------------------------------------+ | reserved bits | oob | xlang | endian | null | unsigned int for meta start offset |   null flag: 1 when object is null, 0 otherwise. If an object is null, other bits won't be set.endian flag: 1 when data is encoded by little endian, 0 for big endian.xlang flag: 1 when serialization uses xlang format, 0 when serialization uses Fury java format.oob flag: 1 when passed BufferCallback is not null, 0 otherwise.  If meta share mode is enabled, an uncompressed unsigned int is appended to indicate the start offset of metadata.  ","version":"下一步","tagName":"h2"},{"title":"Reference Meta​","type":1,"pageTitle":"Fury Java Serialization Format","url":"/zh-CN/docs/specification/fury_java_serialization_spec#reference-meta","content":" Reference tracking handles whether the object is null, and whether to track reference for the object by writing corresponding flags and maintaining internal state.  Reference flags:  Flag\tByte Value\tDescriptionNULL FLAG\t-3\tThis flag indicates the object is a null value. We don't use another byte to indicate REF, so that we can save one byte. REF FLAG\t-2\tThis flag indicates the object is already serialized previously, and fury will write a ref id with unsigned varint format instead of serialize it again NOT_NULL VALUE FLAG\t-1\tThis flag indicates the object is a non-null value and fury doesn't track ref for this type of object. REF VALUE FLAG\t0\tThis flag indicates the object is referencable and the first time to serialize.  When reference tracking is disabled globally or for specific types, or for certain types within a particular context(e.g., a field of a class), only the NULL and NOT_NULL VALUE flags will be used for reference meta.  ","version":"下一步","tagName":"h2"},{"title":"Class Meta​","type":1,"pageTitle":"Fury Java Serialization Format","url":"/zh-CN/docs/specification/fury_java_serialization_spec#class-meta","content":" Fury supports to register class by an optional id, the registration can be used for security check and class identification. If a class is registered, it will have a user-provided or an auto-growing unsigned int i.e. class_id.  Depending on whether meta share mode and registration is enabled for current class, Fury will write class meta differently.  ","version":"下一步","tagName":"h2"},{"title":"Schema consistent​","type":1,"pageTitle":"Fury Java Serialization Format","url":"/zh-CN/docs/specification/fury_java_serialization_spec#schema-consistent","content":" If schema consistent mode is enabled globally or enabled for current class, class meta will be written as follows:  If class is registered, it will be written as a fury unsigned varint: class_id &lt;&lt; 1.If class is not registered: If class is not an array, fury will write one byte 0bxxxxxxx1 first, then write class name. The first little bit is 1, which is different from first bit 0 of encoded class id. Fury can use this information to determine whether to read class by class id for deserialization. If class is not registered and class is an array, fury will write one byte dimensions &lt;&lt; 1 | 1 first, then write component class subsequently. This can reduce array class name cost if component class is or will be serialized.Class will be written as two enumerated fury unsigned by default: package name and class name. If meta share mode is enabled, class will be written as an unsigned varint which points to index in MetaContext.  ","version":"下一步","tagName":"h3"},{"title":"Schema evolution​","type":1,"pageTitle":"Fury Java Serialization Format","url":"/zh-CN/docs/specification/fury_java_serialization_spec#schema-evolution","content":" If schema evolution mode is enabled globally or enabled for current class, class meta will be written as follows:  If meta share mode is not enabled, class meta will be written as schema consistent mode. Additionally, field meta such as field type and name will be written with the field value using a key-value like layout.If meta share mode is enabled, class meta will be written as a meta-share encoded binary if class hasn't been written before, otherwise an unsigned varint id which references to previous written class meta will be written.  ","version":"下一步","tagName":"h3"},{"title":"Meta share​","type":1,"pageTitle":"Fury Java Serialization Format","url":"/zh-CN/docs/specification/fury_java_serialization_spec#meta-share","content":" This mode will forbid streaming writing since it needs to look back for update the start offset after the whole object graph writing and meta collecting is finished. Only in this way we can ensure deserialization failure doesn't lost shared meta. Meta streamline will be supported in the future for enclosed meta sharing which doesn't cross multiple serializations of different objects.  For Schema consistent mode, class will be encoded as an enumerated string by full class name. Here we mainly describe the meta layout for schema evolution mode:  | 8 bytes global meta header | 1~2 bytes | variable bytes | variable bytes | variable bytes | +-------------------------------+-------------|--------------------+-------------------+----------------+ | 50 bits hash + 14 bits header | type header | current class meta | parent class meta | ... |   Class meta are encoded from parent class to leaf class, only class with serializable fields will be encoded.  ","version":"下一步","tagName":"h2"},{"title":"Global meta header​","type":1,"pageTitle":"Fury Java Serialization Format","url":"/zh-CN/docs/specification/fury_java_serialization_spec#global-meta-header","content":" Meta header is a 64 bits number value encoded in little endian order.  lower 12 bits are used to encode meta size. If meta size &gt;= 0b111_1111_1111, then writemeta_ size - 0b111_1111_1111 next.13rd bit is used to indicate whether to write fields meta. When this class is schema-consistent or use registered serializer, fields meta will be skipped. Class Meta will be used for share namespace + type name only.14rd bit is used to indicate whether meta is compressed.Other 50 bits is used to store the unique hash of flags + all layers class meta.  ","version":"下一步","tagName":"h3"},{"title":"Type header​","type":1,"pageTitle":"Fury Java Serialization Format","url":"/zh-CN/docs/specification/fury_java_serialization_spec#type-header","content":" Lowest 4 digits 0b0000~0b1110 are used to record num classes. 0b1111 is preserved to indicate that Fury need to read more bytes for length using Fury unsigned int encoding. If current class doesn't has parent class, or parent class doesn't have fields to serialize, or we're in a context which serialize fields of current class only(ObjectStreamSerializer#SlotInfo is an example), num classes will be 1.Other 4 bits are preserved to future extensions.If num classes are greater than or equal to 0b1111, write num_classes - 0b1111 as varuint next.  ","version":"下一步","tagName":"h3"},{"title":"Single layer class meta​","type":1,"pageTitle":"Fury Java Serialization Format","url":"/zh-CN/docs/specification/fury_java_serialization_spec#single-layer-class-meta","content":" | unsigned varint | meta string | meta string | field info: variable bytes | variable bytes | ... | +----------------------------+-----------------------+---------------------+-------------------------------+-----------------+-----+ | num fields + register flag | header + package name | header + class name | header + type id + field name | next field info | ... |   num fields: encode num fields &lt;&lt; 1 | register flag(1 when class registered) as unsigned varint. If class is registered, then an unsigned varint class id will be written next, package and class name will be omitted.If current class is schema consistent, then num field will be 0 to flag it.If current class isn't schema consistent, then num field will be the number of compatible fields. For example, users can use tag id to mark some field as compatible field in schema consistent context. In such cases, schema consistent fields will be serialized first, then compatible fields will be serialized next. At deserialization, Fury will use fields info of those fields which aren't annotated by tag id for deserializing schema consistent fields, then use fields info in meta for deserializing compatible fields. Package name encoding(omitted when class is registered): encoding algorithm: UTF8/ALL_TO_LOWER_SPECIAL/LOWER_UPPER_DIGIT_SPECIALHeader: 6 bits size | 2 bits encoding flags. The 6 bits size: 0~63 will be used to indicate size 0~63, the value 63 the size need more byte to read, the encoding will encode size - 63 as a varint next. Class name encoding(omitted when class is registered): encoding algorithm: UTF8/LOWER_UPPER_DIGIT_SPECIAL/FIRST_TO_LOWER_SPECIAL/ALL_TO_LOWER_SPECIALheader: 6 bits size | 2 bits encoding flags. The 6 bits size: 0~63 will be used to indicate size 0~63, the value 63 the size need more byte to read, the encoding will encode size - 63 as a varint next. Field info: header(8 bits): 3 bits size + 2 bits field name encoding + polymorphism flag + nullability flag + ref tracking flag. Users can use annotation to provide those info. 2 bits field name encoding: encoding: UTF8/ALL_TO_LOWER_SPECIAL/LOWER_UPPER_DIGIT_SPECIAL/TAG_IDIf tag id is used, i.e. field name is written by an unsigned varint tag id. 2 bits encoding will be 11. size of field name: The 3 bits size: 0~7 will be used to indicate length 1~7, the value 6 the size read more bytes, the encoding will encode size - 7 as a varint next.If encoding is TAG_ID, then num_bytes of field name will be used to store tag id. ref tracking: when set to 1, ref tracking will be enabled for this field.nullability: when set to 1, this field can be null.polymorphism: when set to 1, the actual type of field will be the declared field type even the type if not final. type id: For registered type-consistent classes, it will be the registered class id.Otherwise it will be encoded as OBJECT_ID if it isn't final and FINAL_OBJECT_ID if it's final. The meta for such types is written separately instead of inlining here is to reduce meta space cost if object of this type is serialized in current object graph multiple times, and the field value may be null too. Field name: If type id is set, type id will be used instead. Otherwise meta string encoding length and data will be written instead.  Field order are left as implementation details, which is not exposed to specification, the deserialization need to resort fields based on Fury field comparator. In this way, fury can compute statistics for field names or types and using a more compact encoding.  ","version":"下一步","tagName":"h3"},{"title":"Other layers class meta​","type":1,"pageTitle":"Fury Java Serialization Format","url":"/zh-CN/docs/specification/fury_java_serialization_spec#other-layers-class-meta","content":" Same encoding algorithm as the previous layer except:  header + package name: Header: If package name has been written before: varint index + sharing flag(set) will be writtenIf package name hasn't been written before: If meta string encoding is LOWER_SPECIAL and the length of encoded string &lt;= 64, then header will be6 bits size + encoding flag(set) + sharing flag(unset).Otherwise, header will be 3 bits unset + 3 bits encoding flags + encoding flag(unset) + sharing flag(unset)  ","version":"下一步","tagName":"h3"},{"title":"Meta String​","type":1,"pageTitle":"Fury Java Serialization Format","url":"/zh-CN/docs/specification/fury_java_serialization_spec#meta-string","content":" Meta string is mainly used to encode meta strings such as class name and field names.  ","version":"下一步","tagName":"h2"},{"title":"Encoding Algorithms​","type":1,"pageTitle":"Fury Java Serialization Format","url":"/zh-CN/docs/specification/fury_java_serialization_spec#encoding-algorithms","content":" String binary encoding algorithm:  Algorithm\tPattern\tDescriptionLOWER_SPECIAL\ta-z._$|\tevery char is written using 5 bits, a-z: 0b00000~0b11001, ._$|: 0b11010~0b11101, prepend one bit at the start to indicate whether strip last char since last byte may have 7 redundant bits(1 indicates strip last char) LOWER_UPPER_DIGIT_SPECIAL\ta-zA-Z0~9._\tevery char is written using 6 bits, a-z: 0b00000~0b11001, A-Z: 0b11010~0b110011, 0~9: 0b110100~0b111101, ._: 0b111110~0b111111, prepend one bit at the start to indicate whether strip last char since last byte may have 7 redundant bits(1 indicates strip last char) UTF-8\tany chars\tUTF-8 encoding  Encoding flags:  Encoding Flag\tPattern\tEncoding AlgorithmLOWER_SPECIAL\tevery char is in a-z._$|\tLOWER_SPECIAL FIRST_TO_LOWER_SPECIAL\tevery char is in a-z[c1,c2] except first char is upper case\treplace first upper case char to lower case, then use LOWER_SPECIAL ALL_TO_LOWER_SPECIAL\tevery char is in a-zA-Z[c1,c2]\treplace every upper case char by | + lower case, then use LOWER_SPECIAL, use this encoding if it's smaller than Encoding LOWER_UPPER_DIGIT_SPECIAL LOWER_UPPER_DIGIT_SPECIAL\tevery char is in a-zA-Z[c1,c2]\tuse LOWER_UPPER_DIGIT_SPECIAL encoding if it's smaller than Encoding FIRST_TO_LOWER_SPECIAL UTF8\tany utf-8 char\tuse UTF-8 encoding Compression\tany utf-8 char\tlossless compression  Notes:  For package name encoding, c1,c2 should be ._; For field/type name encoding, c1,c2 should be _$;Depending on cases, one can choose encoding flags + data jointly, uses 3 bits of first byte for flags and other bytes for data.  ","version":"下一步","tagName":"h3"},{"title":"Shared meta string​","type":1,"pageTitle":"Fury Java Serialization Format","url":"/zh-CN/docs/specification/fury_java_serialization_spec#shared-meta-string","content":" The shared meta string format consists of header and encoded string binary. Header of encoded string binary will be inlined in shared meta header.  Header is written using little endian order, Fury can read this flag first to determine how to deserialize the data.  Write by data​  If string hasn't been written before, the data will be written as follows:  | unsigned varint: string binary size + 1 bit: not written before | 56 bits: unique hash | 3 bits encoding flags + string binary |   If string binary size is less than 16 bytes, the hash will be omitted to save spaces. Unique hash can be omitted too if caller pass a flag to disable it. In such cases, the format will be:  | unsigned varint: string binary size + 1 bit: not written before | 3 bits encoding flags + string binary |   Write by ref​  If string has been written before, the data will be written as follows:  | unsigned varint: written string id + 1 bit: written before |   ","version":"下一步","tagName":"h3"},{"title":"Value Format​","type":1,"pageTitle":"Fury Java Serialization Format","url":"/zh-CN/docs/specification/fury_java_serialization_spec#value-format","content":" ","version":"下一步","tagName":"h2"},{"title":"Basic types​","type":1,"pageTitle":"Fury Java Serialization Format","url":"/zh-CN/docs/specification/fury_java_serialization_spec#basic-types","content":" Bool​  size: 1 byteformat: 0 for false, 1 for true  Byte​  size: 1 byteformat: write as pure byte.  Short​  size: 2 bytebyte order: little endian order  Char​  size: 2 bytebyte order: little endian order  Unsigned int​  size: 1~5 byteFormat: The most significant bit (MSB) in every byte indicates whether to have the next byte. If first bit is set i.e. b &amp; 0x80 == 0x80, then the next byte should be read until the first bit of the next byte is unset.  Signed int​  size: 1~5 byteFormat: First convert the number into positive unsigned int by (v &lt;&lt; 1) ^ (v &gt;&gt; 31) ZigZag algorithm, then encoding it as an unsigned int.  Unsigned long​  size: 1~9 byteFury PVL(Progressive Variable-length Long) Encoding: positive long format: first bit in every byte indicates whether to have the next byte. If first bit is set i.e. b &amp; 0x80 == 0x80, then the next byte should be read until the first bit is unset.  Signed long​  size: 1~9 byteFury SLI(Small long as int) Encoding: If long is in [-1073741824, 1073741823], encode as 4 bytes int: | little-endian: ((int) value) &lt;&lt; 1 |Otherwise write as 9 bytes: | 0b1 | little-endian 8 bytes long | Fury PVL(Progressive Variable-length Long) Encoding: First convert the number into positive unsigned long by (v &lt;&lt; 1) ^ (v &gt;&gt; 63) ZigZag algorithm to reduce cost of small negative numbers, then encoding it as an unsigned long.  Float​  size: 4 byteformat: convert float to 4 bytes int by Float.floatToRawIntBits, then write as binary by little endian order.  Double​  size: 8 byteformat: convert double to 8 bytes int by Double.doubleToRawLongBits, then write as binary by little endian order.  ","version":"下一步","tagName":"h3"},{"title":"String​","type":1,"pageTitle":"Fury Java Serialization Format","url":"/zh-CN/docs/specification/fury_java_serialization_spec#string","content":" Format:  | header: size &lt;&lt; 2 | 2 bits encoding flags | binary data |   size + encoding will be concat as a long and encoded as an unsigned var long. The little 2 bits is used for encoding: 0 for latin, 1 for utf-16, 2 for utf-8.encoded string binary data based on encoding: latin/utf-16/utf-8.  Which encoding to choose:  For JDK8: fury detect latin at runtime, if string is latin string, then use latin encoding, otherwise use utf-16.For JDK9+: fury use coder in String object for encoding, latin/utf-16 will be used for encoding.If the string is encoded by utf-8, then fury will use utf-8 to decode the data. But currently fury doesn't enable utf-8 encoding by default for java. Cross-language string serialization of fury uses utf-8 by default.  ","version":"下一步","tagName":"h3"},{"title":"Collection​","type":1,"pageTitle":"Fury Java Serialization Format","url":"/zh-CN/docs/specification/fury_java_serialization_spec#collection","content":" All collection serializers must extend AbstractCollectionSerializer.  Format:  length(unsigned varint) | collection header | elements header | elements data   Collection header​  For ArrayList/LinkedArrayList/HashSet/LinkedHashSet, this will be empty.For TreeSet, this will be ComparatorFor subclass of ArrayList, this may be extra object field info.  Elements header​  In most cases, all collection elements are same type and not null, elements header will encode those homogeneous information to avoid the cost of writing it for every element. Specifically, there are four kinds of information which will be encoded by elements header, each use one bit:  If track elements ref, use the first bit 0b1 of the header to flag it.If the collection has null, use the second bit 0b10 of the header to flag it. If ref tracking is enabled for this element type, this flag is invalid.If the collection element types are not declared type, use the 3rd bit 0b100 of the header to flag it.If the collection element types are different, use the 4rd bit 0b1000 header to flag it.  By default, all bits are unset, which means all elements won't track ref, all elements are same type, not null and the actual element is the declared type in the custom class field.  The implementation can generate different deserialization code based read header, and look up the generated code from a linear map/list.  Elements data​  Based on the elements header, the serialization of elements data may skip ref flag/null flag/element class info.  CollectionSerializer#write/read can be taken as an example.  ","version":"下一步","tagName":"h3"},{"title":"Array​","type":1,"pageTitle":"Fury Java Serialization Format","url":"/zh-CN/docs/specification/fury_java_serialization_spec#array","content":" Primitive array​  Primitive array are taken as a binary buffer, serialization will just write the length of array size as an unsigned int, then copy the whole buffer into the stream.  Such serialization won't compress the array. If users want to compress primitive array, users need to register custom serializers for such types.  Object array​  Object array is serialized using the collection format. Object component type will be taken as collection element generic type.  ","version":"下一步","tagName":"h3"},{"title":"Map​","type":1,"pageTitle":"Fury Java Serialization Format","url":"/zh-CN/docs/specification/fury_java_serialization_spec#map","content":" All Map serializers must extend AbstractMapSerializer.  Format:  | length(unsigned varint) | map header | key value pairs data |   Map header​  For HashMap/LinkedHashMap, this will be empty.For TreeMap, this will be ComparatorFor other Map, this may be extra object field info.  Map Key-Value data​  Map iteration is too expensive, Fury won't compute the header like for collection before since it introduceconsiderable overhead. Users can use MapFieldInfo annotation to provide header in advance. Otherwise Fury will use first key-value pair to predict header optimistically, and update the chunk header if the prediction failed at some pair.  Fury will serialize map chunk by chunk, every chunk has 127 pairs at most.  | 1 byte | 1 byte | variable bytes | +----------------+----------------+-----------------+ | KV header | chunk size: N | N*2 objects |   KV header:  If track key ref, use the first bit 0b1 of the header to flag it.If the key has null, use the second bit 0b10 of the header to flag it. If ref tracking is enabled for this key type, this flag is invalid.If the actual key type of map is not the declared key type, use the 3rd bit 0b100 of the header to flag it.If track value ref, use the 4th bit 0b1000 of the header to flag it.If the value has null, use the 5th bit 0b10000 of the header to flag it. If ref tracking is enabled for this value type, this flag is invalid.If the value type of map is not the declared value type, use the 6rd bit 0b100000 of the header to flag it.If key or value is null, that key and value will be written as a separate chunk, and chunk size writing will be skipped too.  If streaming write is enabled, which means Fury can't update written chunk size. In such cases, map key-value data format will be:  | 1 byte | variable bytes | +----------------+-----------------+ | KV header | N*2 objects |   KV header will be a header marked by MapFieldInfo in java. The implementation can generate different deserialization code based read header, and look up the generated code from a linear map/list.  ","version":"下一步","tagName":"h3"},{"title":"Enum​","type":1,"pageTitle":"Fury Java Serialization Format","url":"/zh-CN/docs/specification/fury_java_serialization_spec#enum","content":" Enums are serialized as an unsigned var int. If the order of enum values change, the deserialized enum value may not be the value users expect. In such cases, users must register enum serializer by make it write enum value as an enumerated string with unique hash disabled.  ","version":"下一步","tagName":"h3"},{"title":"Object​","type":1,"pageTitle":"Fury Java Serialization Format","url":"/zh-CN/docs/specification/fury_java_serialization_spec#object","content":" Object means object of pojo/struct/bean/record type. Object will be serialized by writing its fields data in fury order.  Depending on schema compatibility, objects will have different formats.  Field order​  Field will be ordered as following, every group of fields will have its own order:  primitive fields: larger size type first, smaller later, variable size type last.boxed primitive fields: same order as primitive fieldsfinal fields: same type together, then sorted by field name lexicographically.collection fields: same order as final fieldsmap fields: same order as final fieldsother fields: same order as final fields  Schema consistent​  Object fields will be serialized one by one using following format:  Primitive field value: | var bytes | +----------------+ | value data | +----------------+ Boxed field value: | one byte | var bytes | +-----------+---------------+ | null flag | field value | +-----------+---------------+ field value of final type with ref tracking: | var bytes | var objects | +-----------+-------------+ | ref meta | value data | +-----------+-------------+ field value of final type without ref tracking: | one byte | var objects | +-----------+-------------+ | null flag | field value | +-----------+-------------+ field value of non-final type with ref tracking: | one byte | var bytes | var objects | +-----------+-------------+-------------+ | ref meta | class meta | value data | +-----------+-------------+-------------+ field value of non-final type without ref tracking: | one byte | var bytes | var objects | +-----------+------------+------------+ | null flag | class meta | value data | +-----------+------------+------------+   Schema evolution​  Schema evolution have similar format as schema consistent mode for object except:  For this object type itself, schema consistent mode will write class by id/name, but schema evolution mode will write class field names, types and other meta too, see Class meta.Class meta of final custom type needs to be written too, because peers may not have this class defined.  ","version":"下一步","tagName":"h3"},{"title":"Class​","type":1,"pageTitle":"Fury Java Serialization Format","url":"/zh-CN/docs/specification/fury_java_serialization_spec#class","content":" Class will be serialized using class meta format.  ","version":"下一步","tagName":"h3"},{"title":"Implementation guidelines​","type":1,"pageTitle":"Fury Java Serialization Format","url":"/zh-CN/docs/specification/fury_java_serialization_spec#implementation-guidelines","content":" Try to merge multiple bytes into an int/long write before writing to reduce memory IO and bound check cost.Read multiple bytes as an int/long, then split into multiple bytes to reduce memory IO and bound check cost.Try to use one varint/long to write flags and length together to save one byte cost and reduce memory io.Condition branches are less expensive compared to memory IO cost unless there are too many branches. ","version":"下一步","tagName":"h2"},{"title":"安装 Apache Fury","type":0,"sectionRef":"#","url":"/zh-CN/docs/start/install","content":"","keywords":"","version":"下一步"},{"title":"Fury Java 安装​","type":1,"pageTitle":"安装 Apache Fury","url":"/zh-CN/docs/start/install#fury-java-安装","content":" 要使用 Maven 添加对 Apache Fury 的依赖，请使用以下配置：  &lt;dependency&gt; &lt;groupId&gt;org.apache.fury&lt;/groupId&gt; &lt;artifactId&gt;fury-core&lt;/artifactId&gt; &lt;version&gt;0.10.3&lt;/version&gt; &lt;/dependency&gt; &lt;!-- row/arrow format support --&gt; &lt;!-- &lt;dependency&gt; &lt;groupId&gt;org.apache.fury&lt;/groupId&gt; &lt;artifactId&gt;fury-format&lt;/artifactId&gt; &lt;version&gt;0.10.3&lt;/version&gt; &lt;/dependency&gt; --&gt;   ","version":"下一步","tagName":"h3"},{"title":"Fury Scala 安装​","type":1,"pageTitle":"安装 Apache Fury","url":"/zh-CN/docs/start/install#fury-scala-安装","content":" 要使用 Maven 添加 scala 2.13 的 Fury scala 依赖，请使用以下配置：  &lt;dependency&gt; &lt;groupId&gt;org.apache.fury&lt;/groupId&gt; &lt;artifactId&gt;fury-scala_2.13&lt;/artifactId&gt; &lt;version&gt;0.10.3&lt;/version&gt; &lt;/dependency&gt;   要使用 Maven 添加 scala 3 的 Fury scala 依赖，请使用以下配置：  &lt;dependency&gt; &lt;groupId&gt;org.apache.fury&lt;/groupId&gt; &lt;artifactId&gt;fury-scala_3&lt;/artifactId&gt; &lt;version&gt;0.10.3&lt;/version&gt; &lt;/dependency&gt;   要使用 sbt 添加 scala 2.13 的 Fury scala 依赖，请使用以下配置：  libraryDependencies += &quot;org.apache.fury&quot; % &quot;fury-scala_2.13&quot; % &quot;0.10.3&quot;   要使用 sbt 添加 scala 3 的 Fury scala 依赖，请使用以下配置：  libraryDependencies += &quot;org.apache.fury&quot; % &quot;fury-scala_3&quot; % &quot;0.10.3&quot;   ","version":"下一步","tagName":"h3"},{"title":"Fury Kotlin 安装​","type":1,"pageTitle":"安装 Apache Fury","url":"/zh-CN/docs/start/install#fury-kotlin-安装","content":" To add a dependency on Fury kotlin with maven, use the following:  &lt;dependency&gt; &lt;groupId&gt;org.apache.fury&lt;/groupId&gt; &lt;artifactId&gt;fury-kotlin&lt;/artifactId&gt; &lt;version&gt;0.10.3&lt;/version&gt; &lt;/dependency&gt;  ","version":"下一步","tagName":"h2"},{"title":"Fury Xlang Serialization Format","type":0,"sectionRef":"#","url":"/zh-CN/docs/specification/fury_xlang_serialization_spec","content":"","keywords":"","version":"下一步"},{"title":"Cross-language Serialization Specification​","type":1,"pageTitle":"Fury Xlang Serialization Format","url":"/zh-CN/docs/specification/fury_xlang_serialization_spec#cross-language-serialization-specification","content":" Format Version History: Version 0.1 - serialization spec formalized  Fury xlang serialization is an automatic object serialization framework that supports reference and polymorphism. Fury will convert an object from/to fury xlang serialization binary format. Fury has two core concepts for xlang serialization:  Fury xlang binary formatFramework implemented in different languages to convert object to/from Fury xlang binary format  The serialization format is a dynamic binary format. The dynamics and reference/polymorphism support make Fury flexible, much more easy to use, but also introduce more complexities compared to static serialization frameworks. So the format will be more complex.  ","version":"下一步","tagName":"h2"},{"title":"Type Systems​","type":1,"pageTitle":"Fury Xlang Serialization Format","url":"/zh-CN/docs/specification/fury_xlang_serialization_spec#type-systems","content":" ","version":"下一步","tagName":"h2"},{"title":"Data Types​","type":1,"pageTitle":"Fury Xlang Serialization Format","url":"/zh-CN/docs/specification/fury_xlang_serialization_spec#data-types","content":" bool: a boolean value (true or false).int8: a 8-bit signed integer.int16: a 16-bit signed integer.int32: a 32-bit signed integer.var_int32: a 32-bit signed integer which use fury var_int32 encoding.int64: a 64-bit signed integer.var_int64: a 64-bit signed integer which use fury PVL encoding.sli_int64: a 64-bit signed integer which use fury SLI encoding.float16: a 16-bit floating point number.float32: a 32-bit floating point number.float64: a 64-bit floating point number including NaN and Infinity.string: a text string encoded using Latin1/UTF16/UTF-8 encoding.enum: a data type consisting of a set of named values. Rust enum with non-predefined field values are not supported as an enum.named_enum: an enum whose value will be serialized as the registered name.struct: a morphic(final) type serialized by Fury Struct serializer. i.e. it doesn't have subclasses. Suppose we're deserializing List&lt;SomeClass&gt;, we can save dynamic serializer dispatch since SomeClass is morphic(final).compatible_struct: a morphic(final) type serialized by Fury compatible Struct serializer.named_struct: a struct whose type mapping will be encoded as a name.named_compatible_struct: a compatible_struct whose type mapping will be encoded as a name.ext: a type which will be serialized by a customized serializer.named_ext: an ext type whose type mapping will be encoded as a name.list: a sequence of objects.set: an unordered set of unique elements.map: a map of key-value pairs. Mutable types such as list/map/set/array/tensor/arrow are not allowed as key of map.duration: an absolute length of time, independent of any calendar/timezone, as a count of nanoseconds.timestamp: a point in time, independent of any calendar/timezone, as a count of nanoseconds. The count is relative to an epoch at UTC midnight on January 1, 1970.local_date: a naive date without timezone. The count is days relative to an epoch at UTC midnight on Jan 1, 1970.decimal: exact decimal value represented as an integer value in two's complement.binary: an variable-length array of bytes.array: only allow 1d numeric components. Other arrays will be taken as List. The implementation should support the interoperability between array and list. bool_array: one dimensional int16 array.int8_array: one dimensional int8 array.int16_array: one dimensional int16 array.int32_array: one dimensional int32 array.int64_array: one dimensional int64 array.float16_array: one dimensional half_float_16 array.float32_array: one dimensional float32 array.float64_array: one dimensional float64 array. tensor: multidimensional array which every sub-array have same size and type.arrow record batch: an arrow record batch object.arrow table: an arrow table object.  Note:  Unsigned int/long are not added here, since not every language support those types.  ","version":"下一步","tagName":"h3"},{"title":"Polymorphisms​","type":1,"pageTitle":"Fury Xlang Serialization Format","url":"/zh-CN/docs/specification/fury_xlang_serialization_spec#polymorphisms","content":" For polymorphism, if one non-final class is registered, and only one subclass is registered, then we can take all elements in List/Map have same type, thus reduce runtime check cost.  Collection/Array polymorphism are not fully supported, since some languages such as golang have only one collection type. If users want to get exactly the type he passed, he must pass that type when deserializing or annotate that type to the field of struct.  ","version":"下一步","tagName":"h3"},{"title":"Type disambiguation​","type":1,"pageTitle":"Fury Xlang Serialization Format","url":"/zh-CN/docs/specification/fury_xlang_serialization_spec#type-disambiguation","content":" Due to differences between type systems of languages, those types can't be mapped one-to-one between languages. When deserializing, Fury use the target data structure type and the data type in the data jointly to determine how to deserialize and populate the target data structure. For example:  class Foo { int[] intArray; Object[] objects; List&lt;Object&gt; objectList; } class Foo2 { int[] intArray; List&lt;Object&gt; objects; List&lt;Object&gt; objectList; }   intArray has an int32_array type. But both objects and objectList fields in the serialize data have list data type. When deserializing, the implementation will create an Object array for objects, but create a ArrayListfor objectList to populate its elements. And the serialized data of Foo can be deserialized into Foo2 too.  Users can also provide meta hints for fields of a type, or the type whole. Here is an example in java which use annotation to provide such information.  @FuryObject(fieldsNullable = false, trackingRef = false) class Foo { @FuryField(trackingRef = false) int[] intArray; @FuryField(polymorphic = true) Object object; @FuryField(tagId = 1, nullable = true) List&lt;Object&gt; objectList; }   Such information can be provided in other languages too:  cpp: use macro and template.golang: use struct tag.python: use typehint.rust: use macro.  ","version":"下一步","tagName":"h3"},{"title":"Type ID​","type":1,"pageTitle":"Fury Xlang Serialization Format","url":"/zh-CN/docs/specification/fury_xlang_serialization_spec#type-id","content":" All internal data types are expressed using an ID in range 0~64. Users can use 0~4096 for representing their types.  ","version":"下一步","tagName":"h3"},{"title":"Type mapping​","type":1,"pageTitle":"Fury Xlang Serialization Format","url":"/zh-CN/docs/specification/fury_xlang_serialization_spec#type-mapping","content":" See Type mapping  ","version":"下一步","tagName":"h3"},{"title":"Spec overview​","type":1,"pageTitle":"Fury Xlang Serialization Format","url":"/zh-CN/docs/specification/fury_xlang_serialization_spec#spec-overview","content":" Here is the overall format:  | fury header | object ref meta | object type meta | object value data |   The data are serialized using little endian byte order overall. If bytes swap is costly for some object, Fury will write the byte order for that object into the data instead of converting it to little endian.  ","version":"下一步","tagName":"h2"},{"title":"Fury header​","type":1,"pageTitle":"Fury Xlang Serialization Format","url":"/zh-CN/docs/specification/fury_xlang_serialization_spec#fury-header","content":" Fury header consists starts one byte:  | 2 bytes | 4 bits | 1 bit | 1 bit | 1 bit | 1 bit | 1 byte | optional 4 bytes | +--------------+---------------+-------+-------+--------+-------+------------+------------------------------------+ | magic number | reserved bits | oob | xlang | endian | null | language | unsigned int for meta start offset |   magic number: used to identify fury serialization protocol, current version use 0x62d4.null flag: 1 when object is null, 0 otherwise. If an object is null, other bits won't be set.endian flag: 1 when data is encoded by little endian, 0 for big endian.xlang flag: 1 when serialization uses xlang format, 0 when serialization uses Fury java format.oob flag: 1 when passed BufferCallback is not null, 0 otherwise.language: the language when serializing objects, such as JAVA, PYTHON, GO, etc. Fury can use this flag to determine whether spend more time on serialization to make the deserialization faster for dynamic languages.  If meta share mode is enabled, an uncompressed unsigned int is appended to indicate the start offset of metadata.  ","version":"下一步","tagName":"h2"},{"title":"Reference Meta​","type":1,"pageTitle":"Fury Xlang Serialization Format","url":"/zh-CN/docs/specification/fury_xlang_serialization_spec#reference-meta","content":" Reference tracking handles whether the object is null, and whether to track reference for the object by writing corresponding flags and maintaining internal state.  Reference flags:  Flag\tByte Value\tDescriptionNULL FLAG\t-3\tThis flag indicates the object is a null value. We don't use another byte to indicate REF, so that we can save one byte. REF FLAG\t-2\tThis flag indicates the object is already serialized previously, and fury will write a ref id with unsigned varint format instead of serialize it again NOT_NULL VALUE FLAG\t-1\tThis flag indicates the object is a non-null value and fury doesn't track ref for this type of object. REF VALUE FLAG\t0\tThis flag indicates the object is referencable and the first time to serialize.  When reference tracking is disabled globally or for specific types, or for certain types within a particular context(e.g., a field of a type), only the NULL and NOT_NULL VALUE flags will be used for reference meta.  For languages which doesn't support reference such as rust, reference tracking must be disabled for correct deserialization by fury rust implementation.  For languages whose object values are not null by default:  In rust, Fury takes Option:None as a null valueIn c++, Fury takes std::nullopt as a null valueIn golang, Fury takes null interface/pointer as a null value  If one want to deserialize in languages like Java/Python/JavaScript, he should mark the type with all fields not-null by default, or using schema-evolution mode to carry the not-null fields info in the data.  ","version":"下一步","tagName":"h2"},{"title":"Type Meta​","type":1,"pageTitle":"Fury Xlang Serialization Format","url":"/zh-CN/docs/specification/fury_xlang_serialization_spec#type-meta","content":" For every type to be serialized, it have a type id to indicate its type.  basic types: the type idenum: Type.ENUM + registered idType.NAMED_ENUM + registered namespace+typename list: Type.Listset: Type.SETmap: Type.MAPext: Type.EXT + registered idType.NAMED_EXT + registered namespace+typename struct: Type.STRUCT + struct metaType.NAMED_STRUCT + struct meta  Every type must be registered with an ID or name first. The registration can be used for security check and type identification.  Struct is a special type, depending whether schema compatibility is enabled, Fury will write struct meta differently.  ","version":"下一步","tagName":"h2"},{"title":"Struct Schema consistent​","type":1,"pageTitle":"Fury Xlang Serialization Format","url":"/zh-CN/docs/specification/fury_xlang_serialization_spec#struct-schema-consistent","content":" If schema consistent mode is enabled globally when creating fury, type meta will be written as a fury unsigned varint of type_id. Schema evolution related meta will be ignored.If schema evolution mode is enabled globally when creating fury, and current class is configured to use schema consistent mode like struct vs table in flatbuffers: Type meta will be add to captured_type_defs: captured_type_defs[type def stub] = map size ahead when registering type.Get index of the meta in captured_type_defs, write that index as | unsigned varint: index |.  ","version":"下一步","tagName":"h3"},{"title":"Struct Schema evolution​","type":1,"pageTitle":"Fury Xlang Serialization Format","url":"/zh-CN/docs/specification/fury_xlang_serialization_spec#struct-schema-evolution","content":" If schema evolution mode is enabled globally when creating fury, and enabled for current type, type meta will be written using one of the following mode. Which mode to use is configured when creating fury.  Normal mode(meta share not enabled): If type meta hasn't been written before, add type defto captured_type_defs: captured_type_defs[type def] = map size.Get index of the meta in captured_type_defs, write that index as | unsigned varint: index |.After finished the serialization of the object graph, fury will start to write captured_type_defs: Firstly, set current to meta start offset of fury header Then write captured_type_defs one by one: buffer.write_var_uint32(len(writting_type_defs) - len(schema_consistent_type_def_stubs)) for type_meta in writting_type_defs: if not type_meta.is_stub(): type_meta.write_type_def(buffer) writing_type_defs = copy(schema_consistent_type_def_stubs) Meta share mode: the writing steps are same as the normal mode, but captured_type_defs will be shared across multiple serializations of different objects. For example, suppose we have a batch to serialize: captured_type_defs = {} stream = ... # add `Type1` to `captured_type_defs` and write `Type1` fury.serialize(stream, [Type1()]) # add `Type2` to `captured_type_defs` and write `Type2`, `Type1` is written before. fury.serialize(stream, [Type1(), Type2()]) # `Type1` and `Type2` are written before, no need to write meta. fury.serialize(stream, [Type1(), Type2()]) Streaming mode(streaming mode doesn't support meta share): If type meta hasn't been written before, the data will be written as: | unsigned varint: 0b11111111 | type def | If type meta has been written before, the data will be written as: | unsigned varint: written index &lt;&lt; 1 | written index is the id in captured_type_defs. With this mode, meta start offset can be omitted.  The normal mode and meta share mode will forbid streaming writing since it needs to look back for update the start offset after the whole object graph writing and meta collecting is finished. Only in this way we can ensure deserialization failure in meta share mode doesn't lost shared meta.  Type Def​  Here we mainly describe the meta layout for schema evolution mode:  | 8 bytes header | variable bytes | variable bytes | +----------------------+--------------------+-------------------+ | global binary header | meta header | fields meta |   For languages which support inheritance, if parent class and subclass has fields with same name, using field in subclass.  Global binary header​  50 bits hash + 1bit compress flag + write fields meta + 12 bits meta size. Right is the lower bits.  lower 12 bits are used to encode meta size. If meta size &gt;= 0b111_1111_1111, then writemeta_ size - 0b111_1111_1111 next.13rd bit is used to indicate whether to write fields meta. When this class is schema-consistent or use registered serializer, fields meta will be skipped. Class Meta will be used for share namespace + type name only.14rd bit is used to indicate whether meta is compressed.Other 50 bits is used to store the unique hash of flags + all layers class meta.  Meta header​  Meta header is a 8 bits number value.  Lowest 5 digits 0b00000~0b11110 are used to record num fields. 0b11111 is preserved to indicate that Fury need to read more bytes for length using Fury unsigned int encoding. Note that num_fields is the number of compatible fields. Users can use tag id to mark some fields as compatible fields in schema consistent context. In such cases, schema consistent fields will be serialized first, then compatible fields will be serialized next. At deserialization, Fury will use fields info of those fields which aren't annotated by tag id for deserializing schema consistent fields, then use fields info in meta for deserializing compatible fields.The 6th bit: 0 for registered by id, 1 for registered by name.Remaining 2 bits are reserved for future extension.  Fields meta​  Format:  | field info: variable bytes | variable bytes | ... | +---------------------------------+-----------------+-----+ | header + type info + field name | next field info | ... |   Field Header​  Field Header is 8 bits, annotation can be used to provide more specific info. If annotation not exists, fury will infer those info automatically.  The format for field header is:  2 bits field name encoding + 4 bits size + nullability flag + ref tracking flag   Detailed spec:  2 bits field name encoding: encoding: UTF8/ALL_TO_LOWER_SPECIAL/LOWER_UPPER_DIGIT_SPECIAL/TAG_IDIf tag id is used, field name will be written by an unsigned varint tag id, and 2 bits encoding will be 11. size of field name: The 4 bits size: 0~14 will be used to indicate length 1~15, the value 15 indicates to read more bytes, the encoding will encode size - 15 as a varint next.If encoding is TAG_ID, then num_bytes of field name will be used to store tag id. ref tracking: when set to 1, ref tracking will be enabled for this field.nullability: when set to 1, this field can be null.  Field Type Info​  Field type info is written as unsigned int8. Detailed id spec is:  For struct registered by id, it will be Type.STRUCT.For struct registered by name, it will be Type.NAMED_STRUCT.For enum registered by id, it will be Type.ENUM.For enum registered by name, it will be Type.NAMED_ENUM.For ext type registered by id, it will be Type.EXT.For ext type registered by name, it will be Type.NAMED_EXT.For list/set type, it will be written as Type.LIST/SET, then write element type recursively.For 1D primitive array type, it will be written as Type.XXX_ARRAY.For multi-dimensional primitive array type with same size on each dim, it will be written as Type.TENSOR.For other array type, it will be written as Type.LIST, then write element type recursively.For map type, it will be written as Type.MAP, then write key and value type recursively.For other types supported by fury directly, it will be fury type id for that type.For other types not determined at compile time, write Type.UNKNOWN instead. For such types, actual type will be written when serializing such field values.  Polymorphism spec:  struct/named_struct/ext/named_ext are taken as polymorphic, the meta for those types are written separately instead of inlining here to reduce meta space cost if object of this type is serialized in current object graph multiple times, and the field value may be null too.enum is taken as morphic, if deserialization doesn't have this field, or the type is not enum, enum value will be skipped.list/map/set are taken as morphic, when serializing values of those type, the concrete types won't be written again.Other types that fury supported are taken as morphic too.  List/Set/Map nested type spec:  list: | list type id | nested type id &lt;&lt; 2 + nullability flag + ref tracking flag | ... multi-layer type info |set: | set type id | nested type id &lt;&lt; 2 + nullability flag + ref tracking flag | ... multi-layer type info |map: | set type id | key type info | value type info | Key type format: | nested type id &lt;&lt; 2 + nullability flag + ref tracking flag | ... multi-layer type info |Value type format: | nested type id &lt;&lt; 2 + nullability flag + ref tracking flag | ... multi-layer type info |  Field Name​  If tag id is set, tag id will be used instead. Otherwise meta string of field name will be written instead.  Field order​  Field order are left as implementation details, which is not exposed to specification, the deserialization need to resort fields based on Fury fields sort algorithms. In this way, fury can compute statistics for field names or types and using a more compact encoding.  ","version":"下一步","tagName":"h3"},{"title":"Extended Type Meta with Inheritance support​","type":1,"pageTitle":"Fury Xlang Serialization Format","url":"/zh-CN/docs/specification/fury_xlang_serialization_spec#extended-type-meta-with-inheritance-support","content":" If one want to support inheritance for struct, one can implement following spec.  ","version":"下一步","tagName":"h2"},{"title":"Schema consistent​","type":1,"pageTitle":"Fury Xlang Serialization Format","url":"/zh-CN/docs/specification/fury_xlang_serialization_spec#schema-consistent","content":" Fields are serialized from parent type to leaf type. Fields are sorted using fury struct fields sort algorithms.  ","version":"下一步","tagName":"h3"},{"title":"Schema Evolution​","type":1,"pageTitle":"Fury Xlang Serialization Format","url":"/zh-CN/docs/specification/fury_xlang_serialization_spec#schema-evolution","content":" Meta layout for schema evolution mode:  | 8 bytes header | variable bytes | variable bytes | variable bytes | variable bytes | +----------------------+----------------+----------------+--------------------+--------------------+ | global binary header | meta header | fields meta | parent meta header | parent fields meta |   Meta header​  Meta header is a 64 bits number value encoded in little endian order.  Lowest 4 digits 0b0000~0b1110 are used to record num classes. 0b1111 is preserved to indicate that Fury need to read more bytes for length using Fury unsigned int encoding. If current type doesn't has parent type, or parent type doesn't have fields to serialize, or we're in a context which serialize fields of current type only, num classes will be 1.The 5th bit is used to indicate whether this type needs schema evolution.Other 56 bits are used to store the unique hash of flags + all layers type meta.  Single layer type meta​  | unsigned varint | var uint | field info: variable bytes | variable bytes | ... | +-----------------+----------+-------------------------------+-----------------+-----+ | num_fields | type id | header + type id + field name | next field info | ... |   Other layers type meta​  Same encoding algorithm as the previous layer.  ","version":"下一步","tagName":"h3"},{"title":"Meta String​","type":1,"pageTitle":"Fury Xlang Serialization Format","url":"/zh-CN/docs/specification/fury_xlang_serialization_spec#meta-string","content":" Meta string is mainly used to encode meta strings such as field names.  ","version":"下一步","tagName":"h2"},{"title":"Encoding Algorithms​","type":1,"pageTitle":"Fury Xlang Serialization Format","url":"/zh-CN/docs/specification/fury_xlang_serialization_spec#encoding-algorithms","content":" String binary encoding algorithm:  Algorithm\tPattern\tDescriptionLOWER_SPECIAL\ta-z._$|\tevery char is written using 5 bits, a-z: 0b00000~0b11001, ._$|: 0b11010~0b11101, prepend one bit at the start to indicate whether strip last char since last byte may have 7 redundant bits(1 indicates strip last char) LOWER_UPPER_DIGIT_SPECIAL\ta-zA-Z0~9._\tevery char is written using 6 bits, a-z: 0b00000~0b11001, A-Z: 0b11010~0b110011, 0~9: 0b110100~0b111101, ._: 0b111110~0b111111, prepend one bit at the start to indicate whether strip last char since last byte may have 7 redundant bits(1 indicates strip last char) UTF-8\tany chars\tUTF-8 encoding  Encoding flags:  Encoding Flag\tPattern\tEncoding AlgorithmLOWER_SPECIAL\tevery char is in a-z._|\tLOWER_SPECIAL FIRST_TO_LOWER_SPECIAL\tevery char is in a-z._ except first char is upper case\treplace first upper case char to lower case, then use LOWER_SPECIAL ALL_TO_LOWER_SPECIAL\tevery char is in a-zA-Z._\treplace every upper case char by | + lower case, then use LOWER_SPECIAL, use this encoding if it's smaller than Encoding LOWER_UPPER_DIGIT_SPECIAL LOWER_UPPER_DIGIT_SPECIAL\tevery char is in a-zA-Z._\tuse LOWER_UPPER_DIGIT_SPECIAL encoding if it's smaller than Encoding FIRST_TO_LOWER_SPECIAL UTF8\tany utf-8 char\tuse UTF-8 encoding Compression\tany utf-8 char\tlossless compression  Notes:  Depending on cases, one can choose encoding flags + data jointly, uses 3 bits of first byte for flags and other bytes for data.  ","version":"下一步","tagName":"h3"},{"title":"Value Format​","type":1,"pageTitle":"Fury Xlang Serialization Format","url":"/zh-CN/docs/specification/fury_xlang_serialization_spec#value-format","content":" ","version":"下一步","tagName":"h2"},{"title":"Basic types​","type":1,"pageTitle":"Fury Xlang Serialization Format","url":"/zh-CN/docs/specification/fury_xlang_serialization_spec#basic-types","content":" bool​  size: 1 byteformat: 0 for false, 1 for true  int8​  size: 1 byteformat: write as pure byte.  int16​  size: 2 bytebyte order: raw bytes of little endian order  unsigned int32​  size: 4 bytebyte order: raw bytes of little endian order  unsigned varint32​  size: 1~5 byteFormat: The most significant bit (MSB) in every byte indicates whether to have the next byte. If first bit is set i.e. b &amp; 0x80 == 0x80, then the next byte should be read until the first bit of the next byte is unset.  signed int32​  size: 4 bytebyte order: raw bytes of little endian order  signed varint32​  size: 1~5 byteFormat: First convert the number into positive unsigned int by (v &lt;&lt; 1) ^ (v &gt;&gt; 31) ZigZag algorithm, then encode it as an unsigned varint.  unsigned int64​  size: 8 bytebyte order: raw bytes of little endian order  unsigned varint64​  size: 1~9 byteFury SLI(Small long as int) Encoding: If long is in [0, 2147483647], encode as 4 bytes int: | little-endian: ((int) value) &lt;&lt; 1 |Otherwise write as 9 bytes: | 0b1 | little-endian 8 bytes long | Fury PVL(Progressive Variable-length Long) Encoding: positive long format: first bit in every byte indicates whether to have the next byte. If first bit is set i.e. b &amp; 0x80 == 0x80, then the next byte should be read until the first bit is unset.  signed int64​  size: 8 bytebyte order: raw bytes of little endian order  signed varint64​  size: 1~9 byteFury SLI(Small long as int) Encoding: If long is in [-1073741824, 1073741823], encode as 4 bytes int: | little-endian: ((int) value) &lt;&lt; 1 |Otherwise write as 9 bytes: | 0b1 | little-endian 8 bytes long | Fury PVL(Progressive Variable-length Long) Encoding: First convert the number into positive unsigned long by (v &lt;&lt; 1) ^ (v &gt;&gt; 63) ZigZag algorithm to reduce cost of small negative numbers, then encoding it as an unsigned long.  float32​  size: 4 byteformat: encode the specified floating-point value according to the IEEE 754 floating-point &quot;single format&quot; bit layout, preserving Not-a-Number (NaN) values, then write as binary by little endian order.  float64​  size: 8 byteformat: encode the specified floating-point value according to the IEEE 754 floating-point &quot;double format&quot; bit layout, preserving Not-a-Number (NaN) values. then write as binary by little endian order.  ","version":"下一步","tagName":"h3"},{"title":"string​","type":1,"pageTitle":"Fury Xlang Serialization Format","url":"/zh-CN/docs/specification/fury_xlang_serialization_spec#string","content":" Format:  | unsigned varint64: size &lt;&lt; 2 `bitor` 2 bits encoding flags | binary data |   size + encoding will be concat as a long and encoded as an unsigned varint64. The little 2 bits is used for encoding: 0 for latin1(ISO-8859-1), 1 for utf-16, 2 for utf-8.encoded string binary data based on encoding: latin/utf-16/utf-8.  Which encoding to choose:  For JDK8: fury detect latin at runtime, if string is latin string, then use latin encoding, otherwise use utf-16.For JDK9+: fury use coder in String object for encoding, latin/utf-16 will be used for encoding.If the string is encoded by utf-8, then fury will use utf-8 to decode the data. Cross-language string serialization of fury uses utf-8 by default.  ","version":"下一步","tagName":"h3"},{"title":"list​","type":1,"pageTitle":"Fury Xlang Serialization Format","url":"/zh-CN/docs/specification/fury_xlang_serialization_spec#list","content":" Format:  | unsigned varint64: length | 1 byte elements header | elements data |   elements header​  In most cases, all elements are same type and not null, elements header will encode those homogeneous information to avoid the cost of writing it for every element. Specifically, there are four kinds of information which will be encoded by elements header, each use one bit:  If track elements ref, use the first bit 0b1 of the header to flag it.If the elements have null, use the second bit 0b10 of the header to flag it. If ref tracking is enabled for this element type, this flag is invalid.If the element types are not the declared type, use the 3rd bit 0b100 of the header to flag it.If the element types are different, use the 4rd bit 0b1000 header to flag it.  By default, all bits are unset, which means all elements won't track ref, all elements are same type, not null and the actual element is the declared type in the custom type field.  The implementation can generate different deserialization code based read header, and look up the generated code from a linear map/list.  elements data​  Based on the elements header, the serialization of elements data may skip ref flag/null flag/element type info.  fury = ... buffer = ... elems = ... if element_type_is_same: if not is_declared_type: fury.write_type(buffer, elem_type) elem_serializer = get_serializer(...) if track_ref: for elem in elems: if not ref_resolver.write_ref_or_null(buffer, elem): elem_serializer.write(buffer, elem) elif has_null: for elem in elems: if elem is None: buffer.write_byte(null_flag) else: buffer.write_byte(not_null_flag) elem_serializer.write(buffer, elem) else: for elem in elems: elem_serializer.write(buffer, elem) else: if track_ref: for elem in elems: fury.write_ref(buffer, elem) elif has_null: for elem in elems: fury.write_nullable(buffer, elem) else: for elem in elems: fury.write_value(buffer, elem)   CollectionSerializer#writeElementscan be taken as an example.  ","version":"下一步","tagName":"h3"},{"title":"array​","type":1,"pageTitle":"Fury Xlang Serialization Format","url":"/zh-CN/docs/specification/fury_xlang_serialization_spec#array","content":" primitive array​  Primitive array are taken as a binary buffer, serialization will just write the length of array size as an unsigned int, then copy the whole buffer into the stream.  Such serialization won't compress the array. If users want to compress primitive array, users need to register custom serializers for such types or mark it as list type.  Tensor​  Tensor is a special primitive multi-dimensional array which all dimensions have same size and type. The serialization format is:  | num_dims(unsigned varint) | shape[0](unsigned varint) | shape[...] | shape[N] | element type | data |   The data is continuous to reduce copy and may zero-copy in some cases.  object array​  Object array is serialized using the list format. Object component type will be taken as list element generic type.  ","version":"下一步","tagName":"h3"},{"title":"map​","type":1,"pageTitle":"Fury Xlang Serialization Format","url":"/zh-CN/docs/specification/fury_xlang_serialization_spec#map","content":" Map uses a chunk by chunk based Format:  | length(unsigned varint) | key value chunk data | ... | key value chunk data |   map key-value chunk data​  Map iteration is too expensive, Fury won't compute the header like for list since it introduceconsiderable overhead. Users can use MapFieldInfo annotation to provide the header in advance. Otherwise Fury will use first key-value pair to predict header optimistically, and update the chunk header if the prediction failed at some pair.  Fury will serialize the map chunk by chunk, every chunk has 255 pairs at most.  | 1 byte | 1 byte | variable bytes | +----------------+----------------+-----------------+ | KV header | chunk size: N | N*2 objects |   KV header:  If track key ref, use the first bit 0b1 of the header to flag it.If the key has null, use the second bit 0b10 of the header to flag it. If ref tracking is enabled for this key type, this flag is invalid.If the actual key type of map is not the declared key type, use the 3rd bit 0b100 of the header to flag it.If track value ref, use the 4th bit 0b1000 of the header to flag it.If the value has null, use the 5th bit 0b10000 of the header to flag it. If ref tracking is enabled for this value type, this flag is invalid.If the value type of map is not the declared value type, use the 6rd bit 0b100000 of the header to flag it.If key or value is null, that key and value will be written as a separate chunk, and chunk size writing will be skipped too.  If streaming write is enabled, which means Fury can't update written chunk size. In such cases, map key-value data format will be:  | 1 byte | variable bytes | +----------------+-----------------+ | KV header | N*2 objects |   KV header will be a header marked by MapFieldInfo in java. For languages such as golang, this can be computed in advance for non-interface types most times. The implementation can generate different deserialization code based read header, and look up the generated code from a linear map/list.  Why serialize chunk by chunk?​  When fury will use first key-value pair to predict header optimistically, it can't know how many pairs have same meta(tracking kef ref, key has null and so on). If we don't write chunk by chunk with max chunk size, we must write at least X bytes to take up a place for later to update the number which has same elements, X is the num_bytes for encoding varint encoding of map size.  And most map size are smaller than 255, if all pairs have same data, the chunk will be 1. This is common in golang/rust, which object are not reference by default.  Also, if only one or two keys have different meta, we can make it into a different chunk, so that most pairs can share meta.  The implementation can accumulate read count with map size to decide whether to read more chunks.  ","version":"下一步","tagName":"h3"},{"title":"enum​","type":1,"pageTitle":"Fury Xlang Serialization Format","url":"/zh-CN/docs/specification/fury_xlang_serialization_spec#enum","content":" Enums are serialized as an unsigned var int. If the order of enum values change, the deserialized enum value may not be the value users expect. In such cases, users must register enum serializer by make it write enum value as an enumerated string with unique hash disabled.  ","version":"下一步","tagName":"h3"},{"title":"decimal​","type":1,"pageTitle":"Fury Xlang Serialization Format","url":"/zh-CN/docs/specification/fury_xlang_serialization_spec#decimal","content":" Not supported for now.  ","version":"下一步","tagName":"h3"},{"title":"struct​","type":1,"pageTitle":"Fury Xlang Serialization Format","url":"/zh-CN/docs/specification/fury_xlang_serialization_spec#struct","content":" Struct means object of class/pojo/struct/bean/record type. Struct will be serialized by writing its fields data in fury order.  Depending on schema compatibility, structs will have different formats.  field order​  Field will be ordered as following, every group of fields will have its own order:  primitive fields: larger size type first, smaller later, variable size type last.when same size, sort by type idwhen same size and type id, sort by snake case field nametypes: bool/int8/int16/int32/varint32/int64/varint64/sliint64/float16/float32/float64 nullable primitive fields: same order as primitive fieldsmorphic fields: same type together, then sorted by field name lexicographically using snake case style.unknown fields: same sort algorithms as morphic fieldslist fields: same sort algorithms as morphic fieldsset fields: same sort algorithms as morphic fieldsmap fields: same sort algorithms as morphic fields  Field order​  Fields in a struct are sorted in a ascending order by:  primitive fields first: bool/int8/int16/int32/varint32/int64/varint64/sliint64/float16/float32/float64, sorted by type id.nullable primitive fieldsmorphic types except list/set/mapunknown typeslist typesset typesmap types  If two fields have same type, then sort by snake_case styled field name.  schema consistent​  Object will be written as:  | 4 byte | variable bytes | +---------------+------------------+ | type hash | field values |   Type hash is used to check the type schema consistency across languages. Type hash will be the first 32 bits of 56 bits value of the type meta.  Object fields will be serialized one by one using following format:  not null primitive field value: | var bytes | +----------------+ | value data | +----------------+ nullable primitive field value: | one byte | var bytes | +-----------+---------------+ | null flag | field value | +-----------+---------------+ field value of final type with ref tracking: | var bytes | var objects | +-----------+-------------+ | ref meta | value data | +-----------+-------------+ field value of final type without ref tracking: | one byte | var objects | +-----------+-------------+ | null flag | field value | +-----------+-------------+ field value of non-final type with ref tracking: | one byte | var bytes | var objects | +-----------+-------------+-------------+ | ref meta | type meta | value data | +-----------+-------------+-------------+ field value of non-final type without ref tracking: | one byte | var bytes | var objects | +-----------+------------+------------+ | null flag | type meta | value data | +-----------+------------+------------+   Schema evolution​  Schema evolution have similar format as schema consistent mode for object except:  For the object type, schema consistent mode will write type by id only, but schema evolution mode will write type consisting of field names, types and other meta too, see Type meta.Type meta of final custom type needs to be written too, because peers may not have this type defined.  ","version":"下一步","tagName":"h3"},{"title":"Type​","type":1,"pageTitle":"Fury Xlang Serialization Format","url":"/zh-CN/docs/specification/fury_xlang_serialization_spec#type","content":" Type will be serialized using type meta format.  ","version":"下一步","tagName":"h3"},{"title":"Implementation guidelines​","type":1,"pageTitle":"Fury Xlang Serialization Format","url":"/zh-CN/docs/specification/fury_xlang_serialization_spec#implementation-guidelines","content":" ","version":"下一步","tagName":"h2"},{"title":"How to reduce memory read/write code​","type":1,"pageTitle":"Fury Xlang Serialization Format","url":"/zh-CN/docs/specification/fury_xlang_serialization_spec#how-to-reduce-memory-readwrite-code","content":" Try to merge multiple bytes into an int/long write before writing to reduce memory IO and bound check cost.Read multiple bytes as an int/long, then split into multiple bytes to reduce memory IO and bound check cost.Try to use one varint/long to write flags and length together to save one byte cost and reduce memory io.Condition branches are less expensive compared to memory IO cost unless there are too many branches.  ","version":"下一步","tagName":"h3"},{"title":"Fast deserialization for static languages without runtime codegen support​","type":1,"pageTitle":"Fury Xlang Serialization Format","url":"/zh-CN/docs/specification/fury_xlang_serialization_spec#fast-deserialization-for-static-languages-without-runtime-codegen-support","content":" For type evolution, the serializer will encode the type meta into the serialized data. The deserializer will compare this meta with class meta in the current process, and use the diff to determine how to deserialize the data.  For java/javascript/python, we can use the diff to generate serializer code at runtime and load it as class/function for deserialization. In this way, the type evolution will be as fast as type consist mode.  For C++/Rust, we can't generate the serializer code at runtime. So we need to generate the code at compile-time using meta programming. But at that time, we don't know the type schema in other processes, so we can't generate the serializer code for such inconsistent types. We may need to generate the code which has a loop and compare field name one by one to decide whether to deserialize and assign the field or skip the field value.  One fast way is that we can optimize the string comparison into jump instructions:  Assume the current type has n fields, and the peer type has n1 fields.Generate an auto growing field id from 0 for every sorted field in the current type at the compile time.Compare the received type meta with current type, generate same id if the field name is same, otherwise generate an auto growing id starting from n, cache this meta at runtime.Iterate the fields of received type meta, use a switch to compare the field id to deserialize data and assign/skip field value. Continuous field id will be optimized into jump in switch block, so it will very fast.  Here is an example, suppose process A has a class Foo with version 1 defined as Foo1, process B has a class Foowith version 2 defined as Foo2:  // class Foo with version 1 class Foo1 { int32_t v1; // id 0 std::string v2; // id 1 }; // class Foo with version 2 class Foo2 { // id 0, but will have id 2 in process A bool v0; // id 1, but will have id 0 in process A int32_t v1; // id 2, but will have id 3 in process A int64_t long_value; // id 3, but will have id 1 in process A std::string v2; // id 4, but will have id 4 in process A std::vector&lt;std::string&gt; list; };   When process A received serialized Foo2 from process B, here is how it deserialize the data:  Foo1 foo1 = ...; const std::vector&lt;fury::FieldInfo&gt; &amp;field_infos = type_meta.field_infos; for (const auto &amp;field_info : field_infos) { switch (field_info.field_id) { case 0: foo1.v1 = buffer.read_varint32(); break; case 1: foo1.v2 = fury.read_string(); break; default: fury.skip_data(field_info); } }  ","version":"下一步","tagName":"h3"},{"title":"Apache Fury 使用","type":0,"sectionRef":"#","url":"/zh-CN/docs/start/usage","content":"","keywords":"","version":"下一步"},{"title":"Java 序列化​","type":1,"pageTitle":"Apache Fury 使用","url":"/zh-CN/docs/start/usage#java-序列化","content":" import java.util.List; import java.util.Arrays; import io.fury.*; public class Example { public static void main(String[] args) { SomeClass object = new SomeClass(); // Note that Fury instances should be reused between // multiple serializations of different objects. Fury fury = Fury.builder().withLanguage(Language.JAVA) // Allow to deserialize objects unknown types, // more flexible but less secure. // .requireClassRegistration(false) .build(); // Registering types can reduce class name serialization overhead, but not mandatory. // If secure mode enabled, all custom types must be registered. fury.register(SomeClass.class); byte[] bytes = fury.serialize(object); System.out.println(fury.deserialize(bytes)); } }   ","version":"下一步","tagName":"h2"},{"title":"Scala序列化​","type":1,"pageTitle":"Apache Fury 使用","url":"/zh-CN/docs/start/usage#scala序列化","content":" import org.apache.fury.Fury import org.apache.fury.serializer.scala.ScalaSerializers case class Person(name: String, id: Long, github: String) case class Point(x : Int, y : Int, z : Int) object ScalaExample { val fury: Fury = Fury.builder().withScalaOptimizationEnabled(true).build() // Register optimized fury serializers for scala ScalaSerializers.registerSerializers(fury) fury.register(classOf[Person]) fury.register(classOf[Point]) def main(args: Array[String]): Unit = { val p = Person(&quot;Shawn Yang&quot;, 1, &quot;https://github.com/chaokunyang&quot;) println(fury.deserialize(fury.serialize(p))) println(fury.deserialize(fury.serialize(Point(1, 2, 3)))) } } ## Kotlin序列化 ```kotlin import org.apache.fury.Fury import org.apache.fury.ThreadSafeFury import org.apache.fury.serializer.kotlin.KotlinSerializers data class Person(val name: String, val id: Long, val github: String) data class Point(val x : Int, val y : Int, val z : Int) fun main(args: Array&lt;String&gt;) { // 注意: 下面的Fury初始化代码应该只执行一次，而不是在每次序列化前都运行 val fury: ThreadSafeFury = Fury.builder().requireClassRegistration(true).buildThreadSafeFury() KotlinSerializers.registerSerializers(fury) fury.register(Person::class.java) fury.register(Point::class.java) val p = Person(&quot;Shawn Yang&quot;, 1, &quot;https://github.com/chaokunyang&quot;) println(fury.deserialize(fury.serialize(p))) println(fury.deserialize(fury.serialize(Point(1, 2, 3)))) }   ","version":"下一步","tagName":"h2"},{"title":"跨语言序列化​","type":1,"pageTitle":"Apache Fury 使用","url":"/zh-CN/docs/start/usage#跨语言序列化","content":" ","version":"下一步","tagName":"h2"},{"title":"Java​","type":1,"pageTitle":"Apache Fury 使用","url":"/zh-CN/docs/start/usage#java","content":" import com.google.common.collect.ImmutableMap; import io.fury.*; import java.util.Map; public class ReferenceExample { public static class SomeClass { SomeClass f1; Map&lt;String, String&gt; f2; Map&lt;String, String&gt; f3; } public static Object createObject() { SomeClass obj = new SomeClass(); obj.f1 = obj; obj.f2 = ImmutableMap.of(&quot;k1&quot;, &quot;v1&quot;, &quot;k2&quot;, &quot;v2&quot;); obj.f3 = obj.f2; return obj; } // mvn exec:java -Dexec.mainClass=&quot;io.fury.examples.ReferenceExample&quot; public static void main(String[] args) { Fury fury = Fury.builder().withLanguage(Language.XLANG) .withRefTracking(true).build(); fury.register(SomeClass.class, &quot;example.SomeClass&quot;); byte[] bytes = fury.serialize(createObject()); // bytes can be data serialized by other languages. System.out.println(fury.deserialize(bytes)); ; } }   ","version":"下一步","tagName":"h3"},{"title":"Python​","type":1,"pageTitle":"Apache Fury 使用","url":"/zh-CN/docs/start/usage#python","content":" from typing import Dict import pyfury class SomeClass: f1: &quot;SomeClass&quot; f2: Dict[str, str] f3: Dict[str, str] fury = pyfury.Fury(ref_tracking=True) fury.register_class(SomeClass, &quot;example.SomeClass&quot;) obj = SomeClass() obj.f2 = {&quot;k1&quot;: &quot;v1&quot;, &quot;k2&quot;: &quot;v2&quot;} obj.f1, obj.f3 = obj, obj.f2 data = fury.serialize(obj) # bytes can be data serialized by other languages. print(fury.deserialize(data))   ","version":"下一步","tagName":"h3"},{"title":"Golangs​","type":1,"pageTitle":"Apache Fury 使用","url":"/zh-CN/docs/start/usage#golangs","content":" package main import ( &quot;fmt&quot; furygo &quot;github.com/apache/fury/go/fury&quot; ) func main() { type SomeClass struct { F1 *SomeClass F2 map[string]string F3 map[string]string } fury := furygo.NewFury(true) if err := fury.RegisterTagType(&quot;example.SomeClass&quot;, SomeClass{}); err != nil { panic(err) } value := &amp;SomeClass{F2: map[string]string{&quot;k1&quot;: &quot;v1&quot;, &quot;k2&quot;: &quot;v2&quot;}} value.F3 = value.F2 value.F1 = value bytes, err := fury.Marshal(value) if err != nil { } var newValue interface{} // bytes can be data serialized by other languages. if err := fury.Unmarshal(bytes, &amp;newValue); err != nil { panic(err) } fmt.Println(newValue) }   ","version":"下一步","tagName":"h3"},{"title":"JavaScript​","type":1,"pageTitle":"Apache Fury 使用","url":"/zh-CN/docs/start/usage#javascript","content":" import Fury, { Type } from '@furyjs/fury'; /** * @furyjs/hps use v8's fast-calls-api that can be called directly by jit, ensure that the version of Node is 20 or above. * Experimental feature, installation success cannot be guaranteed at this moment * If you are unable to install the module, replace it with `const hps = null;` **/ import hps from '@furyjs/hps'; // Now we describe data structures using JSON, but in the future, we will use more ways. const description = Type.object('example.foo', { foo: Type.string(), }); const fury = new Fury({ hps }); const { serialize, deserialize } = fury.registerSerializer(description); const input = serialize({ foo: 'hello fury' }); const result = deserialize(input); console.log(result);   ","version":"下一步","tagName":"h3"},{"title":"Rust​","type":1,"pageTitle":"Apache Fury 使用","url":"/zh-CN/docs/start/usage#rust","content":" use fury::{from_buffer, to_buffer, Fury}; #[derive(Fury, Debug, PartialEq)] #[tag(&quot;example.foo&quot;)] struct Animal { name: String, category: String, } #[derive(Fury, Debug, PartialEq)] #[tag(&quot;example.bar&quot;)] struct Person { name: String, age: u32, pets: Vec&lt;Animal&gt;, } fn main() { let penson = Person { name: &quot;hello&quot;.to_string(), age: 12, pets: vec![ Animal { name: &quot;world1&quot;.to_string(), category: &quot;cat&quot;.to_string(), }, Animal { name: &quot;world2&quot;.to_string(), category: &quot;dog&quot;.to_string(), }, ], }; let bin = to_buffer(&amp;penson); let obj: Person = from_buffer(&amp;bin).expect(&quot;should success&quot;); assert_eq!(obj, penson); }  ","version":"下一步","tagName":"h3"},{"title":"多语言序列化指南","type":0,"sectionRef":"#","url":"/zh-CN/docs/guide/xlang_object_graph_guide","content":"","keywords":"","version":"下一步"},{"title":"跨语言对象图序列化​","type":1,"pageTitle":"多语言序列化指南","url":"/zh-CN/docs/guide/xlang_object_graph_guide#跨语言对象图序列化","content":" ","version":"下一步","tagName":"h2"},{"title":"序列化内置类型​","type":1,"pageTitle":"多语言序列化指南","url":"/zh-CN/docs/guide/xlang_object_graph_guide#序列化内置类型","content":" Apache Fury可以自动序列化编程语言的常见数据类型：primitive numeric types, string, binary, array, list, map 等。  Java  import org.apache.fury.*; import org.apache.fury.config.*; import java.util.*; public class Example1 { public static void main(String[] args) { Fury fury = Fury.builder().withLanguage(Language.XLANG).build(); List&lt;Object&gt; list = ofArrayList(true, false, &quot;str&quot;, -1.1, 1, new int[100], new double[20]); byte[] bytes = fury.serialize(list); // bytes can be data serialized by other languages. fury.deserialize(bytes); Map&lt;Object, Object&gt; map = new HashMap&lt;&gt;(); map.put(&quot;k1&quot;, &quot;v1&quot;); map.put(&quot;k2&quot;, list); map.put(&quot;k3&quot;, -1); bytes = fury.serialize(map); // bytes can be data serialized by other languages. fury.deserialize(bytes); } }   Python  import pyfury import numpy as np fury = pyfury.Fury() object_list = [True, False, &quot;str&quot;, -1.1, 1, np.full(100, 0, dtype=np.int32), np.full(20, 0.0, dtype=np.double)] data = fury.serialize(object_list) # bytes can be data serialized by other languages. new_list = fury.deserialize(data) object_map = {&quot;k1&quot;: &quot;v1&quot;, &quot;k2&quot;: object_list, &quot;k3&quot;: -1} data = fury.serialize(object_map) # bytes can be data serialized by other languages. new_map = fury.deserialize(data) print(new_map)   Golang  package main import furygo &quot;github.com/apache/fury/fury/go/fury&quot; import &quot;fmt&quot; func main() { list := []interface{}{true, false, &quot;str&quot;, -1.1, 1, make([]int32, 10), make([]float64, 20)} fury := furygo.NewFury() bytes, err := fury.Marshal(list) if err != nil { panic(err) } var newValue interface{} // bytes can be data serialized by other languages. if err := fury.Unmarshal(bytes, &amp;newValue); err != nil { panic(err) } fmt.Println(newValue) dict := map[string]interface{}{ &quot;k1&quot;: &quot;v1&quot;, &quot;k2&quot;: list, &quot;k3&quot;: -1, } bytes, err = fury.Marshal(dict) if err != nil { panic(err) } // bytes can be data serialized by other languages. if err := fury.Unmarshal(bytes, &amp;newValue); err != nil { panic(err) } fmt.Println(newValue) }   JavaScript  import Fury from '@furyjs/fury'; /** * @furyjs/hps use v8's fast-calls-api that can be called directly by jit, ensure that the version of Node is 20 or above. * Experimental feature, installation success cannot be guaranteed at this moment * If you are unable to install the module, replace it with `const hps = null;` **/ import hps from '@furyjs/hps'; const fury = new Fury({ hps }); const input = fury.serialize('hello fury'); const result = fury.deserialize(input); console.log(result);   Rust  use chrono::{NaiveDate, NaiveDateTime}; use fury::{from_buffer, to_buffer, Fury}; use std::collections::HashMap; fn run() { let bin: Vec&lt;u8&gt; = to_buffer(&amp;&quot;hello&quot;.to_string()); let obj: String = from_buffer(&amp;bin).expect(&quot;should success&quot;); assert_eq!(&quot;hello&quot;.to_string(), obj); }   ","version":"下一步","tagName":"h3"},{"title":"序列化自定义类型​","type":1,"pageTitle":"多语言序列化指南","url":"/zh-CN/docs/guide/xlang_object_graph_guide#序列化自定义类型","content":" 序列化用户定义的类型需要使用注册 API 注册自定义类型，以便在不同语言中建立类型之间的映射关系。  Java  import org.apache.fury.*; import org.apache.fury.config.*; import java.util.*; public class Example2 { public static class SomeClass1 { Object f1; Map&lt;Byte, Integer&gt; f2; } public static class SomeClass2 { Object f1; String f2; List&lt;Object&gt; f3; Map&lt;Byte, Integer&gt; f4; Byte f5; Short f6; Integer f7; Long f8; Float f9; Double f10; short[] f11; List&lt;Short&gt; f12; } public static Object createObject() { SomeClass1 obj1 = new SomeClass1(); obj1.f1 = true; obj1.f2 = ofHashMap((byte) -1, 2); SomeClass2 obj = new SomeClass2(); obj.f1 = obj1; obj.f2 = &quot;abc&quot;; obj.f3 = ofArrayList(&quot;abc&quot;, &quot;abc&quot;); obj.f4 = ofHashMap((byte) 1, 2); obj.f5 = Byte.MAX_VALUE; obj.f6 = Short.MAX_VALUE; obj.f7 = Integer.MAX_VALUE; obj.f8 = Long.MAX_VALUE; obj.f9 = 1.0f / 2; obj.f10 = 1 / 3.0; obj.f11 = new short[]{(short) 1, (short) 2}; obj.f12 = ofArrayList((short) -1, (short) 4); return obj; } // mvn exec:java -Dexec.mainClass=&quot;org.apache.fury.examples.Example2&quot; public static void main(String[] args) { Fury fury = Fury.builder().withLanguage(Language.XLANG).build(); fury.register(SomeClass1.class, &quot;example.SomeClass1&quot;); fury.register(SomeClass2.class, &quot;example.SomeClass2&quot;); byte[] bytes = fury.serialize(createObject()); // bytes can be data serialized by other languages. System.out.println(fury.deserialize(bytes)); } }   Python  from dataclasses import dataclass from typing import List, Dict, Any import pyfury, array @dataclass class SomeClass1: f1: Any f2: Dict[pyfury.Int8Type, pyfury.Int32Type] @dataclass class SomeClass2: f1: Any = None f2: str = None f3: List[str] = None f4: Dict[pyfury.Int8Type, pyfury.Int32Type] = None f5: pyfury.Int8Type = None f6: pyfury.Int16Type = None f7: pyfury.Int32Type = None # int type will be taken as `pyfury.Int64Type`. # use `pyfury.Int32Type` for type hint if peer # are more narrow type. f8: int = None f9: pyfury.Float32Type = None # float type will be taken as `pyfury.Float64Type` f10: float = None f11: pyfury.Int16ArrayType = None f12: List[pyfury.Int16Type] = None if __name__ == &quot;__main__&quot;: f = pyfury.Fury() f.register_class(SomeClass1, type_tag=&quot;example.SomeClass1&quot;) f.register_class(SomeClass2, type_tag=&quot;example.SomeClass2&quot;) obj1 = SomeClass1(f1=True, f2={-1: 2}) obj = SomeClass2( f1=obj1, f2=&quot;abc&quot;, f3=[&quot;abc&quot;, &quot;abc&quot;], f4={1: 2}, f5=2 ** 7 - 1, f6=2 ** 15 - 1, f7=2 ** 31 - 1, f8=2 ** 63 - 1, f9=1.0 / 2, f10=1 / 3.0, f11=array.array(&quot;h&quot;, [1, 2]), f12=[-1, 4], ) data = f.serialize(obj) # bytes can be data serialized by other languages. print(f.deserialize(data))   Golang  package main import furygo &quot;github.com/apache/fury/fury/go/fury&quot; import &quot;fmt&quot; func main() { type SomeClass1 struct { F1 interface{} F2 string F3 []interface{} F4 map[int8]int32 F5 int8 F6 int16 F7 int32 F8 int64 F9 float32 F10 float64 F11 []int16 F12 fury.Int16Slice } type SomeClas2 struct { F1 interface{} F2 map[int8]int32 } fury := furygo.NewFury() if err := fury.RegisterTagType(&quot;example.SomeClass1&quot;, SomeClass1{}); err != nil { panic(err) } if err := fury.RegisterTagType(&quot;example.SomeClass2&quot;, SomeClass2{}); err != nil { panic(err) } obj1 := &amp;SomeClass1{} obj1.F1 = true obj1.F2 = map[int8]int32{-1: 2} obj := &amp;SomeClass1{} obj.F1 = obj1 obj.F2 = &quot;abc&quot; obj.F3 = []interface{}{&quot;abc&quot;, &quot;abc&quot;} f4 := map[int8]int32{1: 2} obj.F4 = f4 obj.F5 = fury.MaxInt8 obj.F6 = fury.MaxInt16 obj.F7 = fury.MaxInt32 obj.F8 = fury.MaxInt64 obj.F9 = 1.0 / 2 obj.F10 = 1 / 3.0 obj.F11 = []int16{1, 2} obj.F12 = []int16{-1, 4} bytes, err := fury.Marshal(obj); if err != nil { panic(err) } var newValue interface{} // bytes can be data serialized by other languages. if err := fury.Unmarshal(bytes, &amp;newValue); err != nil { panic(err) } fmt.Println(newValue) }   JavaScript  import Fury, { Type, InternalSerializerType } from '@furyjs/fury'; /** * @furyjs/hps use v8's fast-calls-api that can be called directly by jit, ensure that the version of Node is 20 or above. * Experimental feature, installation success cannot be guaranteed at this moment * If you are unable to install the module, replace it with `const hps = null;` **/ import hps from '@furyjs/hps'; // Now we describe data structures using JSON, but in the future, we will use more ways. const description = Type.object('example.foo', { foo: Type.string(), }); const fury = new Fury({ hps }); const { serialize, deserialize } = fury.registerSerializer(description); const input = serialize({ foo: 'hello fury' }); const result = deserialize(input); console.log(result);   Rust  use chrono::{NaiveDate, NaiveDateTime}; use fury::{from_buffer, to_buffer, Fury}; use std::collections::HashMap; #[test] fn complex_struct() { #[derive(Fury, Debug, PartialEq)] #[tag(&quot;example.foo2&quot;)] struct Animal { category: String, } #[derive(Fury, Debug, PartialEq)] #[tag(&quot;example.foo&quot;)] struct Person { c1: Vec&lt;u8&gt;, // binary c2: Vec&lt;i16&gt;, // primitive array animal: Vec&lt;Animal&gt;, c3: Vec&lt;Vec&lt;u8&gt;&gt;, name: String, c4: HashMap&lt;String, String&gt;, age: u16, op: Option&lt;String&gt;, op2: Option&lt;String&gt;, date: NaiveDate, time: NaiveDateTime, c5: f32, c6: f64, } let person: Person = Person { c1: vec![1, 2, 3], c2: vec![5, 6, 7], c3: vec![vec![1, 2], vec![1, 3]], animal: vec![Animal { category: &quot;Dog&quot;.to_string(), }], c4: HashMap::from([ (&quot;hello1&quot;.to_string(), &quot;hello2&quot;.to_string()), (&quot;hello2&quot;.to_string(), &quot;hello3&quot;.to_string()), ]), age: 12, name: &quot;helo&quot;.to_string(), op: Some(&quot;option&quot;.to_string()), op2: None, date: NaiveDate::from_ymd_opt(2025, 12, 12).unwrap(), time: NaiveDateTime::from_timestamp_opt(1689912359, 0).unwrap(), c5: 2.0, c6: 4.0, }; let bin: Vec&lt;u8&gt; = to_buffer(&amp;person); let obj: Person = from_buffer(&amp;bin).expect(&quot;should success&quot;); assert_eq!(person, obj); }   ","version":"下一步","tagName":"h3"},{"title":"序列化共享引用和循环引用​","type":1,"pageTitle":"多语言序列化指南","url":"/zh-CN/docs/guide/xlang_object_graph_guide#序列化共享引用和循环引用","content":" 共享引用和循环引用可自动序列化，不会出现重复数据或递归错误。  Java  import org.apache.fury.*; import org.apache.fury.config.*; import java.util.*; public class ReferenceExample { public static class SomeClass { SomeClass f1; Map&lt;String, String&gt; f2; Map&lt;String, String&gt; f3; } public static Object createObject() { SomeClass obj = new SomeClass(); obj.f1 = obj; obj.f2 = ofHashMap(&quot;k1&quot;, &quot;v1&quot;, &quot;k2&quot;, &quot;v2&quot;); obj.f3 = obj.f2; return obj; } // mvn exec:java -Dexec.mainClass=&quot;org.apache.fury.examples.ReferenceExample&quot; public static void main(String[] args) { Fury fury = Fury.builder().withLanguage(Language.XLANG) .withRefTracking(true).build(); fury.register(SomeClass.class, &quot;example.SomeClass&quot;); byte[] bytes = fury.serialize(createObject()); // bytes can be data serialized by other languages. System.out.println(fury.deserialize(bytes)); } }   Python  from typing import Dict import pyfury class SomeClass: f1: &quot;SomeClass&quot; f2: Dict[str, str] f3: Dict[str, str] fury = pyfury.Fury(ref_tracking=True) fury.register_class(SomeClass, type_tag=&quot;example.SomeClass&quot;) obj = SomeClass() obj.f2 = {&quot;k1&quot;: &quot;v1&quot;, &quot;k2&quot;: &quot;v2&quot;} obj.f1, obj.f3 = obj, obj.f2 data = fury.serialize(obj) # bytes can be data serialized by other languages. print(fury.deserialize(data))   Golang  package main import furygo &quot;github.com/apache/fury/fury/go/fury&quot; import &quot;fmt&quot; func main() { type SomeClass struct { F1 *SomeClass F2 map[string]string F3 map[string]string } fury := furygo.NewFury(true) if err := fury.RegisterTagType(&quot;example.SomeClass&quot;, SomeClass{}); err != nil { panic(err) } value := &amp;SomeClass{F2: map[string]string{&quot;k1&quot;: &quot;v1&quot;, &quot;k2&quot;: &quot;v2&quot;}} value.F3 = value.F2 value.F1 = value bytes, err := fury.Marshal(value) if err != nil { } var newValue interface{} // bytes can be data serialized by other languages. if err := fury.Unmarshal(bytes, &amp;newValue); err != nil { panic(err) } fmt.Println(newValue) }   JavaScript  import Fury, { Type } from '@furyjs/fury'; /** * @furyjs/hps use v8's fast-calls-api that can be called directly by jit, ensure that the version of Node is 20 or above. * Experimental feature, installation success cannot be guaranteed at this moment * If you are unable to install the module, replace it with `const hps = null;` **/ import hps from '@furyjs/hps'; const description = Type.object('example.foo', { foo: Type.string(), bar: Type.object('example.foo'), }); const fury = new Fury({ hps }); const { serialize, deserialize } = fury.registerSerializer(description); const data: any = { foo: 'hello fury', }; data.bar = data; const input = serialize(data); const result = deserialize(input); console.log(result.bar.foo === result.foo);   JavaScriptReference cannot be implemented because of rust ownership restrictions  ","version":"下一步","tagName":"h3"},{"title":"Zero-Copy Serialization​","type":1,"pageTitle":"多语言序列化指南","url":"/zh-CN/docs/guide/xlang_object_graph_guide#zero-copy-serialization","content":" Java  import org.apache.fury.*; import org.apache.fury.config.*; import org.apache.fury.serializers.BufferObject; import org.apache.fury.memory.MemoryBuffer; import java.util.*; import java.util.stream.Collectors; public class ZeroCopyExample { // mvn exec:java -Dexec.mainClass=&quot;io.ray.fury.examples.ZeroCopyExample&quot; public static void main(String[] args) { Fury fury = Fury.builder().withLanguage(Language.XLANG).build(); List&lt;Object&gt; list = ofArrayList(&quot;str&quot;, new byte[1000], new int[100], new double[100]); Collection&lt;BufferObject&gt; bufferObjects = new ArrayList&lt;&gt;(); byte[] bytes = fury.serialize(list, e -&gt; !bufferObjects.add(e)); // bytes can be data serialized by other languages. List&lt;MemoryBuffer&gt; buffers = bufferObjects.stream() .map(BufferObject::toBuffer).collect(Collectors.toList()); System.out.println(fury.deserialize(bytes, buffers)); } }   Python  import array import pyfury import numpy as np fury = pyfury.Fury() list_ = [&quot;str&quot;, bytes(bytearray(1000)), array.array(&quot;i&quot;, range(100)), np.full(100, 0.0, dtype=np.double)] serialized_objects = [] data = fury.serialize(list_, buffer_callback=serialized_objects.append) buffers = [o.to_buffer() for o in serialized_objects] # bytes can be data serialized by other languages. print(fury.deserialize(data, buffers=buffers))   Golang  package main import furygo &quot;github.com/apache/fury/fury/go/fury&quot; import &quot;fmt&quot; func main() { fury := furygo.NewFury() list := []interface{}{&quot;str&quot;, make([]byte, 1000)} buf := fury.NewByteBuffer(nil) var bufferObjects []fury.BufferObject fury.Serialize(buf, list, func(o fury.BufferObject) bool { bufferObjects = append(bufferObjects, o) return false }) var newList []interface{} var buffers []*fury.ByteBuffer for _, o := range bufferObjects { buffers = append(buffers, o.ToBuffer()) } if err := fury.Deserialize(buf, &amp;newList, buffers); err != nil { panic(err) } fmt.Println(newList) }   JavaScript  // Coming soon  ","version":"下一步","tagName":"h3"}],"options":{"id":"default"}}