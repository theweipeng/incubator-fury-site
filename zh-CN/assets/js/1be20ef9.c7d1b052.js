"use strict";(self.webpackChunkfury_site=self.webpackChunkfury_site||[]).push([[7425],{13249:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>h,frontMatter:()=>o,metadata:()=>t,toc:()=>c});var r=i(85893),a=i(11151);const o={title:"GraalVM Guide",sidebar_position:6,id:"graalvm_guide",license:'Licensed to the Apache Software Foundation (ASF) under one or more\ncontributor license agreements.  See the NOTICE file distributed with\nthis work for additional information regarding copyright ownership.\nThe ASF licenses this file to You under the Apache License, Version 2.0\n(the "License"); you may not use this file except in compliance with\nthe License.  You may obtain a copy of the License at\n\n   http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an "AS IS" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n'},s=void 0,t={id:"guide/graalvm_guide",title:"GraalVM Guide",description:"GraalVM Native Image",source:"@site/i18n/zh-CN/docusaurus-plugin-content-docs/current/guide/graalvm_guide.md",sourceDirName:"guide",slug:"/guide/graalvm_guide",permalink:"/zh-CN/docs/guide/graalvm_guide",draft:!1,unlisted:!1,editUrl:"https://github.com/apache/fory-site/tree/main/i18n/zh-CN/docusaurus-plugin-content-docs/current/guide/graalvm_guide.md",tags:[],version:"current",sidebarPosition:6,frontMatter:{title:"GraalVM Guide",sidebar_position:6,id:"graalvm_guide",license:'Licensed to the Apache Software Foundation (ASF) under one or more\ncontributor license agreements.  See the NOTICE file distributed with\nthis work for additional information regarding copyright ownership.\nThe ASF licenses this file to You under the Apache License, Version 2.0\n(the "License"); you may not use this file except in compliance with\nthe License.  You may obtain a copy of the License at\n\n   http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an "AS IS" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n'}},l={},c=[{value:"GraalVM Native Image",id:"graalvm-native-image",level:2},{value:"Not thread-safe Fory",id:"not-thread-safe-fory",level:2},{value:"Thread-safe Fory",id:"thread-safe-fory",level:2},{value:"Framework Integration",id:"framework-integration",level:2},{value:"Benchmark",id:"benchmark",level:2},{value:"Struct Benchmark",id:"struct-benchmark",level:3},{value:"Class Fields",id:"class-fields",level:4},{value:"Benchmark Results",id:"benchmark-results",level:4},{value:"Pojo Benchmark",id:"pojo-benchmark",level:3},{value:"Class Fields",id:"class-fields-1",level:4},{value:"Benchmark Results",id:"benchmark-results-1",level:4}];function d(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",h4:"h4",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h2,{id:"graalvm-native-image",children:"GraalVM Native Image"}),"\n",(0,r.jsxs)(n.p,{children:["GraalVM ",(0,r.jsx)(n.code,{children:"native image"})," can compile java code into native code ahead to build faster, smaller, leaner applications.\nThe native image doesn't have a JIT compiler to compile bytecode into machine code, and doesn't support\nreflection unless configure reflection file."]}),"\n",(0,r.jsxs)(n.p,{children:["Fory runs on GraalVM native image pretty well. Fory generates all serializer code for ",(0,r.jsx)(n.code,{children:"Fory JIT framework"})," and ",(0,r.jsx)(n.code,{children:"MethodHandle/LambdaMetafactory"})," at graalvm build time. Then use those generated code for serialization at runtime without\nany extra cost, the performance is great."]}),"\n",(0,r.jsxs)(n.p,{children:["In order to use Fory on graalvm native image, you must create Fory as an ",(0,r.jsx)(n.strong,{children:"static"})," field of a class, and ",(0,r.jsx)(n.strong,{children:"register"})," all classes at\nthe enclosing class initialize time. Then configure ",(0,r.jsx)(n.code,{children:"native-image.properties"})," under\n",(0,r.jsx)(n.code,{children:"resources/META-INF/native-image/$xxx/native-image.propertie"})," to tell graalvm to init the class at native image\nbuild time. For example, here we configure ",(0,r.jsx)(n.code,{children:"org.apache.fory.graalvm.Example"})," class be init at build time:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-properties",children:"Args = --initialize-at-build-time=org.apache.fory.graalvm.Example\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Another benefit using fory is that you don't have to configure ",(0,r.jsx)(n.a,{href:"https://www.graalvm.org/latest/reference-manual/native-image/metadata/#specifying-reflection-metadata-in-json",children:"reflection json"})," and\n",(0,r.jsx)(n.a,{href:"https://www.graalvm.org/latest/reference-manual/native-image/metadata/#serialization",children:"serialization json"}),", which is\nvery tedious, cumbersome and inconvenient. When using fory, you just need to invoke\n",(0,r.jsx)(n.code,{children:"org.apache.fory.Fory.register(Class<?>, boolean)"})," for every type you want to serialize."]}),"\n",(0,r.jsxs)(n.p,{children:["Note that Fory ",(0,r.jsx)(n.code,{children:"asyncCompilationEnabled"})," option will be disabled automatically for graalvm native image since graalvm\nnative image doesn't support JIT at the image run time."]}),"\n",(0,r.jsx)(n.h2,{id:"not-thread-safe-fory",children:"Not thread-safe Fory"}),"\n",(0,r.jsx)(n.p,{children:"Example:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'import org.apache.fory.Fory;\nimport org.apache.fory.util.Preconditions;\n\nimport java.util.List;\nimport java.util.Map;\n\npublic class Example {\n  public record Record (\n    int f1,\n    String f2,\n    List<String> f3,\n    Map<String, Long> f4) {\n  }\n\n  static Fory fory;\n\n  static {\n    fory = Fory.builder().build();\n    // register and generate serializer code.\n    fory.register(Record.class, true);\n  }\n\n  public static void main(String[] args) {\n    Record record = new Record(10, "abc", List.of("str1", "str2"), Map.of("k1", 10L, "k2", 20L));\n    System.out.println(record);\n    byte[] bytes = fory.serialize(record);\n    Object o = fory.deserialize(bytes);\n    System.out.println(o);\n    Preconditions.checkArgument(record.equals(o));\n  }\n}\n'})}),"\n",(0,r.jsxs)(n.p,{children:["Then add ",(0,r.jsx)(n.code,{children:"org.apache.fory.graalvm.Example"})," build time init to ",(0,r.jsx)(n.code,{children:"native-image.properties"})," configuration:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-properties",children:"Args = --initialize-at-build-time=org.apache.fory.graalvm.Example\n"})}),"\n",(0,r.jsx)(n.h2,{id:"thread-safe-fory",children:"Thread-safe Fory"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'import org.apache.fory.Fory;\nimport org.apache.fory.ThreadLocalFory;\nimport org.apache.fory.ThreadSafeFory;\nimport org.apache.fory.util.Preconditions;\n\nimport java.util.List;\nimport java.util.Map;\n\npublic class ThreadSafeExample {\n  public record Foo (\n    int f1,\n    String f2,\n    List<String> f3,\n    Map<String, Long> f4) {\n  }\n\n  static ThreadSafeFory fory;\n\n  static {\n    fory = new ThreadLocalFory(classLoader -> {\n      Fory f = Fory.builder().build();\n      // register and generate serializer code.\n      f.register(Foo.class, true);\n      return f;\n    });\n  }\n\n  public static void main(String[] args) {\n    System.out.println(fory.deserialize(fory.serialize("abc")));\n    System.out.println(fory.deserialize(fory.serialize(List.of(1,2,3))));\n    System.out.println(fory.deserialize(fory.serialize(Map.of("k1", 1, "k2", 2))));\n    Foo foo = new Foo(10, "abc", List.of("str1", "str2"), Map.of("k1", 10L, "k2", 20L));\n    System.out.println(foo);\n    byte[] bytes = fory.serialize(foo);\n    Object o = fory.deserialize(bytes);\n    System.out.println(o);\n  }\n}\n'})}),"\n",(0,r.jsxs)(n.p,{children:["Then add ",(0,r.jsx)(n.code,{children:"org.apache.fory.graalvm.ThreadSafeExample"})," build time init to ",(0,r.jsx)(n.code,{children:"native-image.properties"})," configuration:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-properties",children:"Args = --initialize-at-build-time=org.apache.fory.graalvm.ThreadSafeExample\n"})}),"\n",(0,r.jsx)(n.h2,{id:"framework-integration",children:"Framework Integration"}),"\n",(0,r.jsxs)(n.p,{children:["For framework developers, if you want to integrate fory for serialization, you can provided a configuration file to let\nthe users to list all the classes they want to serialize, then you can load those classes and invoke\n",(0,r.jsx)(n.code,{children:"org.apache.fory.Fory.register(Class<?>, boolean)"})," to register those classes in your Fory integration class, and configure that\nclass be initialized at graalvm native image build time."]}),"\n",(0,r.jsx)(n.h2,{id:"benchmark",children:"Benchmark"}),"\n",(0,r.jsx)(n.p,{children:"Here we give two class benchmarks between Fory and Graalvm Serialization."}),"\n",(0,r.jsx)(n.p,{children:"When Fory compression is disabled:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Struct: Fory is ",(0,r.jsx)(n.code,{children:"46x speed, 43% size"})," compared to JDK."]}),"\n",(0,r.jsxs)(n.li,{children:["Pojo: Fory is ",(0,r.jsx)(n.code,{children:"12x speed, 56% size"})," compared to JDK."]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"When Fory compression is enabled:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Struct: Fory is ",(0,r.jsx)(n.code,{children:"24x speed, 31% size"})," compared to JDK."]}),"\n",(0,r.jsxs)(n.li,{children:["Pojo: Fory is ",(0,r.jsx)(n.code,{children:"12x speed, 48% size"})," compared to JDK."]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["See [",(0,r.jsx)(n.a,{href:"https://github.com/apache/fory/blob/main/integration_tests/graalvm_tests/src/main/java/org/apache/fory/graalvm/Benchmark.java",children:"Benchmark.java"}),"] for benchmark code."]}),"\n",(0,r.jsx)(n.h3,{id:"struct-benchmark",children:"Struct Benchmark"}),"\n",(0,r.jsx)(n.h4,{id:"class-fields",children:"Class Fields"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"public class Struct implements Serializable {\n  public int f1;\n  public long f2;\n  public float f3;\n  public double f4;\n  public int f5;\n  public long f6;\n  public float f7;\n  public double f8;\n  public int f9;\n  public long f10;\n  public float f11;\n  public double f12;\n}\n"})}),"\n",(0,r.jsx)(n.h4,{id:"benchmark-results",children:"Benchmark Results"}),"\n",(0,r.jsx)(n.p,{children:"No compression:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"Benchmark repeat number: 400000\nObject type: class org.apache.fory.graalvm.Struct\nCompress number: false\nFory size: 76.0\nJDK size: 178.0\nFory serialization took mills: 49\nJDK serialization took mills: 2254\nCompare speed: Fory is 45.70x speed of JDK\nCompare size: Fory is 0.43x size of JDK\n"})}),"\n",(0,r.jsx)(n.p,{children:"Compress number:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"Benchmark repeat number: 400000\nObject type: class org.apache.fory.graalvm.Struct\nCompress number: true\nFory size: 55.0\nJDK size: 178.0\nFory serialization took mills: 130\nJDK serialization took mills: 3161\nCompare speed: Fory is 24.16x speed of JDK\nCompare size: Fory is 0.31x size of JDK\n"})}),"\n",(0,r.jsx)(n.h3,{id:"pojo-benchmark",children:"Pojo Benchmark"}),"\n",(0,r.jsx)(n.h4,{id:"class-fields-1",children:"Class Fields"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"public class Foo implements Serializable {\n  int f1;\n  String f2;\n  List<String> f3;\n  Map<String, Long> f4;\n}\n"})}),"\n",(0,r.jsx)(n.h4,{id:"benchmark-results-1",children:"Benchmark Results"}),"\n",(0,r.jsx)(n.p,{children:"No compression:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"Benchmark repeat number: 400000\nObject type: class org.apache.fory.graalvm.Foo\nCompress number: false\nFory size: 541.0\nJDK size: 964.0\nFory serialization took mills: 1663\nJDK serialization took mills: 16266\nCompare speed: Fory is 12.19x speed of JDK\nCompare size: Fory is 0.56x size of JDK\n"})}),"\n",(0,r.jsx)(n.p,{children:"Compress number:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"Benchmark repeat number: 400000\nObject type: class org.apache.fory.graalvm.Foo\nCompress number: true\nFory size: 459.0\nJDK size: 964.0\nFory serialization took mills: 1289\nJDK serialization took mills: 15069\nCompare speed: Fory is 12.11x speed of JDK\nCompare size: Fory is 0.48x size of JDK\n"})})]})}function h(e={}){const{wrapper:n}={...(0,a.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},11151:(e,n,i)=>{i.d(n,{Z:()=>t,a:()=>s});var r=i(67294);const a={},o=r.createContext(a);function s(e){const n=r.useContext(o);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function t(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:s(e.components),r.createElement(o.Provider,{value:n},e.children)}}}]);