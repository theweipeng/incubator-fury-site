"use strict";(self.webpackChunkfury_site=self.webpackChunkfury_site||[]).push([[1477],{10:a=>{a.exports=JSON.parse('{"blogPosts":[{"id":"fury_0_4_1_release","metadata":{"permalink":"/blog/fury_0_4_1_release","source":"@site/blog/2023-12-09-fury_0_4_1_release.md","title":"Fury 0.4.1 Released","description":"I\'m pleased to announce the 0.4.1 release of the Fury//github.com/alipay/fury/releases/tag/v0.4.1. With this release, Fury support rust row format now. C++ row format has been enhanced too, now iterable types can be encoded to fury row format. Please try it out and share your feedbacks with us.","date":"2023-12-09T00:00:00.000Z","formattedDate":"December 9, 2023","tags":[{"label":"fury","permalink":"/blog/tags/fury"}],"readingTime":1.645,"hasTruncateMarker":true,"authors":[{"name":"Shawn Yang","title":"Maintainer of Fury","url":"https://github.com/chaokunyang","imageURL":"https://github.com/chaokunyang.png","key":"chaokunyang"}],"frontMatter":{"slug":"fury_0_4_1_release","title":"Fury 0.4.1 Released","authors":["chaokunyang"],"tags":["fury"]},"unlisted":false,"nextItem":{"title":"Fury 0.4.0 Released","permalink":"/blog/fury_0_4_0_release"}},"content":"I\'m pleased to announce the 0.4.1 release of the Fury: https://github.com/alipay/fury/releases/tag/v0.4.1. With this release, Fury support rust row format now. C++ row format has been enhanced too, now iterable types can be encoded to fury row format. Please try it out and share your feedbacks with us. \\n\\n\x3c!--truncate--\x3e\\n\\n# Fury v0.4.1 released\\n\\nAuthor: [chaokunyang](https://github.com/chaokunyang)\\n\\nI\'m pleased to announce the 0.4.1 release of the Fury: https://github.com/alipay/fury/releases/tag/v0.4.1. With this release, Fury support rust row format now. C++ row format has been enhanced too, now iterable types can be encoded to fury row format too.\\n\\n## Highlight\\n* [Rust] Support row format\\n* [C++] Support iterable types for RowEncoder \\n* [JavaScript] Support partial record\\n* [Java] Fix JIT error in corner case, now Fury can generate serializer for every class\\n\\n## What\'s Changed\\n* [Doc] Refine issue template by a yaml form by @chaokunyang in https://github.com/alipay/fury/pull/1185\\n* [C++] Fix ownership problem for children writers by visitor by @PragmaTwice in https://github.com/alipay/fury/pull/1193\\n* [C++] Remove useless fields and macro in logging by @PragmaTwice in https://github.com/alipay/fury/pull/1195\\n* [Doc] add docs for java FuryBuilder #1188 by @mof-dev-3 in https://github.com/alipay/fury/pull/1192\\n* [Rust] support row format by @wangweipeng2 in https://github.com/alipay/fury/pull/1196\\n* [C++] Add RowEncoder wrapper to RowEncodeTrait by @PragmaTwice in https://github.com/alipay/fury/pull/1200\\n* [Rust] Row support more types by @wangweipeng2 in https://github.com/alipay/fury/pull/1202\\n* [Rust] Support row map by @wangweipeng2 in https://github.com/alipay/fury/pull/1206\\n* [C++] update bazel version from 4.2 to 6.3.2 by @chaokunyang in https://github.com/alipay/fury/pull/1204\\n* [JavaScript] Support partial record by @wangweipeng2 in https://github.com/alipay/fury/pull/1208\\n* [Java] fix package access level class accessor jit by @chaokunyang in https://github.com/alipay/fury/pull/1210\\n* [JavaScript] Fix register a description twice will get undefined serializer by @bytemain in https://github.com/alipay/fury/pull/1211\\n* [C++] Support iterable types in RowEncodeTrait by @PragmaTwice in https://github.com/alipay/fury/pull/1212\\n* [C++] Support iterable types for RowEncoder by @PragmaTwice in https://github.com/alipay/fury/pull/1215\\n* [Python] Refine py register class method by @chaokunyang in https://github.com/alipay/fury/pull/1218\\n* [Java] Clear extRegistry.getClassCtx if generate serializer class failed in https://github.com/alipay/fury/pull/1221\\n\\n## New Contributors\\n* @bytemain made their first contribution in https://github.com/alipay/fury/pull/1211\\n\\n**Full Changelog**: https://github.com/alipay/fury/compare/v0.4.0...v0.4.1"},{"id":"fury_0_4_0_release","metadata":{"permalink":"/blog/fury_0_4_0_release","source":"@site/blog/2023-11-29-fury_0_4_0_release.md","title":"Fury 0.4.0 Released","description":"I\'m pleased to announce the 0.4.0 release of the Fury. With this release, GraalVM native image and C++ row format automatic encoder based on compile-time reflection are supported. Please try it out and share your feedbacks with us.","date":"2023-11-29T00:00:00.000Z","formattedDate":"November 29, 2023","tags":[{"label":"fury","permalink":"/blog/tags/fury"}],"readingTime":2.725,"hasTruncateMarker":true,"authors":[{"name":"Shawn Yang","title":"Maintainer of Fury","url":"https://github.com/chaokunyang","imageURL":"https://github.com/chaokunyang.png","key":"chaokunyang"}],"frontMatter":{"slug":"fury_0_4_0_release","title":"Fury 0.4.0 Released","authors":["chaokunyang"],"tags":["fury"]},"unlisted":false,"prevItem":{"title":"Fury 0.4.1 Released","permalink":"/blog/fury_0_4_1_release"},"nextItem":{"title":"Fury v0.3.1 released","permalink":"/blog/fury_0_3_1_release"}},"content":"I\'m pleased to announce the 0.4.0 release of the Fury. With this release, [GraalVM native image](https://www.graalvm.org/latest/reference-manual/native-image/) and C++ row format automatic encoder based on compile-time reflection are supported. Please try it out and share your feedbacks with us. \\n\\n\x3c!--truncate--\x3e\\n# Fury v0.4.0 released\\n\\nAuthor: [chaokunyang](https://github.com/chaokunyang)\\n\\nI\'m pleased to announce the 0.4.0 release of the Fury. With this release, [GraalVM native image](https://www.graalvm.org/latest/reference-manual/native-image/) and C++ row format automatic encoder based on compile-time reflection are supported. Please try it out and share your feedbacks with us. \\n\\n## Highlight\\n* [Java] Support Graalvm native image. The implementation will generate all serialization code at image build time, the runtime will be extremely fast, see [fury graalvm usage doc](https://github.com/alipay/fury/blob/main/docs/guide/graalvm_guide.md)\\n* [Java] Fury vs JDK benchmark on Graalvm native image\\n* [Scala] Serialization support for package scoped object\\n* [C++] Reflection support by macro/template programing\\n* [C++] Automatic row format encoder\\n\\n## What\'s Changed\\n* [Python] fix python release by @chaokunyang in https://github.com/alipay/fury/pull/1125\\n* [Java] make unsafe offset compatible with graalvm by @chaokunyang in https://github.com/alipay/fury/pull/1117\\n* [Scala] Fix scala package object JIT error by @chaokunyang in https://github.com/alipay/fury/pull/1130\\n* [Java] Refine maven pom config by @chaokunyang in https://github.com/alipay/fury/pull/1126\\n* [Rust]  add rust building by @caicancai in https://github.com/alipay/fury/pull/1129\\n* [C++] Remove useless overload of Writer::WriteString by @PragmaTwice in https://github.com/alipay/fury/pull/1136\\n* [Rust] fix typo by @caicancai in https://github.com/alipay/fury/pull/1133\\n* [Rust]  add mesaage about rust ci by @caicancai in https://github.com/alipay/fury/pull/1131\\n* [C++] Add move ctor/assign op to Status by @PragmaTwice in https://github.com/alipay/fury/pull/1134\\n* [Rust] fix cargo test error by @wangweipeng2 in https://github.com/alipay/fury/pull/1135\\n* [Rust] improve rust ci by @caicancai in https://github.com/alipay/fury/pull/1138\\n* [Scala] Fix scala collection serialization nested in pojo by @chaokunyang in https://github.com/alipay/fury/pull/1140\\n* [Java] make sting builder serializer codegen eager by @chaokunyang in https://github.com/alipay/fury/pull/1141\\n* [Rust] fix rust ci bug by @caicancai in https://github.com/alipay/fury/pull/1139\\n* [Java] support add static fields in fury codegen by @chaokunyang in https://github.com/alipay/fury/pull/1147\\n* [C++] Add the basic row format serializer for C++ class types via reflection by @PragmaTwice in https://github.com/alipay/fury/pull/1144\\n* [C++] Add duplicated fields detection in `FURY_FIELD_INFO` macro by @PragmaTwice in https://github.com/alipay/fury/pull/1151\\n* [Java] support create serializer when register class by @chaokunyang in https://github.com/alipay/fury/pull/1154\\n* [Java] Support graalvm native image by @chaokunyang in https://github.com/alipay/fury/pull/1143\\n* [C++] Support string type in RowEncoder by @PragmaTwice in https://github.com/alipay/fury/pull/1158\\n* [Scala] add graalvm support for scala singleton by @chaokunyang in https://github.com/alipay/fury/pull/1159\\n* [Scala] Fix scala singleton map/collection serialization in struct by @chaokunyang in https://github.com/alipay/fury/pull/1160\\n* [Java] add read resolve circular test suite by @chaokunyang in https://github.com/alipay/fury/pull/1161\\n* [Java] Remove load arrow serializers by default by @chaokunyang in https://github.com/alipay/fury/pull/1163\\n* [Java] Support thread safe fury for graalvm native image by @chaokunyang in https://github.com/alipay/fury/pull/1164\\n* [Scala] Fix package object serialization in scala App by @chaokunyang in https://github.com/alipay/fury/pull/1166\\n* [Java] add graalvm usage doc by @chaokunyang in https://github.com/alipay/fury/pull/1168\\n* [C++] Split util.h to bit_util.h and time_util.h by @PragmaTwice in https://github.com/alipay/fury/pull/1171\\n* [C++] Support cv-qualified types in row encoder by @PragmaTwice in https://github.com/alipay/fury/pull/1172\\n* [C++] Add support for nested class types in row encoder by @PragmaTwice in https://github.com/alipay/fury/pull/1173\\n* [Java] Add graalvm benchmark by @chaokunyang in https://github.com/alipay/fury/pull/1178\\n* [Java] Fix string key serializer ref tracking by @chaokunyang in https://github.com/alipay/fury/pull/1174\\n* [Java] Add graalvm benchmark test results by @chaokunyang in https://github.com/alipay/fury/pull/1180\\n* [Scala] fix package object inaccessible from source code by @chaokunyang in https://github.com/alipay/fury/pull/1181\\n\\n\\n**Full Changelog**: https://github.com/alipay/fury/compare/v0.3.1...v0.4.0"},{"id":"fury_0_3_1_release","metadata":{"permalink":"/blog/fury_0_3_1_release","source":"@site/blog/2023-11-21-fury_0_3_1_release.md","title":"Fury v0.3.1 released","description":"I\'m pleased to announce the 0.3.1 release of the Fury. With this release, fury supports python 3.11&3.12, droped python 3.6 support.","date":"2023-11-21T00:00:00.000Z","formattedDate":"November 21, 2023","tags":[{"label":"fury","permalink":"/blog/tags/fury"}],"readingTime":2.715,"hasTruncateMarker":true,"authors":[{"name":"Shawn Yang","title":"Maintainer of Fury","url":"https://github.com/chaokunyang","imageURL":"https://github.com/chaokunyang.png","key":"chaokunyang"}],"frontMatter":{"slug":"fury_0_3_1_release","title":"Fury v0.3.1 released","authors":["chaokunyang"],"tags":["fury"]},"unlisted":false,"prevItem":{"title":"Fury 0.4.0 Released","permalink":"/blog/fury_0_4_0_release"},"nextItem":{"title":"Fury v0.3.0 released","permalink":"/blog/fury_0_3_0_release"}},"content":"I\'m pleased to announce the 0.3.1 release of the Fury. With this release, fury supports python 3.11&3.12, droped python 3.6 support.\\nMultiple scala serialization JIT optimization are included, and java serialization compatibility is improved too.\\n\\n\x3c!--truncate--\x3e\\n# Fury v0.3.1 released\\n\\nAuthor: [chaokunyang](https://github.com/chaokunyang)\\n\\nI\'m pleased to announce the 0.3.1 release of the Fury. With this release, fury supports python 3.11&3.12, droped python 3.6 support.\\nMultiple scala serialization JIT optimization are included, and java serialization compatibility is improved too.\\n\\n## Highlight\\n- Support python 3.11 and 3.12, drop python 3.6 support\\n- Refactor collection serialization framework to support writeReplace JIT\\n- Integrate scala collection with fury java collection framework\\n- Support scala collection jit serialization \\n- Support shim dispatcher to resolve compatibility problems for common used classes\\n- Use lastest arrow 14 version for row format in Java and Python\\n\\n## What\'s Changed\\n* [Doc] add scala sbt install doc by @chaokunyang in https://github.com/alipay/fury/pull/1066\\n* [Doc] Update scala_guide.md by @chaokunyang in https://github.com/alipay/fury/pull/1067\\n* [Doc] Add scala 2/3 support doc by @chaokunyang in https://github.com/alipay/fury/pull/1068\\n* [Java]  Refactor collection serialization framework to support writeReplace JIT by @chaokunyang in https://github.com/alipay/fury/pull/1062\\n* [Java] Refine collection package by @chaokunyang in https://github.com/alipay/fury/pull/1070\\n* [Java] merge map/collection into collection package  by @chaokunyang in https://github.com/alipay/fury/pull/1072\\n* [Scala] integrate scala collection with fury java collection framework by @chaokunyang in https://github.com/alipay/fury/pull/1073\\n* remove unused part of build.sbt by @pjfanning in https://github.com/alipay/fury/pull/1074\\n* [Scala] get build to work with Scala 3 by @pjfanning in https://github.com/alipay/fury/pull/1075\\n* [Scala] support scala collection jit serialization by @chaokunyang in https://github.com/alipay/fury/pull/1077\\n* [Doc] add apache license section to readme by @caicancai in https://github.com/alipay/fury/pull/1080\\n* [Java] add option to disable class check warnings by @chaokunyang in https://github.com/alipay/fury/pull/1084\\n* [Java] Fix collection serialization NPE when all elements are null by @chaokunyang in https://github.com/alipay/fury/pull/1086\\n* [Java] FuryPooledObjectFactory getFury refactor, remove redundant recursive call by @mof-dev-3 in https://github.com/alipay/fury/pull/1088\\n* [Rust] add rust-version by @wangweipeng2 in https://github.com/alipay/fury/pull/1091\\n* [DOC] add javascript sample by @wangweipeng2 in https://github.com/alipay/fury/pull/1095\\n* Make sure the c++ standard is set to 17 by @PragmaTwice in https://github.com/alipay/fury/pull/1093\\n* Fix undefined behavior due to use of uninitialized field in Buffer by @PragmaTwice in https://github.com/alipay/fury/pull/1092\\n* [Rust] merge derive and make it sample by @wangweipeng2 in https://github.com/alipay/fury/pull/1098\\n* [DOC] add rust sample by @wangweipeng2 in https://github.com/alipay/fury/pull/1100\\n* Simplify endian utility functions and `IsOneOf` by @PragmaTwice in https://github.com/alipay/fury/pull/1096\\n* [Java] throw error if nested fury serialize happen in serialization  by @chaokunyang in https://github.com/alipay/fury/pull/1103\\n* [C++] remove useless FromXXXEndian by @chaokunyang in https://github.com/alipay/fury/pull/1105\\n* [Rust ] Remove the magic numbers by @wangweipeng2 in https://github.com/alipay/fury/pull/1107\\n* [Rust] chore: add rust doc by @wangweipeng2 in https://github.com/alipay/fury/pull/1109\\n* [JavaScript] Fill in readme by @wangweipeng2 in https://github.com/alipay/fury/pull/1110\\n* chore: check xlang flag by @wangweipeng2 in https://github.com/alipay/fury/pull/1112\\n* [Java] Remove guava part1 by @chaokunyang in https://github.com/alipay/fury/pull/1114\\n* [Rust] Correct language flag by @wangweipeng2 in https://github.com/alipay/fury/pull/1120\\n* [Java] DateTimeUtils minor refactor, reuse floorDiv to calculate floorMod by @mof-dev-3 in https://github.com/alipay/fury/pull/1122\\n* [Python] Support python3.11/12 by @chaokunyang in https://github.com/alipay/fury/pull/1064\\n* [java] support shim dispatcher to resolve compatibility problems for common used classes by @xiguashu in https://github.com/alipay/fury/pull/1123\\n\\n## New Contributors\\n* @pjfanning made their first contribution in https://github.com/alipay/fury/pull/1074\\n* @mof-dev-3 made their first contribution in https://github.com/alipay/fury/pull/1088\\n* @PragmaTwice made their first contribution in https://github.com/alipay/fury/pull/1093\\n* @xiguashu made their first contribution in https://github.com/alipay/fury/pull/1123\\n\\n**Full Changelog**: https://github.com/alipay/fury/compare/v0.3.0...v0.3.1"},{"id":"fury_0_3_0_release","metadata":{"permalink":"/blog/fury_0_3_0_release","source":"@site/blog/2023-11-04-fury_0_3_0_release.md","title":"Fury v0.3.0 released","description":"I\'m pleased to announce the 0.3.0 release of the Fury. With this release, fury supports all scala 2/3 objects serializaiton now, including: case/pojo/object/option/tuple/collecton/enum and other types. case/pojo/object are tightly integrated with fury JIT. Fury will generate highly-optimized serializer by generate serialize code at runtime to speed up serializaiton. The serialization for those objects will be extremely fast.","date":"2023-11-04T00:00:00.000Z","formattedDate":"November 4, 2023","tags":[{"label":"fury","permalink":"/blog/tags/fury"}],"readingTime":4.035,"hasTruncateMarker":true,"authors":[{"name":"Shawn Yang","title":"Maintainer of Fury","url":"https://github.com/chaokunyang","imageURL":"https://github.com/chaokunyang.png","key":"chaokunyang"}],"frontMatter":{"slug":"fury_0_3_0_release","title":"Fury v0.3.0 released","authors":["chaokunyang"],"tags":["fury"]},"unlisted":false,"prevItem":{"title":"Fury v0.3.1 released","permalink":"/blog/fury_0_3_1_release"},"nextItem":{"title":"Fury v0.2.1 released","permalink":"/blog/fury_0_2_1_release"}},"content":"I\'m pleased to announce the 0.3.0 release of the Fury. With this release, fury supports all scala 2/3 objects serializaiton now, including: **case/pojo/object/option/tuple/collecton/enum and other types**. case/pojo/object are tightly integrated with fury JIT. Fury will generate highly-optimized serializer by generate serialize code at runtime to speed up serializaiton. The serialization for those objects will be extremely fast.\\n\\n\x3c!--truncate--\x3e\\n# Fury v0.3.0 released\\n\\nAuthor: [chaokunyang](https://github.com/chaokunyang)\\n\\nI\'m pleased to announce the 0.3.0 release of the Fury. With this release, fury supports all scala 2/3 objects serializaiton now, including: **case/pojo/object/option/tuple/collecton/enum and other types**. case/pojo/object are tightly integrated with fury JIT. Fury will generate highly-optimized serializer by generate serialize code at runtime to speed up serializaiton. The serialization for those objects will be extremely fast.\\n\\nFor a long time, scala serialization is always tricky, only reliable way is JDK serialization. But it\u2019s too slow, and the serialized size is too large. Although we have frameworks such as chill, but the support for scala types are limited, and the performance is limited too.Now with fury scala, you can serialize any scala objects you want and get extremly fast performance. Please try it out and let us know if you have any issues.\\n\\n## Scala Serialization Guide\\nInstall dependecy:\\n```sbt\\nlibraryDependencies += \\"org.furyio\\" % \\"fury-core\\" % \\"0.3.0\\"\\n```\\n\\nCreating fury:\\n\\n```scala\\nval fury = Fury.builder()\\n .withScalaOptimizationEnabled(true) \\n .requireClassRegistration(false)\\n .withRefTracking(true)\\n .build()\\n```\\n\\nSerialize case objects:\\n\\n```scala\\ncase class Person(github: String, age: Int, id: Long)\\nval p = Person(\\"https://github.com/chaokunyang\\", 18, 1)\\nprintln(fury.deserialize(fury.serialize(p)))\\nprintln(fury.deserializeJavaObject(fury.serializeJavaObject(p)))\\n```\\n\\nSerialize singleton objects:\\n\\n```scala\\nobject singleton {\\n}\\nval o1 = fury.deserialize(fury.serialize(singleton)) \\nval o2 = fury.deserialize(fury.serialize(singleton)) \\nprintln(o1 == o2)\\n```\\n\\nSerialize collection objects:\\n\\n```scala\\nval seq = Seq(1,2)\\nval list = List(\\"a\\", \\"b\\") val map = Map(\\"a\\" -> 1, \\"b\\" -> 2)\\nprintln(fury.deserialize(fury.serialize(seq)))\\nprintln(fury.deserialize(fury.serialize(list)))\\nprintln(fury.deserialize(fury.serialize(map)))\\n```\\n\\nSerialize enum:\\n\\n```scala\\nenum Color { case Red, Green, Blue }\\nprintln(fury.deserialize(fury.serialize(Color.Green)))\\n```\\n\\n## Highlight\\n-  [Scala] Support scala serialization: `case/object/tuple/string/collection/enum/basic` all supported\\n-  [Scala] Add [scala user documentation](https://github.com/alipay/fury/blob/main/docs/guide/scala_guide.md)\\n- [Scala] add optimized scala singleton object serializer\\n-  [Java] Make `java.io.Externalizable` compatible with Java `writeReplace/readResolve` API\\n-  [Java] Integrate fury with dubbo https://github.com/apache/dubbo-spi-extensions/pull/226\\n- [Java] support bytes string serialization for jdk8 with JDK17 runtime\\n\\n## BugFix\\n- [Java] Allow for `InputStream` not reading entire length \\n- [Java] Use `ReflectionUtils.getCtrHandle()` for non-public constructor in `ExternalizableSerializer`\\n- [Java] fix jdk compatible serialization for inheritance \\n\\n## What\'s Changed\\n* [Impove][Doc] Improve README by @caicancai in https://github.com/alipay/fury/pull/1011\\n* [Java] rename wrong ascii naming to latin by @chaokunyang in https://github.com/alipay/fury/pull/1013\\n* [Doc] Update go install doc by @chaokunyang in https://github.com/alipay/fury/pull/1015\\n* fix(grammatical): correct typos and improve grammar by @iamahens in https://github.com/alipay/fury/pull/1018\\n* [Improve][Doc] Improve README by @caicancai in https://github.com/alipay/fury/pull/1020\\n* [Improve][Doc] add environment requirement by @caicancai in https://github.com/alipay/fury/pull/1022\\n* chore(docs): fixed typos by @Smoothieewastaken in https://github.com/alipay/fury/pull/1023\\n* bugfix: read buffer error when object contain binary field by @wangweipeng2 in https://github.com/alipay/fury/pull/1026\\n* [Doc] Optimize class registration doc by @chaokunyang in https://github.com/alipay/fury/pull/1027\\n* [Java] fix jdk compatible serialization for inheritance by @chaokunyang in https://github.com/alipay/fury/pull/1030\\n* [Doc] add scala user doc by @chaokunyang in https://github.com/alipay/fury/pull/1028\\n* [Doc] refine scala doc by @chaokunyang in https://github.com/alipay/fury/pull/1031\\n* Update README.md - fix grammatrical errors in README. by @ayushrakesh in https://github.com/alipay/fury/pull/1037\\n* [Java] Support local static class jit by @chaokunyang in https://github.com/alipay/fury/pull/1036\\n* [Java] support bytes string serialization for jdk8 by @chaokunyang in https://github.com/alipay/fury/pull/1039\\n* [Java] set timeout to JITContextTest by @chaokunyang in https://github.com/alipay/fury/pull/1040\\n* [Java] fix string builder serialization for jdk8 with jdk17 runtime by @chaokunyang in https://github.com/alipay/fury/pull/1042\\n* [Doc] add auto code reviewers by @chaokunyang in https://github.com/alipay/fury/pull/1043\\n* [Java] Allow for `InputStream` not reading entire length by @knutwannheden in https://github.com/alipay/fury/pull/1034\\n* [Java] Use `ReflectionUtils.getCtrHandle()` in `ExternalizableSerializer` by @knutwannheden in https://github.com/alipay/fury/pull/1044\\n* [Improve] make maven-spotless-plugin version as a parameter by @caicancai in https://github.com/alipay/fury/pull/1046\\n* Update README.md by @Shivam250702 in https://github.com/alipay/fury/pull/1047\\n* [Java] support writeReplace/readResolve for Externalizable by @chaokunyang in https://github.com/alipay/fury/pull/1048\\n* Update README.md by @Spyrosigma in https://github.com/alipay/fury/pull/1051\\n* Grammatical error in CODE_OF_CONDUCT.md by @HimanshuMahto in https://github.com/alipay/fury/pull/1050\\n* Update scala link title README.md by @chaokunyang in https://github.com/alipay/fury/pull/1052\\n* [Doc] add scala readme and refine document by @chaokunyang in https://github.com/alipay/fury/pull/1041\\n* [Java] populate StackOverflowError with enable ref tracking message by @chaokunyang in https://github.com/alipay/fury/pull/1049\\n* [Scala] Setup scala project by @chaokunyang in https://github.com/alipay/fury/pull/1054\\n* [Scala] add scala singleton object serializer by @chaokunyang in https://github.com/alipay/fury/pull/1053\\n* Updated README.md by @vidhijain27 in https://github.com/alipay/fury/pull/1056\\n* [Scala] add scala tuple serialization tests  by @chaokunyang in https://github.com/alipay/fury/pull/1059\\n* Empty ListExpression#genCode will throw npe by @farmerworking in https://github.com/alipay/fury/pull/1063\\n\\n## New Contributors\\n* @iamahens made their first contribution in https://github.com/alipay/fury/pull/1018\\n* @Smoothieewastaken made their first contribution in https://github.com/alipay/fury/pull/1023\\n* @ayushrakesh made their first contribution in https://github.com/alipay/fury/pull/1037\\n* @knutwannheden made their first contribution in https://github.com/alipay/fury/pull/1034\\n* @Shivam250702 made their first contribution in https://github.com/alipay/fury/pull/1047\\n* @Spyrosigma made their first contribution in https://github.com/alipay/fury/pull/1051\\n* @HimanshuMahto made their first contribution in https://github.com/alipay/fury/pull/1050\\n* @vidhijain27 made their first contribution in https://github.com/alipay/fury/pull/1056\\n* @farmerworking made their first contribution in https://github.com/alipay/fury/pull/1063\\n\\n**Full Changelog**: https://github.com/alipay/fury/compare/v0.2.1...v0.3.0"},{"id":"fury_0_2_1_release","metadata":{"permalink":"/blog/fury_0_2_1_release","source":"@site/blog/2023-10-19-fury_0_2_1_release.md","title":"Fury v0.2.1 released","description":"I\'m pleased to announce the 0.2.1 release of the Fury. This version provides beter jdk17+ record support and bettern jit for private classes.","date":"2023-10-19T00:00:00.000Z","formattedDate":"October 19, 2023","tags":[{"label":"fury","permalink":"/blog/tags/fury"}],"readingTime":1.255,"hasTruncateMarker":true,"authors":[{"name":"Shawn Yang","title":"Maintainer of Fury","url":"https://github.com/chaokunyang","imageURL":"https://github.com/chaokunyang.png","key":"chaokunyang"}],"frontMatter":{"slug":"fury_0_2_1_release","title":"Fury v0.2.1 released","authors":["chaokunyang"],"tags":["fury"]},"unlisted":false,"prevItem":{"title":"Fury v0.3.0 released","permalink":"/blog/fury_0_3_0_release"},"nextItem":{"title":"Fury v0.2.0 released","permalink":"/blog/fury_0_2_0_release"}},"content":"I\'m pleased to announce the 0.2.1 release of the Fury. This version provides beter jdk17+ record support and bettern jit for private classes.\\n\\n\x3c!--truncate--\x3e\\n\\n# Fury v0.2.1 released\\n\\nAuthor: [chaokunyang](https://github.com/chaokunyang)\\n\\nI\'m pleased to announce the 0.2.1 release of the Fury. This version provides beter jdk17+ record support and bettern jit for private classes. Feel free to try it out and let me know if you have any issues.\\n\\n## Highlight\\n* [Go] Support tiny go compilation\\n* [Java] Support private JDK17+ record class JIT serialization\\n\\n## Bug fix\\n* Fix jit error for register private serializers\\n* Upgrade janino version to fix package name conflict with classname \\n\\n## What\'s Changed\\n* [Doc] Update JDK support doc  by @chaokunyang in https://github.com/alipay/fury/pull/992\\n* [Go] Make compilation support tinygo by @springrain in https://github.com/alipay/fury/pull/991\\n* [Doc] fix config class imports by @chaokunyang in https://github.com/alipay/fury/pull/993\\n* [go] fixed typo in readme import path by @voldyman in https://github.com/alipay/fury/pull/995\\n* [Java] fix jit error for register private serializers by @chaokunyang in https://github.com/alipay/fury/pull/999\\n* [Java] Refine reflection contructor by MethodHandle by @chaokunyang in https://github.com/alipay/fury/pull/1000\\n* [Java] Fix private record JIT by @chaokunyang in https://github.com/alipay/fury/pull/1004\\n* [Java] Upgrade janino version to fix package name conflict with classname by @chaokunyang in https://github.com/alipay/fury/pull/1006\\n* [Java] fix janino deps for fury-benchmark by @chaokunyang in https://github.com/alipay/fury/pull/1007\\n* [Doc] Improve README by @caicancai in https://github.com/alipay/fury/pull/1009\\n\\n## New Contributors\\n* @springrain made their first contribution in https://github.com/alipay/fury/pull/991\\n* @voldyman made their first contribution in https://github.com/alipay/fury/pull/995\\n* @caicancai made their first contribution in https://github.com/alipay/fury/pull/1009\\n\\n**Full Changelog**: https://github.com/alipay/fury/compare/v0.2.0...v0.2.1"},{"id":"fury_0_2_0_release","metadata":{"permalink":"/blog/fury_0_2_0_release","source":"@site/blog/2023-10-09-fury_0_2_0_release.md","title":"Fury v0.2.0 released","description":"I\'m so excited to announce the 0.2.0 release of the Fury. This a very exciting version of fury. With this version, we have 1X speedup, 30%~50% smaller serialized size. And now we are the fastest serialization framework in the JVM-Serializers. At the same time, fury has fully support for JDK17/21, I supported JDK17+ record JIT serialization, JDK9+ ImmutableList JIT serialization. The serialization is blazing fast, please try it out. And we also open sourced Fury GO, the first golang serialization framework which supports circular reference and interface polymorphismm, feel free to try it out and let me know if you have any issues.","date":"2023-10-09T00:00:00.000Z","formattedDate":"October 9, 2023","tags":[{"label":"fury","permalink":"/blog/tags/fury"}],"readingTime":6.945,"hasTruncateMarker":true,"authors":[{"name":"Shawn Yang","title":"Maintainer of Fury","url":"https://github.com/chaokunyang","imageURL":"https://github.com/chaokunyang.png","key":"chaokunyang"}],"frontMatter":{"slug":"fury_0_2_0_release","title":"Fury v0.2.0 released","authors":["chaokunyang"],"tags":["fury"]},"unlisted":false,"prevItem":{"title":"Fury v0.2.1 released","permalink":"/blog/fury_0_2_1_release"},"nextItem":{"title":"Fury v0.1.2 released","permalink":"/blog/fury_0_1_2_release"}},"content":"I\'m so excited to announce the 0.2.0 release of the Fury. This a very exciting version of fury. With this version, we have 1X speedup, `30%~50%` smaller serialized size. And now we are the fastest serialization framework in the [JVM-Serializers](https://github.com/eishay/jvm-serializers/wiki). At the same time, fury has fully support for JDK17/21, I supported JDK17+ record JIT serialization, JDK9+ ImmutableList JIT serialization. The serialization is blazing fast, please try it out. And we also open sourced Fury GO, the first golang serialization framework which supports circular reference and interface polymorphismm, feel free to try it out and let me know if you have any issues.\\n\x3c!--truncate--\x3e\\n\\n# Fury v0.2.0 released\\n\\nAuthor: [chaokunyang](https://github.com/chaokunyang)\\n\\nI\'m so excited to announce the 0.2.0 release of the Fury. This a very exciting version of fury. With this version, we have 1X speedup, 30%~50% smaller serialized size. And now we are the fastest serialization framework in the [JVM-Serializers](https://github.com/eishay/jvm-serializers/wiki). At the same time, fury has fully support for JDK17/21, I supported JDK17+ record JIT serialization, JDK9+ ImmutableList JIT serialization. The serialization is blazing fast, please try it out. And we also open sourced Fury GO, the first golang serialization framework which supports circular reference and interface polymorphismm, feel free to try it out and let me know if you have any issues.\\n\\n\\n## Highlights\\n### Java\\n* Support JDK17+ record JIT/Interpreter serialization\\n* Support JDK17+ record JIT/Interpreter serialization backward/forward compatibility\\n* Support jdk9+ Immutable Collections JIT/Interpreter mode serialization, much faster compared to other frameworks\\n* New collection serialization protocol by homogenization, 1.5x speed up, 2X space saving.\\n* Desgined and implemented a new long compression algorithm, with performance cost less than 10% but give 50% compresstion ratio\\n* Support configuring compress int/long independently, enable int/long compression by default\\n* Add class checker API and Whitelist/Blacklist based implementation to enhance security\\n\\n### Python\\n* Support pyarrow6 bazel build\\n* Support python 3.10\\n\\n### JavaScript\\n* [JavaScript] support fury for browser\\n* [JavaScript] support polymorphism\\n* [JavaScript] enhancement performance\\n\\n### Golang\\n* Implement Golang serialization framework, which support reference, pointer, data serialization\\n* Implement serializers for string/numbers/slice/map/slice/struct/pointer\\n\\n## What\'s Changed\\n* [JavaScript] enhancement performance and bugfix by @wangweipeng2 in https://github.com/alipay/fury/pull/811\\n* [JavaScript] support polymorphism by @wangweipeng2 in https://github.com/alipay/fury/pull/814\\n* Create SECURITY.md by @chaokunyang in https://github.com/alipay/fury/pull/817\\n* [JavaScript] fix bug #703 by @wangweipeng2 in https://github.com/alipay/fury/pull/819\\n* [Java] fix isSecure check for xlang in java by @chaokunyang in https://github.com/alipay/fury/pull/822\\n* [Doc] add  protocol wire format wip by @chaokunyang in https://github.com/alipay/fury/pull/823\\n* [JavaScript] write tag hash by @wangweipeng2 in https://github.com/alipay/fury/pull/825\\n* [JavaScript] support browser by @wangweipeng2 in https://github.com/alipay/fury/pull/830\\n* [Java] register empty object by default by @chaokunyang in https://github.com/alipay/fury/pull/829\\n* [Java] upgrade guava for CVE-2023-2976 by @chaokunyang in https://github.com/alipay/fury/pull/831\\n* [JavaScript]  detect platform wrong by @wangweipeng2 in https://github.com/alipay/fury/pull/832\\n* [JavaScript] add test by @wangweipeng2 in https://github.com/alipay/fury/pull/836\\n* [Java] Add compatible ci for JDK8/11/13/15/17 by @chaokunyang in https://github.com/alipay/fury/pull/835\\n* [Java] use java.lang.ClassValue to cache Lookup by @chaokunyang in https://github.com/alipay/fury/pull/844\\n* [Java] Refactor integration tests by @chaokunyang in https://github.com/alipay/fury/pull/845\\n* [Java] suppress maven download logs by --no-transfer-progress by @chaokunyang in https://github.com/alipay/fury/pull/846\\n* [Java] add missing jdk primitive function by @chaokunyang in https://github.com/alipay/fury/pull/848\\n* [Java] make getter lambda functions by @chaokunyang in https://github.com/alipay/fury/pull/849\\n* [Java] add record utils by @chaokunyang in https://github.com/alipay/fury/pull/850\\n* [Java] Support access record field value by @chaokunyang in https://github.com/alipay/fury/pull/851\\n* [Java] interpreter mode support for record serialization by @chaokunyang in https://github.com/alipay/fury/pull/852\\n* [CI] Fix checkstyle by @chaokunyang in https://github.com/alipay/fury/pull/853\\n* [Java] Support jdk record forward/backward interpreter serialization by @chaokunyang in https://github.com/alipay/fury/pull/854\\n* [Java] Support jdk record metashare mode by @chaokunyang in https://github.com/alipay/fury/pull/855\\n* [Java] move record utils to record pkg by @chaokunyang in https://github.com/alipay/fury/pull/856\\n* [Java] move inner functions outside by @chaokunyang in https://github.com/alipay/fury/pull/857\\n* [Python] Support pyarrow6 bazel build by @chaokunyang in https://github.com/alipay/fury/pull/859\\n* [Python] add missing shared lib for python by @chaokunyang in https://github.com/alipay/fury/pull/862\\n* [Python] fix python deploy by @chaokunyang in https://github.com/alipay/fury/pull/863\\n* [Java] Jdk record compatible jit by @chaokunyang in https://github.com/alipay/fury/pull/864\\n* [Java] JIT serialization for JDK record  by @chaokunyang in https://github.com/alipay/fury/pull/866\\n* [Java] support private record jit by @chaokunyang in https://github.com/alipay/fury/pull/869\\n* [Java] optimize buffer copy by @chaokunyang in https://github.com/alipay/fury/pull/870\\n* [Doc] Fix row format doc by @chaokunyang in https://github.com/alipay/fury/pull/873\\n* [Java] Support compress int long independently by @chaokunyang in https://github.com/alipay/fury/pull/875\\n* [Java] fix ofHashMap by @chaokunyang in https://github.com/alipay/fury/pull/877\\n* [Java] add jdk tools.jar for tests by @chaokunyang in https://github.com/alipay/fury/pull/881\\n* [Java] register common exception by @chaokunyang in https://github.com/alipay/fury/pull/879\\n* [Java] Fix lazy bean serializer by @chaokunyang in https://github.com/alipay/fury/pull/883\\n* [Java] print exception for fury creation by @chaokunyang in https://github.com/alipay/fury/pull/885\\n* [Java] remove getCurrentFury API by @chaokunyang in https://github.com/alipay/fury/pull/887\\n* [Java] Add fury map iterator api by @chaokunyang in https://github.com/alipay/fury/pull/889\\n* [Java] Add class checker API by @chaokunyang in https://github.com/alipay/fury/pull/890\\n* [Python] Fix python linux deploy missing shared library files by @chaokunyang in https://github.com/alipay/fury/pull/892\\n* [Java] refine AllowListChecker by @chaokunyang in https://github.com/alipay/fury/pull/893\\n* Update README.md by @chaokunyang in https://github.com/alipay/fury/pull/894\\n* [Java] support immutable collection/map jit and generics optimization by @chaokunyang in https://github.com/alipay/fury/pull/895\\n* [Java] cache generated guava constructor by @chaokunyang in https://github.com/alipay/fury/pull/897\\n* [Java] Optimize jdk9+ immutable collection serialization  by @chaokunyang in https://github.com/alipay/fury/pull/900\\n* [Java] add jdk20 tests by @chaokunyang in https://github.com/alipay/fury/pull/901\\n* [Java] optimize duplicate fields utils by @chaokunyang in https://github.com/alipay/fury/pull/905\\n* [Java] fix jit error for package-level field with private type by @chaokunyang in https://github.com/alipay/fury/pull/907\\n* [Java] update blacklist by @chaokunyang in https://github.com/alipay/fury/pull/913\\n* [Python] Use cloudpickle for local function serialization by @chaokunyang in https://github.com/alipay/fury/pull/914\\n* [Python] fix row format getter by @chaokunyang in https://github.com/alipay/fury/pull/915\\n* [Java] disable class check by default by @chaokunyang in https://github.com/alipay/fury/pull/917\\n* [Java] refine java docs by @chaokunyang in https://github.com/alipay/fury/pull/918\\n* Update blacklist.txt by @chaokunyang in https://github.com/alipay/fury/pull/920\\n* [Java] Skip `toString` in annotation invocation handler `readObject` by @chaokunyang in https://github.com/alipay/fury/pull/922\\n* Optimize StringBuilder/StringBuffer serialization by @pandalee99 in https://github.com/alipay/fury/pull/908\\n* Bump release versin to 0.1.2 by @chaokunyang in https://github.com/alipay/fury/pull/924\\n* [Doc] add basic type java format doc by @chaokunyang in https://github.com/alipay/fury/pull/928\\n* [Java] speed test codegen speed by avoid duplicate codegen by @chaokunyang in https://github.com/alipay/fury/pull/929\\n* [Java] Optimize collection serialization protocol by homogenization by @chaokunyang in https://github.com/alipay/fury/pull/923\\n* Bump org.apache.avro:avro from 1.11.1 to 1.11.3 in /java/fury-benchmark by @dependabot in https://github.com/alipay/fury/pull/931\\n* [Java] Rename classinfocache to classinfoholder by @chaokunyang in https://github.com/alipay/fury/pull/933\\n* [Java] put together all primitive serializers by @chaokunyang in https://github.com/alipay/fury/pull/934\\n* [Java] Fix jvm crash caused by varint out-of-bound writing by @chaokunyang in https://github.com/alipay/fury/pull/937\\n* [Java] enable int compression by default by @chaokunyang in https://github.com/alipay/fury/pull/935\\n* [Java] put together all fury related config classes into `config` package by @chaokunyang in https://github.com/alipay/fury/pull/940\\n* [Java] Add SLI(small long as int) long encoding algorithm by @chaokunyang in https://github.com/alipay/fury/pull/942\\n* [Java] use raw type serializer for getSerialzier in jit by @chaokunyang in https://github.com/alipay/fury/pull/943\\n* [Java] use varint for class id encoding to reduce space cost by @chaokunyang in https://github.com/alipay/fury/pull/945\\n* [Java] Fix Collection/Map jit/interpreter protocol inconsisitency for generics instantiated subclass by @chaokunyang in https://github.com/alipay/fury/pull/947\\n* [Go] add fury go util and ci tests by @chaokunyang in https://github.com/alipay/fury/pull/950\\n* [Go] add fury go buffer implementation by @chaokunyang in https://github.com/alipay/fury/pull/952\\n* [Go] add fury go serialization framework by @chaokunyang in https://github.com/alipay/fury/pull/954\\n* [Go] add serializers for common go types by @chaokunyang in https://github.com/alipay/fury/pull/956\\n* [Java] fix varint writeindex grow for jit by @chaokunyang in https://github.com/alipay/fury/pull/957\\n* [Go] add fury go map serializer by @chaokunyang in https://github.com/alipay/fury/pull/959\\n* [Go] add slice serializer for fury go by @chaokunyang in https://github.com/alipay/fury/pull/961\\n* [Go] add set serializer for fury go by @chaokunyang in https://github.com/alipay/fury/pull/963\\n* [Go] Add struct serializer for fury go  by @chaokunyang in https://github.com/alipay/fury/pull/965\\n* [Go] add ref tracking tests by @chaokunyang in https://github.com/alipay/fury/pull/967\\n* [Go] add fury type dispatch tests by @chaokunyang in https://github.com/alipay/fury/pull/969\\n* [Go] add fury serialization tests by @chaokunyang in https://github.com/alipay/fury/pull/971\\n* [Go] Add fury xlang tests by @chaokunyang in https://github.com/alipay/fury/pull/973\\n* [Go] rename Reference to Ref by @chaokunyang in https://github.com/alipay/fury/pull/975\\n* [Java] add jdk 21 tests by @chaokunyang in https://github.com/alipay/fury/pull/977\\n* [Java] add jdk 21 tests ci by @chaokunyang in https://github.com/alipay/fury/pull/978\\n* [Java] Optimize sli long read/write by @chaokunyang in https://github.com/alipay/fury/pull/981\\n* [Doc] upgrade docs by @chaokunyang in https://github.com/alipay/fury/pull/985  https://github.com/alipay/fury/pull/986 https://github.com/alipay/fury/pull/987\\n* [Java] add serializeJavaObject API to ThreadSafeFury by @chaokunyang in https://github.com/alipay/fury/pull/988\\n* [Java] fix jdk17/21 ci latest_jdk_tests skip by @chaokunyang in https://github.com/alipay/fury/pull/989\\n\\n## New Contributors\\n* @pandalee99 made their first contribution in https://github.com/alipay/fury/pull/908\\n* @ilxqx made their first contribution in https://github.com/fury-project/dubbo-serialization-fury/pull/1\\n* @T-baby made their first contribution in https://github.com/fury-project/dubbo-serialization-fury/pull/13\\n\\n**Full Changelog**: https://github.com/alipay/fury/compare/v0.1.0...v0.2.0"},{"id":"fury_0_1_2_release","metadata":{"permalink":"/blog/fury_0_1_2_release","source":"@site/blog/2023-09-27-fury_0_1_2_release.md","title":"Fury v0.1.2 released","description":"Author: chaokunyang","date":"2023-09-27T00:00:00.000Z","formattedDate":"September 27, 2023","tags":[{"label":"fury","permalink":"/blog/tags/fury"}],"readingTime":0.32,"hasTruncateMarker":true,"authors":[{"name":"Shawn Yang","title":"Maintainer of Fury","url":"https://github.com/chaokunyang","imageURL":"https://github.com/chaokunyang.png","key":"chaokunyang"}],"frontMatter":{"slug":"fury_0_1_2_release","title":"Fury v0.1.2 released","authors":["chaokunyang"],"tags":["fury"]},"unlisted":false,"prevItem":{"title":"Fury v0.2.0 released","permalink":"/blog/fury_0_2_0_release"},"nextItem":{"title":"Fury v0.1.1 released","permalink":"/blog/fury_0_1_1_release"}},"content":"\x3c!--truncate--\x3e\\n\\n# Fury v0.1.2 released\\n\\nAuthor: [chaokunyang](https://github.com/chaokunyang)\\n\\nI\'m pleased to announce the `0.1.2` release of Fury. This release is a enhanced verson based on fury `0.1.1`. It keeps binary compatibility with `0.1.0`/`0.1.1`.\\n\\n## What\'s Changed\\n-  [Java] Skip toString in annotation invocation handler readObject (#746)\\n- [Python] Use cloudpickle for local function serialization (#914)\\n- [Python] fix row format getter (#915)\\n\\n**Full Changelog**: https://github.com/alipay/fury/compare/v0.1.0...v0.1.1"},{"id":"fury_0_1_1_release","metadata":{"permalink":"/blog/fury_0_1_1_release","source":"@site/blog/2023-09-21-fury_0_1_1_release.md","title":"Fury v0.1.1 released","description":"Author: chaokunyang","date":"2023-09-21T00:00:00.000Z","formattedDate":"September 21, 2023","tags":[{"label":"fury","permalink":"/blog/tags/fury"}],"readingTime":0.975,"hasTruncateMarker":true,"authors":[{"name":"Shawn Yang","title":"Maintainer of Fury","url":"https://github.com/chaokunyang","imageURL":"https://github.com/chaokunyang.png","key":"chaokunyang"}],"frontMatter":{"slug":"fury_0_1_1_release","title":"Fury v0.1.1 released","authors":["chaokunyang"],"tags":["fury"]},"unlisted":false,"prevItem":{"title":"Fury v0.1.2 released","permalink":"/blog/fury_0_1_2_release"},"nextItem":{"title":"Fury v0.1.0 released","permalink":"/blog/fury_0_1_0_release"}},"content":"\x3c!--truncate--\x3e\\n\\n\\n# Fury v0.1.1 released\\n\\nAuthor: [chaokunyang](https://github.com/chaokunyang)\\n\\nI\'m pleased to announce the `0.1.1` release of Fury. This release is a enhanced verson based on fury `0.1.0`. It keeps binary compatibility with `0.1.0`.\\n\\n\\n## Highlights\\n- Java\\n  - Dubbo fury integration: https://github.com/fury-project/dubbo-serialization-fury\\n  -  Add class checker API to customize security check behaviour(#890)\\n- Python\\n  - Support pyarrow6 bazel build (#859 #862)\\n  - Support python 3.10 (#859 #862)\\n## What\'s Changed\\n- [Java] Dubbo fury integration: https://github.com/fury-project/dubbo-serialization-fury\\n- [Java] fix isSecure check for xlang in java (#822)\\n- [Java] register empty object by default (#829)\\n- [Java] upgrade guava for(#831)\\n- [Python] Support pyarrow6 bazel build (#859)\\n- [Python] add missing shared lib for python (#862)\\n- [Java] optimize buffer copy (#870)\\n- [Doc] Fix row format doc (#873)\\n- [Java] fix ofHashMap (#877)\\n- [Java] add jdk tools.jar for tests (#881)\\n- [Java] Fix lazy bean serializer (#883)\\n- [Java] print exception for fury creation (#885)\\n- [Java] remove getCurrentFury API (#887)\\n- [Java] Add fury map iterator api (#889)\\n- [Java] Add class checker API (#890)\\n- [Python] Fix python linux deploy missing shared library files (#892)\\n- [[Java] refine AllowListChecker (#893)\\n\\n**Full Changelog**: https://github.com/alipay/fury/compare/v0.1.0...v0.1.1"},{"id":"fury_0_1_0_release","metadata":{"permalink":"/blog/fury_0_1_0_release","source":"@site/blog/2023-07-15-fury_0_1_0_release.md","title":"Fury v0.1.0 released","description":"I\'m pleased to announce the 0.1.0 release of the Fury. Fury 0.1.0 is our first release since we started the development in github in 2023.04.28, and open sourced in 2023.07.15. This release includes many features: production-ready Java serialization, cross language serialization for Java/Python/JavaScript/Rust, row format support and so on.","date":"2023-07-15T00:00:00.000Z","formattedDate":"July 15, 2023","tags":[{"label":"fury","permalink":"/blog/tags/fury"}],"readingTime":22.825,"hasTruncateMarker":true,"authors":[{"name":"Shawn Yang","title":"Maintainer of Fury","url":"https://github.com/chaokunyang","imageURL":"https://github.com/chaokunyang.png","key":"chaokunyang"}],"frontMatter":{"slug":"fury_0_1_0_release","title":"Fury v0.1.0 released","authors":["chaokunyang"],"tags":["fury"]},"unlisted":false,"prevItem":{"title":"Fury v0.1.1 released","permalink":"/blog/fury_0_1_1_release"},"nextItem":{"title":"Fury - A blazing fast multi-language serialization framework powered by jit and zero-copy","permalink":"/blog/fury_blazing_fast_multiple_language_serialization_framework"}},"content":"I\'m pleased to announce the 0.1.0 release of the Fury. Fury 0.1.0 is our first release since we started the development in github in 2023.04.28, and open sourced in 2023.07.15. This release includes many features: production-ready Java serialization, cross language serialization for Java/Python/JavaScript/Rust, row format support and so on.\\n\\n\x3c!--truncate--\x3e\\n# Fury v0.1.0 released\\n\\nAuthor: [chaokunyang](https://github.com/chaokunyang)\\n\\nI\'m excited to release Fury v0.1.0 . Fury 0.1.0 is our first release since we started the development in github in 2023.04.28, and open sourced in 2023.07.15. \\n\\nIn this release we closed 314 issues, 412 PRs, and we have 5 new contributors. Thanks for their contributions to fury, looking forward to further cooperation with them.\\n\\nThis release includes many features, see more details on https://github.com/alipay/fury/releases/tag/v0.1.0:\\n- Production-ready java serialization: \\n  - Highly optimized Java serialization primives\\n  - Runtime codegen framework\\n  - Interpreter mode java serialization\\n  - JIT accelerated serializer for java serialization\\n  - Support async and multi-thread JIT\\n  - Support type forward-backward compatibility.\\n  - Support meta sharing to send class meta only once.\\n  - Support JDK custom serialization on fury natively. \\n  - Out-of-band zero-copy serialization for java\\n- Cross language Serialization\\n  - Support basic types cross-language between java/python/javascript/rust\\n  - Support struct cross-language automatically, no need for IDL definition\\n  - Supports shared and circular reference object serialization between java/python/javascript.\\n  - Support object polymorphism between java/python/javascript.\\n  - Out-of-band zero-copy serialization between java/python\\n- Row format\\n  - Support row format between java/python/c++.\\n  - Support lazy/partial deserialization.\\n  - Support convert to arrow format automatically.\\n\\n\\nWith this release, we take big strides towards our goal of making serialization fast, cross-language, unified and open.\\nFor details, please refer to the following commit messages.\\n\\nNote that javascript/rust support is still experimental, please let us know if you have any issues.\\n\\n## New Contributors\\n* @wangweipeng2 made their first contribution in https://github.com/alipay/fury/pull/215\\n* @rainsonGain made their first contribution in https://github.com/alipay/fury/pull/429\\n* @leeco-cloud made their first contribution in https://github.com/alipay/fury/pull/436\\n* @dependabot made their first contribution in https://github.com/alipay/fury/pull/590\\n* @tisonkun made their first contribution in https://github.com/alipay/fury/pull/762\\n* @hieu-ht made their first contribution in https://github.com/alipay/fury/pull/786\\n* @s31k31 made their first contribution in https://github.com/alipay/fury/pull/782\\n\\n## What\'s Changed\\n* Create pull_request_template.md by @chaokunyang in https://github.com/alipay/fury/pull/2\\n* add apache licence file by @chaokunyang in https://github.com/alipay/fury/pull/3\\n* [Java] add java code structure by @chaokunyang in https://github.com/alipay/fury/pull/4\\n* [Java] add java code formatter by @chaokunyang in https://github.com/alipay/fury/pull/5\\n* [Java] Add licence to file header by @chaokunyang in https://github.com/alipay/fury/pull/6\\n* [Docs] add fury debug doc by @chaokunyang in https://github.com/alipay/fury/pull/8\\n* [Docs] refine readme by fix syntax error by @chaokunyang in https://github.com/alipay/fury/pull/10\\n* [Community] add getting involved document by @chaokunyang in https://github.com/alipay/fury/pull/12\\n* [Java] add java ci by @chaokunyang in https://github.com/alipay/fury/pull/14\\n* [Java] fix license format conflict with checkstyle by @chaokunyang in https://github.com/alipay/fury/pull/16\\n* [Java] Add unsafe memory util by @chaokunyang in https://github.com/alipay/fury/pull/18\\n* [Java] add tuple2/tuple3 utils by @chaokunyang in https://github.com/alipay/fury/pull/20\\n* [Java] add LoggerFactory for disable logging more easily by @chaokunyang in https://github.com/alipay/fury/pull/22\\n* [Java] add string utils by @chaokunyang in https://github.com/alipay/fury/pull/24\\n* [Java] add memory read/write utils by @chaokunyang in https://github.com/alipay/fury/pull/26\\n* [Community] update slack invite link by @chaokunyang in https://github.com/alipay/fury/pull/27\\n* [Java] add cross-language type id by @chaokunyang in https://github.com/alipay/fury/pull/35\\n* [Java] Add api annotation to mark api stability by @chaokunyang in https://github.com/alipay/fury/pull/37\\n* [Java] add int array to avoid box cost by @chaokunyang in https://github.com/alipay/fury/pull/39\\n* [Java] add auto-growing object array by @chaokunyang in https://github.com/alipay/fury/pull/41\\n* [Java] Add optimized map for faster lookup by @chaokunyang in https://github.com/alipay/fury/pull/43\\n* [Java] add basic type inference support by @chaokunyang in https://github.com/alipay/fury/pull/45\\n* [Java] Add long map support by @chaokunyang in https://github.com/alipay/fury/pull/47\\n* [Java] add fury exceptions by @chaokunyang in https://github.com/alipay/fury/pull/48\\n* [Java] add MurmurHash3 support by @chaokunyang in https://github.com/alipay/fury/pull/50\\n* [Java] add Reflection support by @chaokunyang in https://github.com/alipay/fury/pull/52\\n* add FieldAccessor and fields compare by @chaokunyang in https://github.com/alipay/fury/pull/54\\n* [Java] implement basic compiler backend based on janino by @chaokunyang in https://github.com/alipay/fury/pull/56\\n* [Java] Add extensible classloaders by @chaokunyang in https://github.com/alipay/fury/pull/58\\n* [Java] Support multi key weak map by @chaokunyang in https://github.com/alipay/fury/pull/60\\n* [Java] codegen framework for fury java jit by @chaokunyang in https://github.com/alipay/fury/pull/61\\n* [Java] add utility for lambda functions by @chaokunyang in https://github.com/alipay/fury/pull/63\\n* [Java] add common expression ir for programing construct by @chaokunyang in https://github.com/alipay/fury/pull/64\\n* [Java] fix if expression with return child node by @chaokunyang in https://github.com/alipay/fury/pull/66\\n* [Java] add expression tree traverser and updater by @chaokunyang in https://github.com/alipay/fury/pull/68\\n* [Java] add missing author java odc by @chaokunyang in https://github.com/alipay/fury/pull/69\\n* [Java] add enum string resolver support by @chaokunyang in https://github.com/alipay/fury/pull/72\\n* [Java] add reference tracking support by @chaokunyang in https://github.com/alipay/fury/pull/74\\n* [Java] add java serializer interface by @chaokunyang in https://github.com/alipay/fury/pull/76\\n* [Java] add test utils by @chaokunyang in https://github.com/alipay/fury/pull/77\\n* [Java] add generics hierarchy resolving support by @chaokunyang in https://github.com/alipay/fury/pull/79\\n* [Java] add serialization context to relate serializing different objects by @chaokunyang in https://github.com/alipay/fury/pull/82\\n* [Java] add class info util by @chaokunyang in https://github.com/alipay/fury/pull/83\\n* [Java] add buffer callback by @chaokunyang in https://github.com/alipay/fury/pull/87\\n* [Java] implement basic java serialization framework by @chaokunyang in https://github.com/alipay/fury/pull/88\\n* [Java] Add string serializer by @chaokunyang in https://github.com/alipay/fury/pull/90\\n* [Java] add string builder/buffer serializers by @chaokunyang in https://github.com/alipay/fury/pull/93\\n* [Java] add missing uint serializers tests by @chaokunyang in https://github.com/alipay/fury/pull/95\\n* [Java] Implement enum serialization for java by @chaokunyang in https://github.com/alipay/fury/pull/97\\n* [Java] Implement bigint/decimal serialization for java by @chaokunyang in https://github.com/alipay/fury/pull/101\\n* [Community] add zhihu link by @chaokunyang in https://github.com/alipay/fury/pull/103\\n* [Community] fix zhihu link by @chaokunyang in https://github.com/alipay/fury/pull/104\\n* [Community] update slack desc by @chaokunyang in https://github.com/alipay/fury/pull/105\\n* [Java] Add object array serializer by @chaokunyang in https://github.com/alipay/fury/pull/107\\n* [Java] Implement primitive array serializers by @chaokunyang in https://github.com/alipay/fury/pull/109\\n* [Java] support serializing byte buffer by @chaokunyang in https://github.com/alipay/fury/pull/113\\n* [Java] support serializing java.util.concurrent.atomics by @chaokunyang in https://github.com/alipay/fury/pull/115\\n* [Java] move string array serializers by @chaokunyang in https://github.com/alipay/fury/pull/116\\n* [Java] support Currency serialization by @chaokunyang in https://github.com/alipay/fury/pull/118\\n* [Java] support charset serialization by @chaokunyang in https://github.com/alipay/fury/pull/120\\n* [Java] support URI serialization by @chaokunyang in https://github.com/alipay/fury/pull/122\\n* [Java] add support for regex serialization by @chaokunyang in https://github.com/alipay/fury/pull/124\\n* [Java] support uuid serialization by @chaokunyang in https://github.com/alipay/fury/pull/126\\n* [Java] add class serialization test by @chaokunyang in https://github.com/alipay/fury/pull/127\\n* [Java] add Locale Serializer support by @chaokunyang in https://github.com/alipay/fury/pull/129\\n* [Java] fix LocaleSerializer cache thread safety by @chaokunyang in https://github.com/alipay/fury/pull/132\\n* [Java] serialization support for java.util.OptionalXXX by @chaokunyang in https://github.com/alipay/fury/pull/134\\n* [Java] Add time serializers by @chaokunyang in https://github.com/alipay/fury/pull/137\\n* [Java] add ObjectInput/Output based on fury by @chaokunyang in https://github.com/alipay/fury/pull/139\\n* [Java] add JavaSerializer based on ObjectInputStream/ObjectOutputStream by @chaokunyang in https://github.com/alipay/fury/pull/141\\n* [Java] implement jdk proxy serialization by @chaokunyang in https://github.com/alipay/fury/pull/143\\n* [Java] implement Externalizable serialization by @chaokunyang in https://github.com/alipay/fury/pull/145\\n* [Java] implement Collection serialization by @chaokunyang in https://github.com/alipay/fury/pull/147\\n* [Java] add sortedset serializer by @chaokunyang in https://github.com/alipay/fury/pull/149\\n* [Java] add empty collection serializer by @chaokunyang in https://github.com/alipay/fury/pull/151\\n* [Java] add single collection serializers by @chaokunyang in https://github.com/alipay/fury/pull/153\\n* [Java] add ConcurrentSkipListSet serializer by @chaokunyang in https://github.com/alipay/fury/pull/155\\n* [Java] add java.util.Vector serializer by @chaokunyang in https://github.com/alipay/fury/pull/157\\n* [Java] add java.util.ArrayDeque serializer by @chaokunyang in https://github.com/alipay/fury/pull/159\\n* [Java] add java.util.EnumSet serializer by @chaokunyang in https://github.com/alipay/fury/pull/161\\n* [Java] implement java.util.BitSet serializer by @chaokunyang in https://github.com/alipay/fury/pull/163\\n* [Java] implement java.util.PriorityQueue serialization by @chaokunyang in https://github.com/alipay/fury/pull/165\\n* [Java] implement map serialization framework by @chaokunyang in https://github.com/alipay/fury/pull/167\\n* [Java] support java.util.SortedMap serialization by @chaokunyang in https://github.com/alipay/fury/pull/169\\n* [Java] support empty map serialization by @chaokunyang in https://github.com/alipay/fury/pull/171\\n* [Java] implement singleton map serialization by @chaokunyang in https://github.com/alipay/fury/pull/173\\n* [Java] support concurrent map serialization by @chaokunyang in https://github.com/alipay/fury/pull/175\\n* [Java] implement enum map serialization by @chaokunyang in https://github.com/alipay/fury/pull/177\\n* [Java] group and sort descriptors for cache and consistency by @chaokunyang in https://github.com/alipay/fury/pull/179\\n* [Java] Implement object serialization by @chaokunyang in https://github.com/alipay/fury/pull/181\\n* [Java] fury native lambda serialization for java by @chaokunyang in https://github.com/alipay/fury/pull/183\\n* Update feature_request.md by @chaokunyang in https://github.com/alipay/fury/pull/184\\n* Update bug_report.md by @chaokunyang in https://github.com/alipay/fury/pull/185\\n* Update bug_report.md by @chaokunyang in https://github.com/alipay/fury/pull/186\\n* [Java] Optimize Collections.synchronized serialization performance by @chaokunyang in https://github.com/alipay/fury/pull/188\\n* [Java] optimize unmodifiable serialization by @chaokunyang in https://github.com/alipay/fury/pull/191\\n* [Java] add native readResolve/writeReplace serialization support by @chaokunyang in https://github.com/alipay/fury/pull/193\\n* [Java] [1/N] support type forward/backward compatibility by @chaokunyang in https://github.com/alipay/fury/pull/196\\n* [Java] Add struct util to create test struct class dynamically by @chaokunyang in https://github.com/alipay/fury/pull/199\\n* Revert \\"[Java] Add struct util to create test struct class dynamically\\" by @chaokunyang in https://github.com/alipay/fury/pull/200\\n* [Java] Add struct util to create test struct class dynamically by @chaokunyang in https://github.com/alipay/fury/pull/201\\n* [Java][2/N] support type forward/backward compatibility by @chaokunyang in https://github.com/alipay/fury/pull/195\\n* [Java] Optimize subclass container serialization by @chaokunyang in https://github.com/alipay/fury/pull/205\\n* [Java] remove generated classes automatically by @chaokunyang in https://github.com/alipay/fury/pull/207\\n* [Java] implement collection serialization field by field by @chaokunyang in https://github.com/alipay/fury/pull/209\\n* [Java] implement java map serialization field by field by @chaokunyang in https://github.com/alipay/fury/pull/210\\n* [Java] optimize jdk compatible collection serializer by @chaokunyang in https://github.com/alipay/fury/pull/212\\n* [Java] support compatible map serialization by @chaokunyang in https://github.com/alipay/fury/pull/213\\n* [JavaScript] javascript of fury by @wangweipeng2 in https://github.com/alipay/fury/pull/215\\n* [JavaScript]Replace Nodejs lib by standard lib by @wangweipeng2 in https://github.com/alipay/fury/pull/217\\n* [JavaScript]Add test by @wangweipeng2 in https://github.com/alipay/fury/pull/219\\n* [JavaScript] Change package.json entry file by @wangweipeng2 in https://github.com/alipay/fury/pull/221\\n* Update feature_request.md by @chaokunyang in https://github.com/alipay/fury/pull/223\\n* [Java] implement fury-native jdk compatible object serialization by @chaokunyang in https://github.com/alipay/fury/pull/222\\n* [Java] Add class def for meta sharing by @chaokunyang in https://github.com/alipay/fury/pull/226\\n* [Java] Support meta shared serialization by @chaokunyang in https://github.com/alipay/fury/pull/225\\n* [Java] add missing license to ObjectStreamSerializer by @chaokunyang in https://github.com/alipay/fury/pull/228\\n* [Java] move loadClass to ClassUtils by @chaokunyang in https://github.com/alipay/fury/pull/229\\n* [javascript] add javascript ci by @chaokunyang in https://github.com/alipay/fury/pull/230\\n* Fix CI by @chaokunyang in https://github.com/alipay/fury/pull/232\\n* [Java] forbid classes serialization by blacklist by @chaokunyang in https://github.com/alipay/fury/pull/234\\n* [Java] generate field accessor on the flight by @chaokunyang in https://github.com/alipay/fury/pull/240\\n* [Java] expression optimizer for method split by @chaokunyang in https://github.com/alipay/fury/pull/241\\n* [JavaScript]Fix ci by @wangweipeng2 in https://github.com/alipay/fury/pull/242\\n* [Java] add codec builder base class by @chaokunyang in https://github.com/alipay/fury/pull/244\\n* [Java] add jdk serializable check by @chaokunyang in https://github.com/alipay/fury/pull/248\\n* [Java] add base object serializer builder by @chaokunyang in https://github.com/alipay/fury/pull/249\\n* [Java] Implement jit serialization for object by @chaokunyang in https://github.com/alipay/fury/pull/250\\n* [Java] Fix meta shared serializer when jit enabled by @chaokunyang in https://github.com/alipay/fury/pull/252\\n* Update bug_report.md by @chaokunyang in https://github.com/alipay/fury/pull/253\\n* [Java] type forward/backward compatible jit serializer by @chaokunyang in https://github.com/alipay/fury/pull/254\\n* [Java] Meta shared object jit serializer by @chaokunyang in https://github.com/alipay/fury/pull/255\\n* [Java] jit context for manage compilation by @chaokunyang in https://github.com/alipay/fury/pull/259\\n* [Java] fix javaFury thread safety by @chaokunyang in https://github.com/alipay/fury/pull/261\\n* [Java] set rootdir for maven multi-module project by @chaokunyang in https://github.com/alipay/fury/pull/263\\n* [Java] add guava immutable list serializer by @chaokunyang in https://github.com/alipay/fury/pull/264\\n* [Java] add guava immutable map serializer by @chaokunyang in https://github.com/alipay/fury/pull/266\\n* [Java] Async compilation for jit serializers by @chaokunyang in https://github.com/alipay/fury/pull/268\\n* [Java] add url serializer by @chaokunyang in https://github.com/alipay/fury/pull/269\\n* [Java] optimize java serialization by @chaokunyang in https://github.com/alipay/fury/pull/271\\n* [Java] bind fury with classloader by @chaokunyang in https://github.com/alipay/fury/pull/274\\n* [Java] add forward serializer by @chaokunyang in https://github.com/alipay/fury/pull/276\\n* [Java] add thread-safe fury serializer by @chaokunyang in https://github.com/alipay/fury/pull/278\\n* [Java] Add guava/sublist todo serializer by @chaokunyang in https://github.com/alipay/fury/pull/282\\n* [Java] add zero-copy tests by @chaokunyang in https://github.com/alipay/fury/pull/284\\n* [Java] Profiling fury init by @chaokunyang in https://github.com/alipay/fury/pull/286\\n* [Java] add complex cyclic tests by @chaokunyang in https://github.com/alipay/fury/pull/288\\n* [Java] enable testArrayStructZeroCopy by @chaokunyang in https://github.com/alipay/fury/pull/290\\n* [Java] add complex collection struct tests by @chaokunyang in https://github.com/alipay/fury/pull/292\\n* [Java] add complex map struct tests by @chaokunyang in https://github.com/alipay/fury/pull/294\\n* [Java] misc serializer tests by @chaokunyang in https://github.com/alipay/fury/pull/295\\n* [Java] optimize time reference by @chaokunyang in https://github.com/alipay/fury/pull/297\\n* [Java] add unsafe accessor test for duplicate fields by @chaokunyang in https://github.com/alipay/fury/pull/299\\n* [Java] add serializer factory test by @chaokunyang in https://github.com/alipay/fury/pull/301\\n* [Java] add duplicate fields tests by @chaokunyang in https://github.com/alipay/fury/pull/303\\n* [Java] add protocol interoperability tests by @chaokunyang in https://github.com/alipay/fury/pull/305\\n* [Java] Lazy map support by @chaokunyang in https://github.com/alipay/fury/pull/307\\n* [Java] Support deserialize unexisted classes by @chaokunyang in https://github.com/alipay/fury/pull/309\\n* [Java] fix OutOfBandTest pkg by @chaokunyang in https://github.com/alipay/fury/pull/310\\n* javascript latin1 string performance improvement by @wangweipeng2 in https://github.com/alipay/fury/pull/312\\n* [Java] Add row format interface by @chaokunyang in https://github.com/alipay/fury/pull/316\\n* [Java] add Default arrow type visitor by @chaokunyang in https://github.com/alipay/fury/pull/318\\n* [Java] add decimal util by @chaokunyang in https://github.com/alipay/fury/pull/320\\n* [Java] add pyarrow style data types API in java by @chaokunyang in https://github.com/alipay/fury/pull/322\\n* [Java] add fury InputStream/OutputStream by @chaokunyang in https://github.com/alipay/fury/pull/324\\n* [Java] Infer arrow schema for java bean by @chaokunyang in https://github.com/alipay/fury/pull/326\\n* [Java] add bitmap utils by @chaokunyang in https://github.com/alipay/fury/pull/328\\n* [Java] binary row format data structure by @chaokunyang in https://github.com/alipay/fury/pull/330\\n* [Java] binary row format writer by @chaokunyang in https://github.com/alipay/fury/pull/333\\n* [Java] add arrow visitor for value accessor by @chaokunyang in https://github.com/alipay/fury/pull/335\\n* [Java] add row format tests by @chaokunyang in https://github.com/alipay/fury/pull/337\\n* [Java] add row format encoder interface by @chaokunyang in https://github.com/alipay/fury/pull/339\\n* [Java] Base builder for building jit encoder by @chaokunyang in https://github.com/alipay/fury/pull/341\\n* [Java] add jit-based row encoder implementation by @chaokunyang in https://github.com/alipay/fury/pull/343\\n* [Java] format code by @chaokunyang in https://github.com/alipay/fury/pull/344\\n* [Java] add missing license by @chaokunyang in https://github.com/alipay/fury/pull/345\\n* [Java] Add fury channel by @chaokunyang in https://github.com/alipay/fury/pull/346\\n* [Java] Mock io for count bytes by @chaokunyang in https://github.com/alipay/fury/pull/349\\n* [Java] Arrow record batch zero-copy serializers by @chaokunyang in https://github.com/alipay/fury/pull/351\\n* [Java] Add missing license by @chaokunyang in https://github.com/alipay/fury/pull/352\\n* [Java] optimize decimal encoding performance by @chaokunyang in https://github.com/alipay/fury/pull/354\\n* [Java] optimize schema creation perf by @chaokunyang in https://github.com/alipay/fury/pull/356\\n* [Java] update row javadoc by @chaokunyang in https://github.com/alipay/fury/pull/357\\n* [Java] Support convert row to arrow format by @chaokunyang in https://github.com/alipay/fury/pull/359\\n* [Java] add arrow serializers tests  by @chaokunyang in https://github.com/alipay/fury/pull/361\\n* [Java] fix arrow tests by @chaokunyang in https://github.com/alipay/fury/pull/362\\n* [Java] add serialize to buffer tests by @chaokunyang in https://github.com/alipay/fury/pull/364\\n* [Java] add basic cross-langauge serialization tests by @chaokunyang in https://github.com/alipay/fury/pull/366\\n* [Java] add serializeBeanTest by @chaokunyang in https://github.com/alipay/fury/pull/367\\n* [Java] add registerTest by @chaokunyang in https://github.com/alipay/fury/pull/368\\n* [Java] add testTreeMap by @chaokunyang in https://github.com/alipay/fury/pull/369\\n* [Java] add offheap tests by @chaokunyang in https://github.com/alipay/fury/pull/371\\n* [Java] refine classresovler tests by @chaokunyang in https://github.com/alipay/fury/pull/373\\n* [Java] add private bean tests by @chaokunyang in https://github.com/alipay/fury/pull/375\\n* [Java] add blocking queue test by @chaokunyang in https://github.com/alipay/fury/pull/377\\n* [Java] add duplicate fields test by @chaokunyang in https://github.com/alipay/fury/pull/378\\n* [Java] add guava tests by @chaokunyang in https://github.com/alipay/fury/pull/381\\n* [Java] add test for jdk serializable check by @chaokunyang in https://github.com/alipay/fury/pull/383\\n* [Java] add secure mode test by @chaokunyang in https://github.com/alipay/fury/pull/385\\n* [Java] ensure fury doesn\'t introduce class leak by @chaokunyang in https://github.com/alipay/fury/pull/387\\n* [Java] add tests for ignoring fields  by @chaokunyang in https://github.com/alipay/fury/pull/389\\n* [Java] add thread to blacklist by @chaokunyang in https://github.com/alipay/fury/pull/391\\n* [Java] Add complex testsuite by @chaokunyang in https://github.com/alipay/fury/pull/393\\n* [Java] add benchmark framework by @chaokunyang in https://github.com/alipay/fury/pull/399\\n* [Java] add plotting tool by @chaokunyang in https://github.com/alipay/fury/pull/400\\n* [Java] add usertype benchmarks by @chaokunyang in https://github.com/alipay/fury/pull/401\\n* [Java] Add string benchmarks by @chaokunyang in https://github.com/alipay/fury/pull/403\\n* [Java] add array benchmark by @chaokunyang in https://github.com/alipay/fury/pull/405\\n* [Java] add map benchmark by @chaokunyang in https://github.com/alipay/fury/pull/409\\n* [Java] add memory benchmark by @chaokunyang in https://github.com/alipay/fury/pull/410\\n* [Java] add row format benchmark by @chaokunyang in https://github.com/alipay/fury/pull/411\\n* [Java] add zero copy benchmark by @chaokunyang in https://github.com/alipay/fury/pull/413\\n* [Java] Add flatbufffer/protobuffer benchmarks by @chaokunyang in https://github.com/alipay/fury/pull/415\\n* [Java] update integration_tests readme by @chaokunyang in https://github.com/alipay/fury/pull/416\\n* [C++] generate arrow bazel depdencies from pyarrow bundled shared library  by @chaokunyang in https://github.com/alipay/fury/pull/418\\n* [C++] Add bazel C++ build support by @chaokunyang in https://github.com/alipay/fury/pull/420\\n* [C++] add c++ logging util by @chaokunyang in https://github.com/alipay/fury/pull/423\\n* [C++] add cpp status util by @chaokunyang in https://github.com/alipay/fury/pull/425\\n* [C++] basic util for bytes operations  by @chaokunyang in https://github.com/alipay/fury/pull/427\\n* Update bug_report.md by @chaokunyang in https://github.com/alipay/fury/pull/430\\n* [Java] register class check duplciate id  by @chaokunyang in https://github.com/alipay/fury/pull/432\\n* [Java] move ExpressionOptimizer into codegen package by @chaokunyang in https://github.com/alipay/fury/pull/433\\n* Format/container encoder by @rainsonGain in https://github.com/alipay/fury/pull/429\\n* [Java] Thread-safe fury implementation by pooling by @leeco-cloud in https://github.com/alipay/fury/pull/436\\n* [C++] Add c++ buffer util  by @chaokunyang in https://github.com/alipay/fury/pull/438\\n* [CI] fix CI by @chaokunyang in https://github.com/alipay/fury/pull/439\\n* [C++] Binary row format for c++  by @chaokunyang in https://github.com/alipay/fury/pull/441\\n* [C++] C++ row format to arrow by @chaokunyang in https://github.com/alipay/fury/pull/442\\n* [C++] Add c++ ci by @chaokunyang in https://github.com/alipay/fury/pull/444\\n* [CI] Add code lint ci job by @chaokunyang in https://github.com/alipay/fury/pull/446\\n* [Doc] Add c++ debugging doc by @chaokunyang in https://github.com/alipay/fury/pull/448\\n* [Python] [1/n] Fury python binding by @chaokunyang in https://github.com/alipay/fury/pull/450\\n* [python] Type infer for python by @chaokunyang in https://github.com/alipay/fury/pull/458\\n* [Java] skip checkstyle in java test by @chaokunyang in https://github.com/alipay/fury/pull/459\\n* [Python] Fix python ci by @chaokunyang in https://github.com/alipay/fury/pull/461\\n* [Python] Python row format by @chaokunyang in https://github.com/alipay/fury/pull/463\\n* [Python] Python encoder for row format by @chaokunyang in https://github.com/alipay/fury/pull/466\\n* [Python] Row and arrow format converter by @chaokunyang in https://github.com/alipay/fury/pull/467\\n* [C++] cpp murmurhash by @chaokunyang in https://github.com/alipay/fury/pull/469\\n* [Python] Python murmur hash binding by @chaokunyang in https://github.com/alipay/fury/pull/472\\n* [Python] add weak key identity map by @chaokunyang in https://github.com/alipay/fury/pull/474\\n* [Python] add reference resolver by @chaokunyang in https://github.com/alipay/fury/pull/476\\n* [Python] Implement python serialization framework by @chaokunyang in https://github.com/alipay/fury/pull/478\\n* [Python] add common python serializers by @chaokunyang in https://github.com/alipay/fury/pull/480\\n* [Python] struct serialization support  by @chaokunyang in https://github.com/alipay/fury/pull/482\\n* [Java] Fix get super type exception by @chaokunyang in https://github.com/alipay/fury/pull/484\\n* [Java] fix map final value type serializer in jit compatible mode by @chaokunyang in https://github.com/alipay/fury/pull/485\\n* [Docs] add fury logo by @chaokunyang in https://github.com/alipay/fury/pull/487\\n* [Docs] add square fury logo by @chaokunyang in https://github.com/alipay/fury/pull/488\\n* [python] add cpp reference resolver based on abseil map by @chaokunyang in https://github.com/alipay/fury/pull/493\\n* [python] add cpp class resolver by @chaokunyang in https://github.com/alipay/fury/pull/494\\n* [Python] cython serialization framework by @chaokunyang in https://github.com/alipay/fury/pull/496\\n* [Python] cython basic serializers by @chaokunyang in https://github.com/alipay/fury/pull/501\\n* [Python] cython container serializers by @chaokunyang in https://github.com/alipay/fury/pull/502\\n* [Pyhton] cython array serializers by @chaokunyang in https://github.com/alipay/fury/pull/503\\n* [Python] cython struct serializer by @chaokunyang in https://github.com/alipay/fury/pull/505\\n* [Python] cython misc serializers by @chaokunyang in https://github.com/alipay/fury/pull/506\\n* [Python] Unify cython python serializer by @chaokunyang in https://github.com/alipay/fury/pull/507\\n* [Python] Codegen serialization support by @chaokunyang in https://github.com/alipay/fury/pull/509\\n* [Python] Support arrow serialization in objgraph by @chaokunyang in https://github.com/alipay/fury/pull/515\\n* [Python] Add common pytests by @chaokunyang in https://github.com/alipay/fury/pull/517\\n* [C++] pin bazel to 4.2.0 by @chaokunyang in https://github.com/alipay/fury/pull/519\\n* [Community] Update contacts about wechat/dingding by @chaokunyang in https://github.com/alipay/fury/pull/521\\n* [Java] support struct cross language serialization by @chaokunyang in https://github.com/alipay/fury/pull/523\\n* [Java] add java/python cross language row format tests by @chaokunyang in https://github.com/alipay/fury/pull/525\\n* feat: fix qrcode size in readme by @wangweipeng2 in https://github.com/alipay/fury/pull/526\\n* [Java] replace io.furyx with org.furyio by @chaokunyang in https://github.com/alipay/fury/pull/527\\n* [Java] Add missing map license by @chaokunyang in https://github.com/alipay/fury/pull/529\\n* [Java] reduce string serializer caller stack by jit by @chaokunyang in https://github.com/alipay/fury/pull/531\\n* [Java] fix nested map generics by @chaokunyang in https://github.com/alipay/fury/pull/533\\n* [Java] fix jdk11 string jit serialization by @chaokunyang in https://github.com/alipay/fury/pull/535\\n* [JavaScript] improve write performance by @wangweipeng2 in https://github.com/alipay/fury/pull/538\\n* [Java] refine java benchmarks by @chaokunyang in https://github.com/alipay/fury/pull/536\\n* [Java] fix fury java kryo/fst benchmark classloading by @chaokunyang in https://github.com/alipay/fury/pull/542\\n* [Java] Unsafe method invoke optimization by @chaokunyang in https://github.com/alipay/fury/pull/543\\n* [Java] Optimize string serialization mem ops by @chaokunyang in https://github.com/alipay/fury/pull/545\\n* [Java] Optimze jit generated code by @chaokunyang in https://github.com/alipay/fury/pull/548\\n* [Java] Optimize primitive fields jit read/write by @chaokunyang in https://github.com/alipay/fury/pull/550\\n* [Java] Fix benchmark plot by @chaokunyang in https://github.com/alipay/fury/pull/554\\n* [Java] Upload benchmark data by @chaokunyang in https://github.com/alipay/fury/pull/555\\n* [Docs] Update benchmarks by @chaokunyang in https://github.com/alipay/fury/pull/560\\n* [Docs] use a smaller size for benchmark plots by @chaokunyang in https://github.com/alipay/fury/pull/561\\n* [Docs] update docs by @chaokunyang in https://github.com/alipay/fury/pull/565\\n* [Doc] update docs by @chaokunyang in https://github.com/alipay/fury/pull/566\\n* [Docs] update readme by @chaokunyang in https://github.com/alipay/fury/pull/567\\n* [JavaScript] Import js write performance by @wangweipeng2 in https://github.com/alipay/fury/pull/569\\n* [Docs ] fix benchmarks figures align by @chaokunyang in https://github.com/alipay/fury/pull/571\\n* [Docs] fix python typehint comment by @chaokunyang in https://github.com/alipay/fury/pull/572\\n* [Docs] add row format to arrow conversion java example by @chaokunyang in https://github.com/alipay/fury/pull/573\\n* [JavaScript] update benchmark by @wangweipeng2 in https://github.com/alipay/fury/pull/574\\n* [JavaScript] easy type description by @wangweipeng2 in https://github.com/alipay/fury/pull/576\\n* [JavaScript] add generic constraints to the serializer by @wangweipeng2 in https://github.com/alipay/fury/pull/577\\n* [Docs] Refine benchmark plots by @chaokunyang in https://github.com/alipay/fury/pull/578\\n* [Docs] fix java header by @chaokunyang in https://github.com/alipay/fury/pull/582\\n* [Python] support secure mode for python by @chaokunyang in https://github.com/alipay/fury/pull/584\\n* [Docs] update readme speedup by @chaokunyang in https://github.com/alipay/fury/pull/585\\n* [Docs] remove `Binary Serialization` from header by @chaokunyang in https://github.com/alipay/fury/pull/586\\n* [Docs] add Serialization to header by @chaokunyang in https://github.com/alipay/fury/pull/587\\n* [Docs] fix invalid image links in cpp debug doc by @chaokunyang in https://github.com/alipay/fury/pull/589\\n* Bump protobuf-java from 3.11.0 to 3.16.3 in /java/fury-benchmark by @dependabot in https://github.com/alipay/fury/pull/590\\n* Bump testng from 7.3.0 to 7.5.1 in /java by @dependabot in https://github.com/alipay/fury/pull/591\\n* Bump checkstyle from 8.19 to 8.29 in /java by @dependabot in https://github.com/alipay/fury/pull/592\\n* Bump guava from 30.0-jre to 32.0.0-jre in /java by @dependabot in https://github.com/alipay/fury/pull/593\\n* Bump protobuf-java from 3.15.0 to 3.16.3 in /integration_tests by @dependabot in https://github.com/alipay/fury/pull/594\\n* [Java] replace log4j by log4j2 for test modules by @chaokunyang in https://github.com/alipay/fury/pull/595\\n* [JavaScript] update benchmark by @wangweipeng2 in https://github.com/alipay/fury/pull/597\\n* [Java] rename reference to ref by @chaokunyang in https://github.com/alipay/fury/pull/599\\n* [Java] fix checkstyle failure by @chaokunyang in https://github.com/alipay/fury/pull/602\\n* [Java] fix missing reference renaming by @chaokunyang in https://github.com/alipay/fury/pull/603\\n* [Java] Rename requireClassRegistration by @chaokunyang in https://github.com/alipay/fury/pull/604\\n* [JavaScript]: remove dependency on v8 by @wangweipeng2 in https://github.com/alipay/fury/pull/606\\n* [Rust] Add readme for fury rust by @chaokunyang in https://github.com/alipay/fury/pull/607\\n* [Java] add missing license for java code by @chaokunyang in https://github.com/alipay/fury/pull/608\\n* [Java] update java benchmarks by @chaokunyang in https://github.com/alipay/fury/pull/609\\n* [Docs] update java benchmarks chart size by @chaokunyang in https://github.com/alipay/fury/pull/610\\n* [Docs] use same color for fury best performance by @chaokunyang in https://github.com/alipay/fury/pull/611\\n* [Java] add MetaContext tests by @chaokunyang in https://github.com/alipay/fury/pull/613\\n* [Java] Add java misc tests by @chaokunyang in https://github.com/alipay/fury/pull/614\\n* [Java] Add codegen class loading/gc tests by @chaokunyang in https://github.com/alipay/fury/pull/616\\n* [Java] add warn logs when requireClassRegistration disabled by @chaokunyang in https://github.com/alipay/fury/pull/618\\n* [Docs] Add java adcanced user guide doc by @chaokunyang in https://github.com/alipay/fury/pull/621\\n* [Docs] Update java advanced doc by @chaokunyang in https://github.com/alipay/fury/pull/625\\n* [JavaScript] Eliminate polymorphism in JS code by @wangweipeng2 in https://github.com/alipay/fury/pull/627\\n* [Python] rename reference to ref for python by @chaokunyang in https://github.com/alipay/fury/pull/629\\n* [Java/Python] Rename crosslanguage to x by @chaokunyang in https://github.com/alipay/fury/pull/631\\n* [JavaScript] reduce generated code size by @wangweipeng2 in https://github.com/alipay/fury/pull/633\\n* [Java] update java snapshot url by @chaokunyang in https://github.com/alipay/fury/pull/635\\n* [CI] Enable Fury CI by @chaokunyang in https://github.com/alipay/fury/pull/636\\n* [Docs] add benchmark data by @chaokunyang in https://github.com/alipay/fury/pull/639\\n* [Doc] use camel naming for benchmark class doc by @chaokunyang in https://github.com/alipay/fury/pull/640\\n* [Docs] Update security doc by @chaokunyang in https://github.com/alipay/fury/pull/642\\n* [Java] update license for Generics by @chaokunyang in https://github.com/alipay/fury/pull/644\\n* [Java] fix generics license length by @chaokunyang in https://github.com/alipay/fury/pull/645\\n* [Java] update java security doc by @chaokunyang in https://github.com/alipay/fury/pull/646\\n* [Go] update golang readme by @chaokunyang in https://github.com/alipay/fury/pull/648\\n* [Doc] replace Fury.Language by Language by @chaokunyang in https://github.com/alipay/fury/pull/650\\n* [Java] update java row readme by @chaokunyang in https://github.com/alipay/fury/pull/651\\n* [Java] register guava serializers ahead by @chaokunyang in https://github.com/alipay/fury/pull/654\\n* [Docs] split user guide doc into 3 parts to sync with website by @chaokunyang in https://github.com/alipay/fury/pull/665\\n* [Docs]  move guide docs to guide by @chaokunyang in https://github.com/alipay/fury/pull/667\\n* [Doc] sync files to home site by @wangweipeng2 in https://github.com/alipay/fury/pull/666\\n* [Java] Fix  IndexOutOfBoundsException when new fury deserialize from InputStream by @chaokunyang in https://github.com/alipay/fury/pull/671\\n* [Doc] support front matter by @wangweipeng2 in https://github.com/alipay/fury/pull/672\\n* [Doc] rename inner fury to f when creating ThreadSafeFury by @chaokunyang in https://github.com/alipay/fury/pull/676\\n* [Java] Support string zerocopy for jdk14+ by @chaokunyang in https://github.com/alipay/fury/pull/677\\n* [CI] Add deploy script by @chaokunyang in https://github.com/alipay/fury/pull/688\\n* [Java] Support maven release by @chaokunyang in https://github.com/alipay/fury/pull/691\\n* [Doc] add java release jar for v0.1.0-alpha.1 by @chaokunyang in https://github.com/alipay/fury/pull/693\\n* [Doc] Fix release jar doc by @chaokunyang in https://github.com/alipay/fury/pull/694\\n* [Doc] Refine readme for more readability  by @chaokunyang in https://github.com/alipay/fury/pull/695\\n* [Java] Add detailed lambda error by @chaokunyang in https://github.com/alipay/fury/pull/698\\n* [Doc] Fix threadsafe example by @chaokunyang in https://github.com/alipay/fury/pull/699\\n* [Docs] fix threadsafe fury in java guide by @chaokunyang in https://github.com/alipay/fury/pull/700\\n* [Docs] remove bracket from classLoader by @chaokunyang in https://github.com/alipay/fury/pull/701\\n* [Java] add maven source plugin by @chaokunyang in https://github.com/alipay/fury/pull/702\\n* [Java] Jdk serialization binary check by @chaokunyang in https://github.com/alipay/fury/pull/714\\n* [Java] add jdk migration doc by @chaokunyang in https://github.com/alipay/fury/pull/715\\n* [Java] Support jit for non public classes by @chaokunyang in https://github.com/alipay/fury/pull/719\\n* [Rust] rust lang initial version by @wangweipeng2 in https://github.com/alipay/fury/pull/718\\n* [Java] add type tag registration check by @chaokunyang in https://github.com/alipay/fury/pull/722\\n* [Doc] highlight warmup by @chaokunyang in https://github.com/alipay/fury/pull/723\\n* [Rust ] calculate the reserved space on compile time by @wangweipeng2 in https://github.com/alipay/fury/pull/725\\n* [Java/Python] disable reference tracking by default by @chaokunyang in https://github.com/alipay/fury/pull/727\\n* [Java] debug log code stats by @chaokunyang in https://github.com/alipay/fury/pull/728\\n* [Java] upgrade java install to 0.1.0-alpha.2 by @chaokunyang in https://github.com/alipay/fury/pull/731\\n* [Doc] use fury png logo by @chaokunyang in https://github.com/alipay/fury/pull/733\\n* [Doc] remove margin fury png logo by @chaokunyang in https://github.com/alipay/fury/pull/734\\n* [Doc] Refine logo and icon by @chaokunyang in https://github.com/alipay/fury/pull/735\\n* [ Rust ] Make the protocols of rust and js consistent by @wangweipeng2 in https://github.com/alipay/fury/pull/738\\n* [JavaScript] Make the protocols of rust and js consistent by @wangweipeng2 in https://github.com/alipay/fury/pull/739\\n* [Java] Remove guava from userdoc by @chaokunyang in https://github.com/alipay/fury/pull/740\\n* [Java] rename writeNonRefT to writeNonRef by @chaokunyang in https://github.com/alipay/fury/pull/743\\n* [Java] Optimize object array serialization by @chaokunyang in https://github.com/alipay/fury/pull/741\\n* [Java] avoid reflection in resolve/replace by @chaokunyang in https://github.com/alipay/fury/pull/744\\n* [Java] avoid reflection in writeObject/readOject/readObjectNoData by @chaokunyang in https://github.com/alipay/fury/pull/747\\n* [Java] optimize guava list serialization by @chaokunyang in https://github.com/alipay/fury/pull/748\\n* [Java] add MakeJDKFunction lambda factory by @chaokunyang in https://github.com/alipay/fury/pull/752\\n* [Java] Optimize guava List/Map/Set serialization by @chaokunyang in https://github.com/alipay/fury/pull/750\\n* [Doc] Add contributing guide doc  by @chaokunyang in https://github.com/alipay/fury/pull/759\\n* [Doc] Create CODE_OF_CONDUCT.md by @chaokunyang in https://github.com/alipay/fury/pull/761\\n* [Doc] Fix broken link in README by @tisonkun in https://github.com/alipay/fury/pull/762\\n* [Rust] Several Rust idioms by @tisonkun in https://github.com/alipay/fury/pull/763\\n* [Java] fix write replace class failure by @chaokunyang in https://github.com/alipay/fury/pull/767\\n* [Java] replace withSecureMode by requireClassRegistration API by @chaokunyang in https://github.com/alipay/fury/pull/768\\n* [Doc] Update README.md by @chaokunyang in https://github.com/alipay/fury/pull/770\\n* [Doc] add javadoc for FuryBuilder by @chaokunyang in https://github.com/alipay/fury/pull/775\\n* [Doc] add doc for fury creation reuse by @chaokunyang in https://github.com/alipay/fury/pull/777\\n* [Java][Python] auto deploy java/python packages by @chaokunyang in https://github.com/alipay/fury/pull/781\\n* [Java] refine FuryBuilder API by @chaokunyang in https://github.com/alipay/fury/pull/784\\n* [CI] skip release tests by @chaokunyang in https://github.com/alipay/fury/pull/785\\n* Corrected grammar and paraphrasing to make the README easier to read by @hieu-ht in https://github.com/alipay/fury/pull/786\\n* Don\'t let CI run when the changed files are not the code by @hieu-ht in https://github.com/alipay/fury/pull/787\\n* [Java] use lambda for SynchronizedSerializers factory by @chaokunyang in https://github.com/alipay/fury/pull/789\\n* [Java] use lambda for unmodifiable serializers factory by @chaokunyang in https://github.com/alipay/fury/pull/790\\n* [Python] replace alpha/beta to a/b for python by @chaokunyang in https://github.com/alipay/fury/pull/792\\n* [Python] fix python bump version by @chaokunyang in https://github.com/alipay/fury/pull/793\\n* [CI] Fix bump version by @chaokunyang in https://github.com/alipay/fury/pull/795\\n* [CI] Fix py release by @chaokunyang in https://github.com/alipay/fury/pull/796\\n* [Doc] update python and java install by @chaokunyang in https://github.com/alipay/fury/pull/797\\n* Update README.md by @chaokunyang in https://github.com/alipay/fury/pull/800\\n* [Doc] Update java install version to 0.1.0-alpah.5 by @chaokunyang in https://github.com/alipay/fury/pull/801\\n* [CI] Fix pypi upload by @chaokunyang in https://github.com/alipay/fury/pull/803\\n* [Java] Add core java developer to maven pom by @chaokunyang in https://github.com/alipay/fury/pull/802\\n* [Java] add core java developer to maven modules pom by @chaokunyang in https://github.com/alipay/fury/pull/804\\n* [Java] support decode utf8 for java string serialization by @chaokunyang in https://github.com/alipay/fury/pull/806\\n* Update Java Deserialization Blacklist by @s31k31 in https://github.com/alipay/fury/pull/782\\n* chore: apply license format by @tisonkun in https://github.com/alipay/fury/pull/783\\n* [Java] use soft reference to avoid duplicate codegen by @chaokunyang in https://github.com/alipay/fury/pull/809\\n\\n**Full Changelog**: https://github.com/alipay/fury/commits/v0.1.0"},{"id":"fury_blazing_fast_multiple_language_serialization_framework","metadata":{"permalink":"/blog/fury_blazing_fast_multiple_language_serialization_framework","source":"@site/blog/2023-07-15-fury_blazing_fast_multiple_language_serialization_framework.md","title":"Fury - A blazing fast multi-language serialization framework powered by jit and zero-copy","description":"Fury is a multi-language serialization framework powered by JIT dynamic compilation and zero copy. It supports Java/Python/Golang/JavaScript/Rust/C++, provide automatic multi-language objects serialization features, and 170x speedup compared to JDK serialization.","date":"2023-07-15T00:00:00.000Z","formattedDate":"July 15, 2023","tags":[{"label":"fury","permalink":"/blog/tags/fury"}],"readingTime":11.45,"hasTruncateMarker":true,"authors":[{"name":"Shawn Yang","title":"Maintainer of Fury","url":"https://github.com/chaokunyang","imageURL":"https://github.com/chaokunyang.png","key":"chaokunyang"}],"frontMatter":{"slug":"fury_blazing_fast_multiple_language_serialization_framework","title":"Fury - A blazing fast multi-language serialization framework powered by jit and zero-copy","authors":["chaokunyang"],"tags":["fury"]},"unlisted":false,"prevItem":{"title":"Fury v0.1.0 released","permalink":"/blog/fury_0_1_0_release"}},"content":"Fury is a multi-language serialization framework powered by JIT dynamic compilation and zero copy. It supports Java/Python/Golang/JavaScript/Rust/C++, provide automatic multi-language objects serialization features, and 170x speedup compared to JDK serialization.\\n\x3c!--truncate--\x3e\\n# Fury - A blazing fast multi-language serialization framework powered by jit and zero-copy\\n\\nAuthor: [chaokunyang](https://github.com/chaokunyang)\\n\\n> Fury is a blazing fast **multi-language serialization** framework powered by **jit(just-in-time compilation) and\\nzero-copy**, providing up to **170x performance** and ultimate **ease of use**.\\n\\n\\nThe GitHub address of fury repository is: https://github.com/alipay/fury\\n\\n\\n<img alt=\\"fury banner\\" src=\\"/img/fury_banner.png\\" />\\n\\n# Background\\n\\nSerialization is a basic component of system communication, and widely used in big data, AI framework, cloud native and\\nother distributed systems.\\n**Data transfer between processes/languages/nodes, or object persistence, state read/write and\\ncopy** all need serialization.\\nThe performance and ease-of-use of serialization affects **runtime and development efficiency** of the system.\\n\\nStatic serialization frameworks\\nlike [protobuf](https://github.com/protocolbuffers/protobuf)/[flatbuffers](https://github.com/google/flatbuffers) \\ncan\'t be used for cross-language [application development](https://en.wikipedia.org/wiki/Domain-driven_design) directly,\\nbecause they **don\'t support shared reference and polymorphism**, and also need to **generate code ahead**.\\nDynamic serialization frameworks such as JDK serialization, Kryo, Fst, Hessian, Pickle provide ease-of-use and dynamics,\\nbut **don\'t support cross-language** and suffer significant **performance issues**, \\nwhich is unsuitable for high throughput, low latency, and large-scale data transfer scenarios.\\n\\nTherefore, we developed a new multi-language serialization framework **[Fury](https://github.com/alipay/fury)**, which is\\nnow open-sourced on https://github.com/alipay/fury. Through **highly optimized serialization primitives, JIT dynamic compilation and Zero-Copy** technologies, \\nFury is both fast and easy to use. It can **cross-language serialize any object automatically** and provides **ultimate performance** at the same time.\\n\\n<p>\\n<img width=\\"44%\\" alt=\\"serialization\\" src=\\"/img/case1.png\\" />\\n<img  width=\\"44%\\" alt=\\"deserialization\\" src=\\"/img/case2.png\\" />\\n</p>\\n\\n# What is Fury\\n\\nFury is a multi-language serialization framework powered by JIT dynamic compilation and zero copy, providing blazing\\nfast speed and ease of use:\\n\\n- **Multiple languages**: Java/Python/C++/Golang/JavaScript/Rust, other languages can be added easily.\\n- **Highly optimized serialization primitives**.\\n- **Zero-Copy**: support [out-of-band](https://peps.python.org/pep-0574/) serialization and off-heap read/write.\\n- **High performance**: Use JIT(just-in-time) to generate serialization code at runtime in an async multithreaded way,\\n  which can optimize methods inlining, code cache, dead code elimination, hash lookup, meta writing and memory\\n  read/writing.\\n- **Multi protocols**: providing flexibility and ease-of-use of dynamic serialization, as well as the cross-language of\\n  static serialization.\\n  - **Java Serialization**:\\n    - Drop-in replaces `JDK/Kryo/Hessian`, no need to modify user code, but providing 170x speed up at most, which can\\n      improve efficiency of rpc, data transfer and object persistence significantly.\\n    - 100% JDK compatible, support JDK custom serialization\\n      methods `writeObject/readObject/writeReplace/readResolve/readObjectNoData` natively.\\n  - **Cross-language object graph**:\\n    - Cross-language serialize any objects automatically, no need for IDL, schema compilation, and object/protocol\\n      conversion.\\n    - Cross-language serialize shared/circular reference, no data duplication or recursion error.\\n    - Support object polymorphism, multiple children type objects can be serialized simultaneously.\\n  - **Row format**\\n    - A cache-friendly binary random-access format, supports skipping deserialization and lazy deserialization,\\n      efficient\\n      for high-performance computing and large-scale data transfer.\\n    - Support automatic conversion to apache arrow.\\n\\n# Core Serialization Capabilities\\n\\nAlthough different scenarios require different serialization protocols, the underlying operations of serialization are\\nsimilar.\\nTherefore, Fury defines and implements **a set of basic serialization capabilities**,\\nwhich can be used for quickly building new multi-language serialization protocols\\nand get speedup by jit acceleration and other optimizations.\\nAt the same time, performance optimization for a protocol on the primitives can also benefit all other protocols.\\n\\n## Serialization Primitives\\n\\nCommon serialization operations contains:\\n\\n- bitmap operations\\n- number encoding/decoding\\n- int/long compression\\n- String creation/copy\\n- String encoding: ASCII/UTF8/UTF16\\n- memory copy\\n- array copy&compression\\n- meta encoding&compression&cache\\n\\nFury use SIMD and other advanced language features to make basic operations extremely fast in every languages.\\n\\n## Zero-Copy Serialization\\n\\nLarge-scale data transfer often has multiple binary buffers in an object graph. Some serialization frameworks\\nwill write the binaries into an intermediate buffer and introduce multiple time-consuming memory\\ncopies. Fury implemented an **out-of-band serialization protocol** inspired by [pickle5](https://peps.python.org/pep-0574/),\\nray and arrow, which can\\n**capture all binary buffers** in an object graph to avoid intermediate copies of these buffers.\\nThe following figure shows the serialization process of zero-copy:\\n\\n<img alt=\\"fury zero copy\\" src=\\"/img/fury_zero_copy.jpeg\\" />\\n\\nCurrently, Fury supports the following types of zero-copy:\\n\\n- java: all basic types of arrays, `ByteBuffer`, `ArrowRecordBatch`, and `VectorSchemaRoot`\\n- python: all arrays of the array module, numpy arrays, `pyarrow.Table,` and `pyarrow.RecordBatch`\\n- golang:byte slice\\n\\nYou can also add the new zero copy type based on the Fury interface.\\n\\n## JIT dynamic compilation acceleration\\n\\nCustom type objects usually contain lots of type information, Fury used this information to generate\\nefficient serialization code at runtime, which can push lots of runtime operations into the dynamic compilation\\nstage. By inlining more methods, better code cache, reducing virtual method calls, conditional branches, hash lookup,\\nmetadata writes, and memory reads/writes, the serialization performance is greatly accelerated.\\n\\nFor Java, Fury implements a **runtime codegen framework** and defines\\nan [operator expression IR](https://en.wikipedia.org/wiki/Intermediate_representation).\\nThen fury can perform type inference based\\non the generic type information of the object at runtime to build an expression tree\\nthat describes the logic of serialized code.\\nThe codegen framework will generate efficient Java code from the expression tree, then pass\\nto [Janino](https://github.com/janino-compiler/janino) to compile it into bytecode,\\nand load it into the user\'s ClassLoader or the ClassLoader created by Fury,\\nand finally compile it into efficient assembly code through Java JIT.\\n\\nSince JVM JIT skips Big method compilation and inlining, Fury also implements an optimizer to **split big methods into\\nsmall methods recursively**, thus ensuring that all code can be compiled and inlined.\\n\\n<img alt=\\"fury java codegen\\" src=\\"/img/fury_java_codegen.png\\" />\\n\\nFury also supports **asynchronous multithreaded compilation** by running the codegen tasks in a thread pool, \\nand using interpretation mode until JIT finishes to ensure no serialization burrs. \\nUsers can skip warm up serialization of objects.\\n\\nPython and JavaScript codegen are similar. Generating source code is easier for development \\nand troubleshooting problems.\\n\\nSince serialization will manipulate objects extensively in each programming language, and the language\\ndoes not expose the low-level API of the memory model, native methods call has a large cost too,\\nso we cannot use [LLVM](https://www.llvm.org/) to build a unified serializer JIT framework.\\nInstead, we implemented a codegen framework for every language separately.\\n\\n## Static code generation\\n\\nAlthough JIT compilation can greatly improve serialization efficiency and generate better serialization code based on\\nthe statistical distribution of data at runtime, languages like `C++` do not support reflection,\\nhave no virtual machines, and no low-level API for memory models.\\nWe cannot generate serialization code dynamically for such languages through JIT.\\n\\nIn such scenarios, Fury is implementing an **AOT codegen framework**, which generates the serialized code statically\\naccording to the object schema, and objects can be serialized automatically using the\\ngenerated serializer. For Rust, Rust macro is used to generate code statically.\\n\\n## Cache optimization\\n\\nWhen serializing a custom type, fury will **reorder fields** to ensure that fields of the same type are serialized in\\norder. This can hit more data cache and CPU instruction cache.\\n\\nThe basic type fields are written **in descending order by byte size**. In this way, if the initial addresses are aligned,\\nsubsequent read and write operations will occur at the position where the memory addresses are aligned, making CPU\\nexecution more efficient.\\n\\n# Multi-protocol Design and Implementation\\n\\nBased on the multi-language serialization features provided by Fury core, we have built three serialization protocols\\nfor different scenarios:\\n\\n- **Java serialization**: suitable for pure Java serialization scenarios and provides up to170x speed up;\\n- **Cross-language object graph serialization**: suitable for application-oriented multi-language programming and\\n  high-performance cross-language serialization;\\n- **Row-format serialization**: suitable for distributed computing engines such as Spark/Flink/Dories/Velox/Features\\n  frameworks;\\n\\nIn the future, we will add new protocols for other core scenarios. Users can also build their own protocols based on\\nFury\'s serialization framework.\\n\\n## Java serialization\\n\\nJava is widely used in **big data, cloud native, microservices, and enterprise applications**.\\nTherefore, Fury made lots of optimizations for Java serialization, which reduces system latency and server costs a lot,\\nand improves throughput significantly. Our implementation has the following highlights:\\n\\n- Blazing fast performance: Based on Java types, JIT compilation and Unsafe low-level\\n  operations, **Fury is 170x faster than JDK, and 50~110x faster than Kryo/Hessian** at most.\\n- **100% JDK serialization API compatibility** : supports all JDK custom serialization\\n  methods `writeObject/readObject/writeReplace/readResolve/readObjectNoData` natively to ensure the serialization\\n  correctness\\n  in any scenario. Kryo/Hessian have some correctness issues in these scenarios.\\n- **Type compatibility**: When the deserialization and serialization class schema are inconsistent, it can still\\n  deserialize correctly.\\n  It supports application upgrade and deployment, add/delete fields independently.\\n  Fury type-compatible mode is implemented with no performance loss compared to type-consistent mode.\\n- **Metadata sharing** : share metadata(class name, field name&type, etc.) across multiple\\n  serializations under a context (TCP connection),\\n  meta will be sent to the peer only for the first\\n  serialization, the peer can reconstruct the same deserializer based on this information.\\n  Subsequent serialization will skip transferring metadata, which can reduce network traffic,\\n  and support type compatibility automatically.\\n- **Zero copy support**: supports out-of-band zero copy and off-heap memory read/write.\\n\\n## Cross-language object graph serialization\\n\\nFury cross-language object graph serialization is primarily used for scenarios that require\\nhigher dynamics and ease-of-use.\\nAlthough frameworks like Protobuf/Flatbuffers support cross-language serialization, they still have limitations:\\n\\n- They require **pre-defined IDLs and generate code statically ahead**, lacking sufficient dynamics and flexibility;\\n- The generated classes **don\'t conform to object-oriented design** and it\'s impossible to add behavior to classes,\\n  which make them unsuitable for use as domain objects in cross-language application development.\\n- They **don\'t support polymorphism**. Object-oriented programming uses interfaces to invoke subclass methods,\\n  but this pattern isn\'t supported well in those frameworks. Although Flatbuffers offers `Union`,\\n  and Protobuf provides `OneOf/Any`, those API require check object type during serialization and deserialization, which\\n  isn\'t polymorphic.\\n- They **don\'t support circular references and shared references**.\\n  Users need to define a set of IDLs for domain objects\\n  and implement reference resolution by themselves,\\n  as well as writing code to convert between domain objects and protocol objects in each language.\\n  If the object graph depth is deep, more code needs to be written.\\n\\nDue to the above limitations, Fury implemented a cross-language object graph serialization protocol that:\\n\\n- **Automatically serializes any object across multiple languages**: By defining classes in the serialization and\\n  deserialization peer, objects in one language can be automatically serialized into objects in another language without\\n  creating IDL files, compiling schema to generate code, or writing conversion code.\\n- **Automatically serializes shared and circular references** across multiple languages.\\n- **Supports object type polymorphism**, consistent with the object-oriented programming paradigm,\\n  and multiple subtypes can be automatically deserialized without manual intervention.\\n- **Out-of-band zero-copy** is also supported in this protocol.\\n\\nExample of Automatic Cross-Language Serialization:\\n<img alt=\\"xlang serialization example\\" src=\\"/img/xlang_serialization_example.png\\" />\\n\\n## Row-format\\n\\nFor **high-performance computing and large-scale data transfer** scenarios, data serialization and transfer are often\\nthe **performance bottlenecks** of the system. If users only need to read part of the data or filter data based on some\\nfield of an object, deserializing the entire data will result in unnecessary overhead. Therefore, Fury provides a\\nbinary data structure for **direct reading and writing on binary data to avoid serialization**.\\n\\n[Apache Arrow](https://arrow.apache.org/) is a standardized columnar storage format that supports binary read and write.\\nHowever, **columnar format is not suitable for all scenarios**.\\nData in online and streaming computing are naturally stored row by row,\\nand row is also used in columnar computing engines when involving data updates, Hash/Join/Aggregation operations.\\n\\nHowever, there is no standardized implementation for row format.\\n**Computing engines such as Spark/Flink/Doris/Velox all defined their row format,\\nwhich doesn\'t support cross-language and can only be used internally by themselves**.\\nFlatbuffers does support **lazy deserialization**, but it requires static compilation of schema IDL\\nand management of offset, which is impossible for complex scenarios.\\n\\nTherefore, Fury implemented a **binary row format** inspired\\nby [Spark Tungsten](https://databricks.com/blog/2015/04/28/project-tungsten-bringing-spark-closer-to-bare-metal.html)\\nand [Apache Arrow format](https://arrow.apache.org/docs/format/Columnar.html), which\\nallows **random access and partial deserialization**. Currently, Java/Python/C++ versions have been implemented,\\nallowing direct reading and writing on binary data to avoid all serialization overhead, and can convert to arrow format automatically.\\n\\n<img alt=\\"xlang serialization example\\" src=\\"/img/row_format.png\\" />\\nThis format is densely stored, byte aligned and cache-friendly, which enables faster read and write operations. By avoiding deserialization, it reduces Java GC pressure and Python overhead. Based on Python\'s dynamics, Fury\'s data structure implements special methods such as `getattr_/getitem/slice/etc.`, ensuring behavior consistency with Python dataclass/list/object, and users have no perception of this.\\n\\n# Performance Comparison\\n\\nHere are some Java serialization performance data,\\nwhere charts with \\"compatible\\" in the title are performance data under type compatible mode:\\nsupport type forward/backward compatibility.\\nand charts without \\"compatible\\" in the title are performance data without type compatibility:\\nclass schema must be same between serialization and deserialization.\\nFor fairness, Fury disabled the zero-copy feature for all tests.\\n\\n<p>\\n<img width=\\"44%\\" alt=\\"serialization\\" src=\\"/img/case1.png\\" />\\n<img  width=\\"44%\\" alt=\\"deserialization\\" src=\\"/img/case2.png\\" />\\n</p>\\n\\n<p>\\n<img width=\\"44%\\" alt=\\"bench_serialize_compatible_MEDIA_CONTENT_to_array_tps\\" src=\\"/img/benchmarks/serialization/bench_serialize_compatible_MEDIA_CONTENT_to_array_tps.png\\" />\\n<img width=\\"44%\\" alt=\\"bench_deserialize_compatible_MEDIA_CONTENT_from_array_tps\\" src=\\"/img/benchmarks/deserialization/bench_deserialize_compatible_MEDIA_CONTENT_from_array_tps.png\\" />\\n</p>\\n\\n<p>\\n<img width=\\"44%\\" alt=\\"bench_serialize_STRUCT_to_array_tps\\" src=\\"/img/benchmarks/serialization/bench_serialize_STRUCT_to_array_tps.png\\" />\\n<img width=\\"44%\\" alt=\\"bench_serialize_SAMPLE_to_array_tps\\" src=\\"/img/benchmarks/serialization/bench_serialize_SAMPLE_to_array_tps.png\\" />\\n</p>\\n\\n# Future planning(RoadMap)\\n\\n- Meta compression, auto meta sharing and cross-language schema compatibility.\\n- AOT Framework for c++/golang to generate code statically.\\n- C++/Rust object graph serialization support\\n- Golang/Rust/NodeJS row format support\\n- ProtoBuf compatibility support\\n- Protocols for features and knowledge graph serialization\\n- Continuously improve our serialization infrastructure for any new protocols\\n\\n# Join US\\n\\nWe are committed to building Fury into an open and neutral community project that pursues passion and innovation. The\\ndevelopment and discussion are open-sourced and transparent in the community. Any form of participation is welcome,\\nincluding but not limited to questions, code contributions, technical discussions, etc. We are looking forward to\\nreceiving your ideas and feedback, participating in the project together, pushing the project forward and creating a\\nbetter serialization framework.\\n\\nThe GitHub address of the fury repository is:\\nhttps://github.com/alipay/fury\\n\\nOfficial website: https://furyio.org\\n\\nAll issues, PR, and Discussion are welcome."}]}')}}]);