"use strict";(self.webpackChunkfory_site=self.webpackChunkfory_site||[]).push([[8316],{42257:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>o,contentTitle:()=>a,default:()=>h,frontMatter:()=>t,metadata:()=>l,toc:()=>c});var r=i(85893),s=i(11151);const t={title:"Java Serialization Guide",sidebar_position:0,id:"java_object_graph_guide",license:'Licensed to the Apache Software Foundation (ASF) under one or more\ncontributor license agreements.  See the NOTICE file distributed with\nthis work for additional information regarding copyright ownership.\nThe ASF licenses this file to You under the Apache License, Version 2.0\n(the "License"); you may not use this file except in compliance with\nthe License.  You may obtain a copy of the License at\n\n   http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an "AS IS" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n'},a=void 0,l={id:"guide/java_object_graph_guide",title:"Java Serialization Guide",description:"Java object graph serialization",source:"@site/docs/guide/java_serialization_guide.md",sourceDirName:"guide",slug:"/guide/java_object_graph_guide",permalink:"/docs/guide/java_object_graph_guide",draft:!1,unlisted:!1,editUrl:"https://github.com/apache/fory-site/tree/main/docs/guide/java_serialization_guide.md",tags:[],version:"current",sidebarPosition:0,frontMatter:{title:"Java Serialization Guide",sidebar_position:0,id:"java_object_graph_guide",license:'Licensed to the Apache Software Foundation (ASF) under one or more\ncontributor license agreements.  See the NOTICE file distributed with\nthis work for additional information regarding copyright ownership.\nThe ASF licenses this file to You under the Apache License, Version 2.0\n(the "License"); you may not use this file except in compliance with\nthe License.  You may obtain a copy of the License at\n\n   http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an "AS IS" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n'}},o={},c=[{value:"Java object graph serialization",id:"java-object-graph-serialization",level:2},{value:"Quick Start",id:"quick-start",level:2},{value:"ForyBuilder options",id:"forybuilder-options",level:2},{value:"Advanced Usage",id:"advanced-usage",level:2},{value:"Fory creation",id:"fory-creation",level:3},{value:"Handling Class Schema Evolution in Serialization",id:"handling-class-schema-evolution-in-serialization",level:3},{value:"Smaller size",id:"smaller-size",level:3},{value:"Object deep copy",id:"object-deep-copy",level:3},{value:"Implement a customized serializer",id:"implement-a-customized-serializer",level:3},{value:"Implement Collection Serializer",id:"implement-collection-serializer",level:3},{value:"Implement Collection Serializer with JIT support",id:"implement-collection-serializer-with-jit-support",level:4},{value:"Implement a totally-customzied Collection Serializer without JIT",id:"implement-a-totally-customzied-collection-serializer-without-jit",level:4},{value:"Implement Serializer for Collection-like Types",id:"implement-serializer-for-collection-like-types",level:4},{value:"Implement Map Serializer",id:"implement-map-serializer",level:3},{value:"Implement Map Serializer with JIT support",id:"implement-map-serializer-with-jit-support",level:4},{value:"Implement a totally-customzied Map Serializer without JIT",id:"implement-a-totally-customzied-map-serializer-without-jit",level:4},{value:"Implement Serializer for Map-like Types",id:"implement-serializer-for-map-like-types",level:4},{value:"Register Custom Serializers",id:"register-custom-serializers",level:3},{value:"Security &amp; Class Registration",id:"security--class-registration",level:3},{value:"Register class by name",id:"register-class-by-name",level:3},{value:"Serializer Registration",id:"serializer-registration",level:3},{value:"Zero-Copy Serialization",id:"zero-copy-serialization",level:3},{value:"Meta Sharing",id:"meta-sharing",level:3},{value:"Deserialize non-existent classes",id:"deserialize-non-existent-classes",level:3},{value:"Coping/Mapping object from one type to another type",id:"copingmapping-object-from-one-type-to-another-type",level:3},{value:"Migration",id:"migration",level:2},{value:"JDK migration",id:"jdk-migration",level:3},{value:"Upgrade fory",id:"upgrade-fory",level:3},{value:"Trouble shooting",id:"trouble-shooting",level:2},{value:"Class inconsistency and class version check",id:"class-inconsistency-and-class-version-check",level:3},{value:"Deserialize POJO into another type",id:"deserialize-pojo-into-another-type",level:3},{value:"Use wrong API for deserialization",id:"use-wrong-api-for-deserialization",level:3}];function d(e){const n={a:"a",blockquote:"blockquote",code:"code",h2:"h2",h3:"h3",h4:"h4",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,s.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h2,{id:"java-object-graph-serialization",children:"Java object graph serialization"}),"\n",(0,r.jsx)(n.p,{children:"When only java object serialization needed, this mode will have better performance compared to cross-language object\ngraph serialization."}),"\n",(0,r.jsx)(n.h2,{id:"quick-start",children:"Quick Start"}),"\n",(0,r.jsxs)(n.p,{children:["Note that fory creation is not cheap, the ",(0,r.jsx)(n.strong,{children:"fory instances should be reused between serializations"})," instead of creating\nit everytime.\nYou should keep fory to a static global variable, or instance variable of some singleton object or limited objects."]}),"\n",(0,r.jsx)(n.p,{children:"Fory for single-thread usage:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"import java.util.List;\nimport java.util.Arrays;\n\nimport org.apache.fory.*;\nimport org.apache.fory.config.*;\n\npublic class Example {\n  public static void main(String[] args) {\n    SomeClass object = new SomeClass();\n    // Note that Fory instances should be reused between\n    // multiple serializations of different objects.\n    Fory fory = Fory.builder().withLanguage(Language.JAVA)\n      .requireClassRegistration(true)\n      .build();\n    // Registering types can reduce class name serialization overhead, but not mandatory.\n    // If class registration enabled, all custom types must be registered.\n    fory.register(SomeClass.class);\n    byte[] bytes = fory.serialize(object);\n    System.out.println(fory.deserialize(bytes));\n  }\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:"Fory for multiple-thread usage:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"import java.util.List;\nimport java.util.Arrays;\n\nimport org.apache.fory.*;\nimport org.apache.fory.config.*;\n\npublic class Example {\n  public static void main(String[] args) {\n    SomeClass object = new SomeClass();\n    // Note that Fory instances should be reused between\n    // multiple serializations of different objects.\n    ThreadSafeFory fory = new ThreadLocalFory(classLoader -> {\n      Fory f = Fory.builder().withLanguage(Language.JAVA)\n        .withClassLoader(classLoader).build();\n      f.register(SomeClass.class);\n      return f;\n    });\n    byte[] bytes = fory.serialize(object);\n    System.out.println(fory.deserialize(bytes));\n  }\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:"Fory instances reuse example:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"import java.util.List;\nimport java.util.Arrays;\n\nimport org.apache.fory.*;\nimport org.apache.fory.config.*;\n\npublic class Example {\n  // reuse fory.\n  private static final ThreadSafeFory fory = new ThreadLocalFory(classLoader -> {\n    Fory f = Fory.builder().withLanguage(Language.JAVA)\n      .withClassLoader(classLoader).build();\n    f.register(SomeClass.class);\n    return f;\n  });\n\n  public static void main(String[] args) {\n    SomeClass object = new SomeClass();\n    byte[] bytes = fory.serialize(object);\n    System.out.println(fory.deserialize(bytes));\n  }\n}\n"})}),"\n",(0,r.jsx)(n.h2,{id:"forybuilder-options",children:"ForyBuilder options"}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Option Name"}),(0,r.jsx)(n.th,{children:"Description"}),(0,r.jsx)(n.th,{children:"Default Value"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"timeRefIgnored"})}),(0,r.jsxs)(n.td,{children:["Whether to ignore reference tracking of all time types registered in ",(0,r.jsx)(n.code,{children:"TimeSerializers"})," and subclasses of those types when ref tracking is enabled. If ignored, ref tracking of every time type can be enabled by invoking ",(0,r.jsx)(n.code,{children:"Fory#registerSerializer(Class, Serializer)"}),". For example, ",(0,r.jsx)(n.code,{children:"fory.registerSerializer(Date.class, new DateSerializer(fory, true))"}),". Note that enabling ref tracking should happen before serializer codegen of any types which contain time fields. Otherwise, those fields will still skip ref tracking."]}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"true"})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"compressInt"})}),(0,r.jsx)(n.td,{children:"Enables or disables int compression for smaller size."}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"true"})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"compressLong"})}),(0,r.jsx)(n.td,{children:"Enables or disables long compression for smaller size."}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"true"})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"compressString"})}),(0,r.jsx)(n.td,{children:"Enables or disables string compression for smaller size."}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"false"})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"classLoader"})}),(0,r.jsxs)(n.td,{children:["The classloader should not be updated; Fory caches class metadata. Use ",(0,r.jsx)(n.code,{children:"LoaderBinding"})," or ",(0,r.jsx)(n.code,{children:"ThreadSafeFory"})," for classloader updates."]}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"Thread.currentThread().getContextClassLoader()"})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"compatibleMode"})}),(0,r.jsxs)(n.td,{children:["Type forward/backward compatibility config. Also Related to ",(0,r.jsx)(n.code,{children:"checkClassVersion"})," config. ",(0,r.jsx)(n.code,{children:"SCHEMA_CONSISTENT"}),": Class schema must be consistent between serialization peer and deserialization peer. ",(0,r.jsx)(n.code,{children:"COMPATIBLE"}),": Class schema can be different between serialization peer and deserialization peer. They can add/delete fields independently. ",(0,r.jsx)(n.a,{href:"#class-inconsistency-and-class-version-check",children:"See more"}),"."]}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"CompatibleMode.SCHEMA_CONSISTENT"})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"checkClassVersion"})}),(0,r.jsxs)(n.td,{children:["Determines whether to check the consistency of the class schema. If enabled, Fory checks, writes, and checks consistency using the ",(0,r.jsx)(n.code,{children:"classVersionHash"}),". It will be automatically disabled when ",(0,r.jsx)(n.code,{children:"CompatibleMode#COMPATIBLE"})," is enabled. Disabling is not recommended unless you can ensure the class won't evolve."]}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"false"})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"checkJdkClassSerializable"})}),(0,r.jsxs)(n.td,{children:["Enables or disables checking of ",(0,r.jsx)(n.code,{children:"Serializable"})," interface for classes under ",(0,r.jsx)(n.code,{children:"java.*"}),". If a class under ",(0,r.jsx)(n.code,{children:"java.*"})," is not ",(0,r.jsx)(n.code,{children:"Serializable"}),", Fory will throw an ",(0,r.jsx)(n.code,{children:"UnsupportedOperationException"}),"."]}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"true"})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"registerGuavaTypes"})}),(0,r.jsxs)(n.td,{children:["Whether to pre-register Guava types such as ",(0,r.jsx)(n.code,{children:"RegularImmutableMap"}),"/",(0,r.jsx)(n.code,{children:"RegularImmutableList"}),". These types are not public API, but seem pretty stable."]}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"true"})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"requireClassRegistration"})}),(0,r.jsx)(n.td,{children:"Disabling may allow unknown classes to be deserialized, potentially causing security risks."}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"true"})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"suppressClassRegistrationWarnings"})}),(0,r.jsx)(n.td,{children:"Whether to suppress class registration warnings. The warnings can be used for security audit, but may be annoying, this suppression will be enabled by default."}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"true"})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"metaShareEnabled"})}),(0,r.jsx)(n.td,{children:"Enables or disables meta share mode."}),(0,r.jsxs)(n.td,{children:[(0,r.jsx)(n.code,{children:"true"})," if ",(0,r.jsx)(n.code,{children:"CompatibleMode.Compatible"})," is set, otherwise false."]})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"scopedMetaShareEnabled"})}),(0,r.jsx)(n.td,{children:"Scoped meta share focuses on a single serialization process. Metadata created or identified during this process is exclusive to it and is not shared with by other serializations."}),(0,r.jsxs)(n.td,{children:[(0,r.jsx)(n.code,{children:"true"})," if ",(0,r.jsx)(n.code,{children:"CompatibleMode.Compatible"})," is set, otherwise false."]})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"metaCompressor"})}),(0,r.jsxs)(n.td,{children:["Set a compressor for meta compression. Note that the passed MetaCompressor should be thread-safe. By default, a ",(0,r.jsx)(n.code,{children:"Deflater"})," based compressor ",(0,r.jsx)(n.code,{children:"DeflaterMetaCompressor"})," will be used. Users can pass other compressor such as ",(0,r.jsx)(n.code,{children:"zstd"})," for better compression rate."]}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"DeflaterMetaCompressor"})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"deserializeNonexistentClass"})}),(0,r.jsx)(n.td,{children:"Enables or disables deserialization/skipping of data for non-existent classes."}),(0,r.jsxs)(n.td,{children:[(0,r.jsx)(n.code,{children:"true"})," if ",(0,r.jsx)(n.code,{children:"CompatibleMode.Compatible"})," is set, otherwise false."]})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"codeGenEnabled"})}),(0,r.jsx)(n.td,{children:"Disabling may result in faster initial serialization but slower subsequent serializations."}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"true"})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"asyncCompilationEnabled"})}),(0,r.jsx)(n.td,{children:"If enabled, serialization uses interpreter mode first and switches to JIT serialization after async serializer JIT for a class is finished."}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"false"})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"scalaOptimizationEnabled"})}),(0,r.jsx)(n.td,{children:"Enables or disables Scala-specific serialization optimization."}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"false"})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"copyRef"})}),(0,r.jsxs)(n.td,{children:["When disabled, the copy performance will be better. But fory deep copy will ignore circular and shared reference. Same reference of an object graph will be copied into different objects in one ",(0,r.jsx)(n.code,{children:"Fory#copy"}),"."]}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"true"})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"serializeEnumByName"})}),(0,r.jsx)(n.td,{children:"When Enabled, fory serialize enum by name instead of ordinal."}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"false"})})]})]})]}),"\n",(0,r.jsx)(n.h2,{id:"advanced-usage",children:"Advanced Usage"}),"\n",(0,r.jsx)(n.h3,{id:"fory-creation",children:"Fory creation"}),"\n",(0,r.jsx)(n.p,{children:"Single thread fory:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"Fory fory = Fory.builder()\n  .withLanguage(Language.JAVA)\n  // enable reference tracking for shared/circular reference.\n  // Disable it will have better performance if no duplicate reference.\n  .withRefTracking(false)\n  .withCompatibleMode(CompatibleMode.SCHEMA_CONSISTENT)\n  // enable type forward/backward compatibility\n  // disable it for small size and better performance.\n  // .withCompatibleMode(CompatibleMode.COMPATIBLE)\n  // enable async multi-threaded compilation.\n  .withAsyncCompilation(true)\n  .build();\nbyte[] bytes = fory.serialize(object);\nSystem.out.println(fory.deserialize(bytes));\n"})}),"\n",(0,r.jsx)(n.p,{children:"Thread-safe fory:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"ThreadSafeFory fory = Fory.builder()\n  .withLanguage(Language.JAVA)\n  // enable reference tracking for shared/circular reference.\n  // Disable it will have better performance if no duplicate reference.\n  .withRefTracking(false)\n  // compress int for smaller size\n  // .withIntCompressed(true)\n  // compress long for smaller size\n  // .withLongCompressed(true)\n  .withCompatibleMode(CompatibleMode.SCHEMA_CONSISTENT)\n  // enable type forward/backward compatibility\n  // disable it for small size and better performance.\n  // .withCompatibleMode(CompatibleMode.COMPATIBLE)\n  // enable async multi-threaded compilation.\n  .withAsyncCompilation(true)\n  .buildThreadSafeFory();\nbyte[] bytes = fory.serialize(object);\nSystem.out.println(fory.deserialize(bytes));\n"})}),"\n",(0,r.jsx)(n.h3,{id:"handling-class-schema-evolution-in-serialization",children:"Handling Class Schema Evolution in Serialization"}),"\n",(0,r.jsx)(n.p,{children:"In many systems, the schema of a class used for serialization may change over time. For instance, fields within a class\nmay be added or removed. When serialization and deserialization processes use different versions of jars, the schema of\nthe class being deserialized may differ from the one used during serialization."}),"\n",(0,r.jsxs)(n.p,{children:["By default, Fory serializes objects using the ",(0,r.jsx)(n.code,{children:"CompatibleMode.SCHEMA_CONSISTENT"})," mode. This mode assumes that the\ndeserialization process uses the same class schema as the serialization process, minimizing payload overhead.\nHowever, if there is a schema inconsistency, deserialization will fail."]}),"\n",(0,r.jsxs)(n.p,{children:["If the schema is expected to change, to make deserialization succeed, i.e. schema forward/backward compatibility.\nUsers must configure Fory to use ",(0,r.jsx)(n.code,{children:"CompatibleMode.COMPATIBLE"}),". This can be done using the\n",(0,r.jsx)(n.code,{children:"ForyBuilder#withCompatibleMode(CompatibleMode.COMPATIBLE)"})," method.\nIn this compatible mode, deserialization can handle schema changes such as missing or extra fields, allowing it to\nsucceed even when the serialization and deserialization processes have different class schemas."]}),"\n",(0,r.jsx)(n.p,{children:"Here is an example of creating Fory to support schema evolution:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"Fory fory = Fory.builder()\n  .withCompatibleMode(CompatibleMode.COMPATIBLE)\n  .build();\n\nbyte[] bytes = fory.serialize(object);\nSystem.out.println(fory.deserialize(bytes));\n"})}),"\n",(0,r.jsx)(n.p,{children:"This compatible mode involves serializing class metadata into the serialized output. Despite Fory's use of\nsophisticated compression techniques to minimize overhead, there is still some additional space cost associated with\nclass metadata."}),"\n",(0,r.jsxs)(n.p,{children:["To further reduce metadata costs, Fory introduces a class metadata sharing mechanism, which allows the metadata to be\nsent to the deserialization process only once. For more details, please refer to the ",(0,r.jsx)(n.a,{href:"https://fory.apache.org/docs/specification/fory_java_serialization_spec#meta-share",children:"Meta Sharing"})," specification."]}),"\n",(0,r.jsx)(n.h3,{id:"smaller-size",children:"Smaller size"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"ForyBuilder#withIntCompressed"}),"/",(0,r.jsx)(n.code,{children:"ForyBuilder#withLongCompressed"})," can be used to compress int/long for smaller size.\nNormally compress int is enough."]}),"\n",(0,r.jsx)(n.p,{children:"Both compression are enabled by default, if the serialized is not important, for example, you use flatbuffers for\nserialization before, which doesn't compress anything, then you should disable compression. If your data are all\nnumbers,\nthe compression may bring 80% performance regression."}),"\n",(0,r.jsx)(n.p,{children:"For int compression, fory use 1~5 bytes for encoding. First bit in every byte indicate whether has next byte. if first\nbit is set, then next byte will be read util first bit of next byte is unset."}),"\n",(0,r.jsx)(n.p,{children:"For long compression, fory support two encoding:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Fory SLI(Small long as int) Encoding (",(0,r.jsx)(n.strong,{children:"used by default"}),"):","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["If long is in ",(0,r.jsx)(n.code,{children:"[-1073741824, 1073741823]"}),", encode as 4 bytes int: ",(0,r.jsx)(n.code,{children:"| little-endian: ((int) value) << 1 |"})]}),"\n",(0,r.jsxs)(n.li,{children:["Otherwise write as 9 bytes: ",(0,r.jsx)(n.code,{children:"| 0b1 | little-endian 8bytes long |"})]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["Fory PVL(Progressive Variable-length Long) Encoding:","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"First bit in every byte indicate whether has next byte. if first bit is set, then next byte will be read util\nfirst bit of next byte is unset."}),"\n",(0,r.jsxs)(n.li,{children:["Negative number will be converted to positive number by ",(0,r.jsx)(n.code,{children:"(v << 1) ^ (v >> 63)"})," to reduce cost of small negative\nnumbers."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["If a number are ",(0,r.jsx)(n.code,{children:"long"})," type, it can't be represented by smaller bytes mostly, the compression won't get good enough\nresult,\nnot worthy compared to performance cost. Maybe you should try to disable long compression if you find it didn't bring\nmuch\nspace savings."]}),"\n",(0,r.jsx)(n.h3,{id:"object-deep-copy",children:"Object deep copy"}),"\n",(0,r.jsx)(n.p,{children:"Deep copy example:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"Fory fory = Fory.builder().withRefCopy(true).build();\nSomeClass a = xxx;\nSomeClass copied = fory.copy(a);\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Make fory deep copy ignore circular and shared reference, this deep copy mode will ignore circular and shared reference.\nSame reference of an object graph will be copied into different objects in one ",(0,r.jsx)(n.code,{children:"Fory#copy"}),"."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"Fory fory = Fory.builder().withRefCopy(false).build();\nSomeClass a = xxx;\nSomeClass copied = fory.copy(a);\n"})}),"\n",(0,r.jsx)(n.h3,{id:"implement-a-customized-serializer",children:"Implement a customized serializer"}),"\n",(0,r.jsxs)(n.p,{children:["In some cases, you may want to implement a serializer for your type, especially some class customize serialization by\nJDK ",(0,r.jsx)(n.code,{children:"writeObject/writeReplace/readObject/readResolve"}),", which is very inefficient. For example, if you don't want\nfollowing ",(0,r.jsx)(n.code,{children:"Foo#writeObject"})," got invoked, you can take following ",(0,r.jsx)(n.code,{children:"FooSerializer"})," as an example:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"class Foo {\n  public long f1;\n\n  private void writeObject(ObjectOutputStream s) throws IOException {\n    System.out.println(f1);\n    s.defaultWriteObject();\n  }\n}\n\nclass FooSerializer extends Serializer<Foo> {\n  public FooSerializer(Fory fory) {\n    super(fory, Foo.class);\n  }\n\n  @Override\n  public void write(MemoryBuffer buffer, Foo value) {\n    buffer.writeInt64(value.f1);\n  }\n\n  @Override\n  public Foo read(MemoryBuffer buffer) {\n    Foo foo = new Foo();\n    foo.f1 = buffer.readInt64();\n    return foo;\n  }\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:"Register serializer:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"Fory fory = getFory();\nfory.registerSerializer(Foo.class, new FooSerializer(fory));\n"})}),"\n",(0,r.jsx)(n.h3,{id:"implement-collection-serializer",children:"Implement Collection Serializer"}),"\n",(0,r.jsxs)(n.p,{children:["Similar to maps, when implementing a serializer for a custom Collection type, you must extend ",(0,r.jsx)(n.code,{children:"CollectionSerializer"})," or ",(0,r.jsx)(n.code,{children:"AbstractCollectionSerializer"}),".\nThe key difference between these two is that ",(0,r.jsx)(n.code,{children:"AbstractCollectionSerializer"})," can serialize a class which has a collection-like structure but is not a java Collection subtype."]}),"\n",(0,r.jsxs)(n.p,{children:["For collection serializer, this is a special parameter ",(0,r.jsx)(n.code,{children:"supportCodegenHook"})," needs be configured:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["When ",(0,r.jsx)(n.code,{children:"true"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Enables optimized access to collection elements and JIT compilation for better performance"}),"\n",(0,r.jsx)(n.li,{children:"Direct serialization invocation and inline for map key-value items without dynamic serializer dispatch cost."}),"\n",(0,r.jsx)(n.li,{children:"Better performance for standard collection types"}),"\n",(0,r.jsx)(n.li,{children:"Recommended for most collections"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["When ",(0,r.jsx)(n.code,{children:"false"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Uses interfaced-based element access and dynamic serializer dispatch for elements, which have higer cost"}),"\n",(0,r.jsx)(n.li,{children:"More flexible for custom collection types"}),"\n",(0,r.jsx)(n.li,{children:"Required when collection has special serialization needs"}),"\n",(0,r.jsx)(n.li,{children:"Handles complex collection implementations"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"implement-collection-serializer-with-jit-support",children:"Implement Collection Serializer with JIT support"}),"\n",(0,r.jsxs)(n.p,{children:["When implementing a Collection serializer with JIT support, you can leverage Fory's existing binary format and collection serialization infrastructure. The key is to properly implement the ",(0,r.jsx)(n.code,{children:"onCollectionWrite"})," and ",(0,r.jsx)(n.code,{children:"newCollection"})," methods to handle metadata while letting Fory handle the element serialization."]}),"\n",(0,r.jsx)(n.p,{children:"Here's an example:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"public class CustomCollectionSerializer<T extends Collection> extends CollectionSerializer<T> {\n    public CustomCollectionSerializer(Fory fory, Class<T> cls) {\n        // supportCodegenHook controls whether to use JIT compilation\n        super(fory, cls, true);\n    }\n\n    @Override\n    public Collection onCollectionWrite(MemoryBuffer buffer, T value) {\n        // Write collection size\n        buffer.writeVarUint32Small7(value.size());\n        // Write any additional collection metadata\n        return value;\n    }\n\n    @Override\n    public Collection newCollection(MemoryBuffer buffer) {\n        // Create new collection instance\n        Collection collection = super.newCollection(buffer);\n        // Read and set collection size\n        int numElements = getAndClearNumElements();\n        setNumElements(numElements);\n        return collection;\n    }\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Note that please invoke ",(0,r.jsx)(n.code,{children:"setNumElements"})," when implementing ",(0,r.jsx)(n.code,{children:"newCollection"})," to let fory know how many elements to deserialize."]}),"\n",(0,r.jsx)(n.h4,{id:"implement-a-totally-customzied-collection-serializer-without-jit",children:"Implement a totally-customzied Collection Serializer without JIT"}),"\n",(0,r.jsxs)(n.p,{children:["Sometimes you need to serialize a collection type that uses primitive arrays or has special requirements.\nIn such cases, you can implement a serializer with JIT disabled and directly override the ",(0,r.jsx)(n.code,{children:"write"})," and ",(0,r.jsx)(n.code,{children:"read"})," methods."]}),"\n",(0,r.jsx)(n.p,{children:"This approach:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Gives you full control over serialization"}),"\n",(0,r.jsx)(n.li,{children:"Works well with primitive arrays"}),"\n",(0,r.jsx)(n.li,{children:"Bypasses collection iteration overhead"}),"\n",(0,r.jsx)(n.li,{children:"Allows direct memory access"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Here's an example of a custom integer list backed by a primitive array:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"class IntList extends AbstractCollection<Integer> {\n    private final int[] elements;\n    private final int size;\n\n    public IntList(int size) {\n        this.elements = new int[size];\n        this.size = size;\n    }\n\n    public IntList(int[] elements, int size) {\n        this.elements = elements;\n        this.size = size;\n    }\n\n    @Override\n    public Iterator<Integer> iterator() {\n        return new Iterator<Integer>() {\n            private int index = 0;\n\n            @Override\n            public boolean hasNext() {\n                return index < size;\n            }\n\n            @Override\n            public Integer next() {\n                if (!hasNext()) {\n                    throw new NoSuchElementException();\n                }\n                return elements[index++];\n            }\n        };\n    }\n\n    @Override\n    public int size() {\n        return size;\n    }\n\n    public int get(int index) {\n        if (index >= size) {\n            throw new IndexOutOfBoundsException();\n        }\n        return elements[index];\n    }\n\n    public void set(int index, int value) {\n        if (index >= size) {\n            throw new IndexOutOfBoundsException();\n        }\n        elements[index] = value;\n    }\n\n    public int[] getElements() {\n        return elements;\n    }\n}\n\nclass IntListSerializer extends AbstractCollectionSerializer<IntList> {\n    public IntListSerializer(Fory fory) {\n        // Disable JIT since we're handling serialization directly\n        super(fory, IntList.class, false);\n    }\n\n    @Override\n    public void write(MemoryBuffer buffer, IntList value) {\n        // Write size\n        buffer.writeVarUint32Small7(value.size());\n\n        // Write elements directly as primitive ints\n        int[] elements = value.getElements();\n        for (int i = 0; i < value.size(); i++) {\n            buffer.writeVarInt32(elements[i]);\n        }\n    }\n\n    @Override\n    public IntList read(MemoryBuffer buffer) {\n        // Read size\n        int size = buffer.readVarUint32Small7();\n\n        // Create array and read elements\n        int[] elements = new int[size];\n        for (int i = 0; i < size; i++) {\n            elements[i] = buffer.readVarInt32();\n        }\n\n        return new IntList(elements, size);\n    }\n\n    // These methods are not used when JIT is disabled\n    @Override\n    public Collection onCollectionWrite(MemoryBuffer buffer, IntList value) {\n        throw new UnsupportedOperationException();\n    }\n\n    @Override\n    public Collection newCollection(MemoryBuffer buffer) {\n        throw new UnsupportedOperationException();\n    }\n\n    @Override\n    public IntList onCollectionRead(Collection collection) {\n        throw new UnsupportedOperationException();\n    }\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:"Key Points:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Primitive Array Storage"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Uses ",(0,r.jsx)(n.code,{children:"int[]"})," for direct storage"]}),"\n",(0,r.jsx)(n.li,{children:"Avoids boxing/unboxing overhead"}),"\n",(0,r.jsx)(n.li,{children:"Provides efficient memory layout"}),"\n",(0,r.jsx)(n.li,{children:"Enables direct array access"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Direct Serialization"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Write size first"}),"\n",(0,r.jsx)(n.li,{children:"Write primitive values directly"}),"\n",(0,r.jsx)(n.li,{children:"No iteration overhead"}),"\n",(0,r.jsx)(n.li,{children:"No boxing/unboxing during serialization"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Direct Deserialization"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Read size first"}),"\n",(0,r.jsx)(n.li,{children:"Create primitive array"}),"\n",(0,r.jsx)(n.li,{children:"Read values directly into array"}),"\n",(0,r.jsx)(n.li,{children:"Create list with populated array"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Disabled JIT"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Set ",(0,r.jsx)(n.code,{children:"supportCodegenHook=false"})]}),"\n",(0,r.jsxs)(n.li,{children:["Override ",(0,r.jsx)(n.code,{children:"write"}),"/",(0,r.jsx)(n.code,{children:"read"})," methods"]}),"\n",(0,r.jsx)(n.li,{children:"Skip collection view pattern"}),"\n",(0,r.jsx)(n.li,{children:"Full control over serialization format"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"When to Use: this approach is best when:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Working with primitive types"}),"\n",(0,r.jsx)(n.li,{children:"Need maximum performance"}),"\n",(0,r.jsx)(n.li,{children:"Want to minimize memory overhead"}),"\n",(0,r.jsx)(n.li,{children:"Have special serialization requirements"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Usage Example:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"// Create and populate list\nIntList list = new IntList(3);\nlist.set(0, 1);\nlist.set(1, 2);\nlist.set(2, 3);\n\n// Serialize\nbyte[] bytes = fory.serialize(list);\n\n// Deserialize\nIntList newList = (IntList) fory.deserialize(bytes);\n"})}),"\n",(0,r.jsx)(n.p,{children:"This implementation is particularly efficient for scenarios where:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"You're working exclusively with integers"}),"\n",(0,r.jsx)(n.li,{children:"Performance is critical"}),"\n",(0,r.jsx)(n.li,{children:"Memory efficiency is important"}),"\n",(0,r.jsx)(n.li,{children:"Serialization overhead needs to be minimized"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Remember that while this approach gives up some of Fory's optimizations, it can provide better performance for specific use cases involving primitive types and direct array access."}),"\n",(0,r.jsx)(n.h4,{id:"implement-serializer-for-collection-like-types",children:"Implement Serializer for Collection-like Types"}),"\n",(0,r.jsx)(n.p,{children:"Sometimes you may want to implement a serializer for a type that behaves like a collection but isn't a standard Java Collection. This section demonstrates how to implement a serializer for such types."}),"\n",(0,r.jsx)(n.p,{children:"The key principles for collection-like type serialization are:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["Extend ",(0,r.jsx)(n.code,{children:"AbstractCollectionSerializer"})," for custom collection-like types"]}),"\n",(0,r.jsxs)(n.li,{children:["Enable JIT optimization with ",(0,r.jsx)(n.code,{children:"supportCodegenHook"})]}),"\n",(0,r.jsx)(n.li,{children:"Provide efficient element access through views"}),"\n",(0,r.jsx)(n.li,{children:"Maintain proper size tracking"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Here's an example:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'class CustomCollectionLike {\n    private final Object[] elements;\n    private final int size;\n\n    public CustomCollectionLike(int size) {\n        this.elements = new Object[size];\n        this.size = size;\n    }\n\n    // Constructor for wrapping existing array\n    public CustomCollectionLike(Object[] elements, int size) {\n        this.elements = elements;\n        this.size = size;\n    }\n\n    public Object get(int index) {\n        if (index >= size) {\n            throw new IndexOutOfBoundsException();\n        }\n        return elements[index];\n    }\n\n    public int size() {\n        return size;\n    }\n\n    public Object[] getElements() {\n        return elements;\n    }\n}\n\n// A view class that extends AbstractCollection for simpler implementation\nclass CollectionView extends AbstractCollection<Object> {\n    private final Object[] elements;\n    private final int size;\n    private int writeIndex;\n\n    // Constructor for serialization (wrapping existing array)\n    public CollectionView(CustomCollectionLike collection) {\n        this.elements = collection.getElements();\n        this.size = collection.size();\n    }\n\n    // Constructor for deserialization\n    public CollectionView(int size) {\n        this.size = size;\n        this.elements = new Object[size];\n    }\n\n    @Override\n    public Iterator<Object> iterator() {\n        return new Iterator<Object>() {\n            private int index = 0;\n\n            @Override\n            public boolean hasNext() {\n                return index < size;\n            }\n\n            @Override\n            public Object next() {\n                if (!hasNext()) {\n                    throw new NoSuchElementException();\n                }\n                return elements[index++];\n            }\n        };\n    }\n\n    @Override\n    public boolean add(Object element) {\n        if (writeIndex >= size) {\n            throw new IllegalStateException("Collection is full");\n        }\n        elements[writeIndex++] = element;\n        return true;\n    }\n\n    @Override\n    public int size() {\n        return size;\n    }\n\n    public Object[] getElements() {\n        return elements;\n    }\n}\n\nclass CustomCollectionSerializer extends AbstractCollectionSerializer<CustomCollectionLike> {\n    public CustomCollectionSerializer(Fory fory) {\n        super(fory, CustomCollectionLike.class, true);\n    }\n\n    @Override\n    public Collection onCollectionWrite(MemoryBuffer buffer, CustomCollectionLike value) {\n        buffer.writeVarUint32Small7(value.size());\n        return new CollectionView(value);\n    }\n\n    @Override\n    public Collection newCollection(MemoryBuffer buffer) {\n        int numElements = buffer.readVarUint32Small7();\n        setNumElements(numElements);\n        return new CollectionView(numElements);\n    }\n\n    @Override\n    public CustomCollectionLike onCollectionRead(Collection collection) {\n        CollectionView view = (CollectionView) collection;\n        return new CustomCollectionLike(view.getElements(), view.size());\n    }\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:"Key takeways:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Collection Structure"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Array-based storage for elements"}),"\n",(0,r.jsx)(n.li,{children:"Fixed size after creation"}),"\n",(0,r.jsx)(n.li,{children:"Direct element access"}),"\n",(0,r.jsx)(n.li,{children:"Size tracking"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"View Implementation"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Extends ",(0,r.jsx)(n.code,{children:"AbstractCollection"})," for simplicity"]}),"\n",(0,r.jsx)(n.li,{children:"Provides iterator for element access"}),"\n",(0,r.jsxs)(n.li,{children:["Implements ",(0,r.jsx)(n.code,{children:"add()"})," for deserialization"]}),"\n",(0,r.jsx)(n.li,{children:"Shares array reference with original type"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Serializer Features"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Uses ",(0,r.jsx)(n.code,{children:"supportCodegenHook=true"})," for JIT optimization"]}),"\n",(0,r.jsx)(n.li,{children:"Shares array references when possible"}),"\n",(0,r.jsx)(n.li,{children:"Maintains proper size tracking"}),"\n",(0,r.jsx)(n.li,{children:"Uses view pattern for serialization"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Performance Aspects"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Direct array access"}),"\n",(0,r.jsx)(n.li,{children:"Minimal object creation"}),"\n",(0,r.jsx)(n.li,{children:"Array sharing between instances"}),"\n",(0,r.jsx)(n.li,{children:"Efficient iteration"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Note that this implementation provides better performance at the cost of flexibility. Consider your specific use case when choosing this approach."}),"\n",(0,r.jsx)(n.h3,{id:"implement-map-serializer",children:"Implement Map Serializer"}),"\n",(0,r.jsxs)(n.p,{children:["When implementing a serializer for a custom Map type, you must extend ",(0,r.jsx)(n.code,{children:"MapSerializer"})," or ",(0,r.jsx)(n.code,{children:"AbstractMapSerializer"}),". The key difference between these two is that ",(0,r.jsx)(n.code,{children:"AbstractMapSerializer"})," can serialize a class which has a map-like structure but is not a java Map subtype."]}),"\n",(0,r.jsxs)(n.p,{children:["Similiar to collection serializer, this is a special parameter ",(0,r.jsx)(n.code,{children:"supportCodegenHook"})," needs be configured:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["When ",(0,r.jsx)(n.code,{children:"true"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Enables optimized access to map elements and JIT compilation for better performance"}),"\n",(0,r.jsx)(n.li,{children:"Direct serialization invocation and inline for map key-value items without dynamic serializer dispatch cost."}),"\n",(0,r.jsx)(n.li,{children:"Better performance for standard map types"}),"\n",(0,r.jsx)(n.li,{children:"Recommended for most maps"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["When ",(0,r.jsx)(n.code,{children:"false"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Uses interfaced-based element access and dynamic serializer dispatch for elements, which have higer cost"}),"\n",(0,r.jsx)(n.li,{children:"More flexible for custom map types"}),"\n",(0,r.jsx)(n.li,{children:"Required when map has special serialization needs"}),"\n",(0,r.jsx)(n.li,{children:"Handles complex map implementations"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"implement-map-serializer-with-jit-support",children:"Implement Map Serializer with JIT support"}),"\n",(0,r.jsxs)(n.p,{children:["When implementing a Map serializer with JIT support, you can leverage Fory's existing chunk-based binary format and map serialization infrastructure. The key is to properly implement the ",(0,r.jsx)(n.code,{children:"onMapWrite"})," and ",(0,r.jsx)(n.code,{children:"newMap"})," methods to handle metadata while letting Fory handle the map key-value serialization."]}),"\n",(0,r.jsx)(n.p,{children:"Here's an example of implementing a custom map serializer:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"public class CustomMapSerializer<T extends Map> extends MapSerializer<T> {\n    public CustomMapSerializer(Fory fory, Class<T> cls) {\n        // supportCodegenHook is a critical parameter that determines serialization behavior\n        super(fory, cls, true);\n    }\n\n    @Override\n    public Map onMapWrite(MemoryBuffer buffer, T value) {\n        // Write map size\n        buffer.writeVarUint32Small7(value.size());\n        // Write any additional map metadata here\n        return value;\n    }\n\n    @Override\n    public Map newMap(MemoryBuffer buffer) {\n        // Read map size\n        int numElements = buffer.readVarUint32Small7();\n        setNumElements(numElements);\n        // Create and return new map instance\n        T map = (T) new HashMap(numElements);\n        fory.getRefResolver().reference(map);\n        return map;\n    }\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Note that please invoke ",(0,r.jsx)(n.code,{children:"setNumElements"})," when implementing ",(0,r.jsx)(n.code,{children:"newMap"})," to let fory know how many elements to deserialize."]}),"\n",(0,r.jsx)(n.h4,{id:"implement-a-totally-customzied-map-serializer-without-jit",children:"Implement a totally-customzied Map Serializer without JIT"}),"\n",(0,r.jsxs)(n.p,{children:["Sometimes you may need complete control over the serialization process, or your map type might have special requirements that don't fit the standard patterns. In such cases, you can implement a serializer with ",(0,r.jsx)(n.code,{children:"supportCodegenHook=false"})," and directly override the ",(0,r.jsx)(n.code,{children:"write"})," and ",(0,r.jsx)(n.code,{children:"read"})," methods."]}),"\n",(0,r.jsx)(n.p,{children:"This approach:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Gives you full control over serialization"}),"\n",(0,r.jsx)(n.li,{children:"Allows custom binary format"}),"\n",(0,r.jsx)(n.li,{children:"Bypasses the standard map serialization pattern"}),"\n",(0,r.jsx)(n.li,{children:"May be simpler for special cases"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Here's an example:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"class FixedValueMap extends AbstractMap<String, Integer> {\n    private final Set<String> keys;\n    private final int fixedValue;\n\n    public FixedValueMap(Set<String> keys, int fixedValue) {\n        this.keys = keys;\n        this.fixedValue = fixedValue;\n    }\n\n    @Override\n    public Set<Entry<String, Integer>> entrySet() {\n        Set<Entry<String, Integer>> entries = new HashSet<>();\n        for (String key : keys) {\n            entries.add(new SimpleEntry<>(key, fixedValue));\n        }\n        return entries;\n    }\n\n    @Override\n    public Integer get(Object key) {\n        return keys.contains(key) ? fixedValue : null;\n    }\n\n    public Set<String> getKeys() {\n        return keys;\n    }\n\n    public int getFixedValue() {\n        return fixedValue;\n    }\n}\n\nclass FixedValueMapSerializer extends AbstractMapSerializer<FixedValueMap> {\n    public FixedValueMapSerializer(Fory fory) {\n        // Disable codegen since we're handling serialization directly\n        super(fory, FixedValueMap.class, false);\n    }\n\n    @Override\n    public void write(MemoryBuffer buffer, FixedValueMap value) {\n        // Write the fixed value\n        buffer.writeInt32(value.getFixedValue());\n        // Write the number of keys\n        buffer.writeVarUint32Small7(value.getKeys().size());\n        // Write each key\n        for (String key : value.getKeys()) {\n            buffer.writeString(key);\n        }\n    }\n\n    @Override\n    public FixedValueMap read(MemoryBuffer buffer) {\n        // Read the fixed value\n        int fixedValue = buffer.readInt32();\n        // Read the number of keys\n        int size = buffer.readVarUint32Small7();\n        Set<String> keys = new HashSet<>(size);\n        for (int i = 0; i < size; i++) {\n            keys.add(buffer.readString());\n        }\n        return new FixedValueMap(keys, fixedValue);\n    }\n\n    // These methods are not used when supportCodegenHook is false\n    @Override\n    public Map onMapWrite(MemoryBuffer buffer, FixedValueMap value) {\n        throw new UnsupportedOperationException();\n    }\n\n    @Override\n    public FixedValueMap onMapRead(Map map) {\n        throw new UnsupportedOperationException();\n    }\n\n    @Override\n    public FixedValueMap onMapCopy(Map map) {\n        throw new UnsupportedOperationException();\n    }\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:"Key Points:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Disable Codegen"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Set ",(0,r.jsx)(n.code,{children:"supportCodegenHook=false"})," in constructor"]}),"\n",(0,r.jsxs)(n.li,{children:["Fory will use your ",(0,r.jsx)(n.code,{children:"write"}),"/",(0,r.jsx)(n.code,{children:"read"})," methods directly"]}),"\n",(0,r.jsx)(n.li,{children:"No JIT optimization will be applied"}),"\n",(0,r.jsx)(n.li,{children:"Full control over serialization format"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Write Method"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Handle all serialization manually"}),"\n",(0,r.jsx)(n.li,{children:"Write custom fields first"}),"\n",(0,r.jsx)(n.li,{children:"Write map entries in your preferred format"}),"\n",(0,r.jsx)(n.li,{children:"Control the exact binary layout"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Read Method"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Handle all deserialization manually"}),"\n",(0,r.jsx)(n.li,{children:"Read in same order as written"}),"\n",(0,r.jsx)(n.li,{children:"Create and populate map instance"}),"\n",(0,r.jsx)(n.li,{children:"Restore custom fields"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Unused Methods"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"onMapWrite"}),", ",(0,r.jsx)(n.code,{children:"onMapRead"}),", ",(0,r.jsx)(n.code,{children:"onMapCopy"})," are not used"]}),"\n",(0,r.jsxs)(n.li,{children:["Can throw ",(0,r.jsx)(n.code,{children:"UnsupportedOperationException"})]}),"\n",(0,r.jsxs)(n.li,{children:["Only ",(0,r.jsx)(n.code,{children:"write"})," and ",(0,r.jsx)(n.code,{children:"read"})," are important"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"When to Use: this approach is best when"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Map has custom fields or metadata"}),"\n",(0,r.jsx)(n.li,{children:"Special serialization format is needed"}),"\n",(0,r.jsx)(n.li,{children:"Complete control over binary format is required"}),"\n",(0,r.jsx)(n.li,{children:"Standard map patterns don't fit"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Trade-offs"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Advantages"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Complete control over serialization"}),"\n",(0,r.jsx)(n.li,{children:"Custom binary format possible"}),"\n",(0,r.jsx)(n.li,{children:"Simpler implementation for special cases"}),"\n",(0,r.jsx)(n.li,{children:"Direct handling of custom fields"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Disadvantages"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"No JIT optimization"}),"\n",(0,r.jsx)(n.li,{children:"Potentially lower performance"}),"\n",(0,r.jsx)(n.li,{children:"Manual handling of all serialization"}),"\n",(0,r.jsx)(n.li,{children:"More code to maintain"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Remember that disabling codegen means giving up some performance optimizations that Fory provides. Only use this approach when the standard map serialization pattern doesn't meet your needs."}),"\n",(0,r.jsx)(n.h4,{id:"implement-serializer-for-map-like-types",children:"Implement Serializer for Map-like Types"}),"\n",(0,r.jsx)(n.p,{children:"Sometimes you may want to implement a serializer for a type that behaves like a map but isn't a standard Java map. This section demonstrates how to implement a serializer for such types."}),"\n",(0,r.jsx)(n.p,{children:"The key principles for map-like type serialization are:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["Extend ",(0,r.jsx)(n.code,{children:"AbstractMapSerializer"})," for custom collection-like types"]}),"\n",(0,r.jsxs)(n.li,{children:["Enable JIT optimization with ",(0,r.jsx)(n.code,{children:"supportCodegenHook"})]}),"\n",(0,r.jsx)(n.li,{children:"Provide efficient element access through views"}),"\n",(0,r.jsx)(n.li,{children:"Maintain proper size tracking"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Here's a complete example:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"// It's better to make it to implements the java.util.Map interface, in this way we don't have to implement such serializers by ourself.\nclass CustomMapLike {\n    private final Object[] keyArray;\n    private final Object[] valueArray;\n    private final int size;\n\n    // Constructor for creating new instance\n    public CustomMapLike(int initialCapacity) {\n        this.keyArray = new Object[initialCapacity];\n        this.valueArray = new Object[initialCapacity];\n        this.size = 0;\n    }\n\n    // Constructor for wrapping existing arrays\n    public CustomMapLike(Object[] keyArray, Object[] valueArray, int size) {\n        this.keyArray = keyArray;\n        this.valueArray = valueArray;\n        this.size = size;\n    }\n\n    public Integer get(String key) {\n        for (int i = 0; i < size; i++) {\n            if (key.equals(keyArray[i])) {\n                return (Integer) valueArray[i];\n            }\n        }\n        return null;\n    }\n\n    public int size() {\n        return size;\n    }\n\n    public Object[] getKeyArray() {\n        return keyArray;\n    }\n\n    public Object[] getValueArray() {\n        return valueArray;\n    }\n}\n\nclass MapView extends AbstractMap<Object, Object> {\n    private final Object[] keyArray;\n    private final Object[] valueArray;\n    private final int size;\n    private int writeIndex;\n\n    // Constructor for serialization (wrapping existing CustomMapLike)\n    public MapView(CustomMapLike mapLike) {\n        this.size = mapLike.size();\n        this.keyArray = mapLike.getKeyArray();\n        this.valueArray = mapLike.getValueArray();\n    }\n\n    // Constructor for deserialization\n    public MapView(int size) {\n        this.size = size;\n        this.keyArray = new Object[size];\n        this.valueArray = new Object[size];\n    }\n\n    @Override\n    public Set<Entry<Object, Object>> entrySet() {\n        return new AbstractSet<Entry<Object, Object>>() {\n            @Override\n            public Iterator<Entry<Object, Object>> iterator() {\n                return new Iterator<Entry<Object, Object>>() {\n                    private int index = 0;\n\n                    @Override\n                    public boolean hasNext() {\n                        return index < size;\n                    }\n\n                    @Override\n                    public Entry<Object, Object> next() {\n                        if (!hasNext()) {\n                            throw new NoSuchElementException();\n                        }\n                        final int currentIndex = index++;\n                        return new SimpleEntry<>(\n                            keyArray[currentIndex],\n                            valueArray[currentIndex]\n                        );\n                    }\n                };\n            }\n\n            @Override\n            public int size() {\n                return size;\n            }\n        };\n    }\n\n    @Override\n    public Object put(Object key, Object value) {\n        if (writeIndex >= size) {\n            throw new IllegalStateException(\"Map is full\");\n        }\n        keyArray[writeIndex] = key;\n        valueArray[writeIndex] = value;\n        writeIndex++;\n        return null;\n    }\n\n    public Object[] getKeyArray() {\n        return keyArray;\n    }\n\n    public Object[] getValueArray() {\n        return valueArray;\n    }\n\n    public int size() {\n        return size;\n    }\n}\n\nclass CustomMapLikeSerializer extends AbstractMapSerializer<CustomMapLike> {\n    public CustomMapLikeSerializer(Fory fory) {\n        super(fory, CustomMapLike.class, true);\n    }\n\n    @Override\n    public Map onMapWrite(MemoryBuffer buffer, CustomMapLike value) {\n        buffer.writeVarUint32Small7(value.size());\n        // Return a zero-copy view using the same underlying arrays\n        return new MapView(value);\n    }\n\n    @Override\n    public Map newMap(MemoryBuffer buffer) {\n        int numElements = buffer.readVarUint32Small7();\n        setNumElements(numElements);\n        // Create a view with new arrays for deserialization\n        return new MapView(numElements);\n    }\n\n    @Override\n    public CustomMapLike onMapRead(Map map) {\n        MapView view = (MapView) map;\n        // Just pass the arrays directly - no copying needed\n        return new CustomMapLike(view.getKeyArray(), view.getValueArray(), view.size());\n    }\n\n    @Override\n    public CustomMapLike onMapCopy(Map map) {\n        MapView view = (MapView) map;\n        // Just pass the arrays directly - no copying needed\n        return new CustomMapLike(view.getKeyArray(), view.getValueArray(), view.size());\n    }\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"register-custom-serializers",children:"Register Custom Serializers"}),"\n",(0,r.jsx)(n.p,{children:"After implementing your custom serializer, register it with Fory:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"Fory fory = Fory.builder()\n    .withLanguage(Language.JAVA)\n    .build();\n\n// Register map serializer\nfory.registerSerializer(CustomMap.class, new CustomMapSerializer<>(fory, CustomMap.class));\n\n// Register collection serializer\nfory.registerSerializer(CustomCollection.class, new CustomCollectionSerializer<>(fory, CustomCollection.class));\n"})}),"\n",(0,r.jsx)(n.p,{children:"Note that when implementing custom map or collection serializers:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["Always extend the appropriate base class (",(0,r.jsx)(n.code,{children:"MapSerializer"}),"/",(0,r.jsx)(n.code,{children:"AbstractMapSerializer"})," for maps, ",(0,r.jsx)(n.code,{children:"CollectionSerializer"}),"/",(0,r.jsx)(n.code,{children:"AbstractCollectionSerializer"})," for collections)"]}),"\n",(0,r.jsxs)(n.li,{children:["Consider the impact of ",(0,r.jsx)(n.code,{children:"supportCodegenHook"})," on performance and functionality"]}),"\n",(0,r.jsx)(n.li,{children:"Properly handle reference tracking if needed"}),"\n",(0,r.jsxs)(n.li,{children:["Implement proper size management using ",(0,r.jsx)(n.code,{children:"setNumElements"})," and ",(0,r.jsx)(n.code,{children:"getAndClearNumElements"})," when ",(0,r.jsx)(n.code,{children:"supportCodegenHook"})," is ",(0,r.jsx)(n.code,{children:"true"})]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"security--class-registration",children:"Security & Class Registration"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"ForyBuilder#requireClassRegistration"})," can be used to disable class registration, this will allow to deserialize objects\nunknown types,\nmore flexible but ",(0,r.jsx)(n.strong,{children:"may be insecure if the classes contains malicious code"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Do not disable class registration unless you can ensure your environment is secure"}),".\nMalicious code in ",(0,r.jsx)(n.code,{children:"init/equals/hashCode"})," can be executed when deserializing unknown/untrusted types when this option\ndisabled."]}),"\n",(0,r.jsx)(n.p,{children:"Class registration can not only reduce security risks, but also avoid classname serialization cost."}),"\n",(0,r.jsxs)(n.p,{children:["You can register class with API ",(0,r.jsx)(n.code,{children:"Fory#register"}),"."]}),"\n",(0,r.jsx)(n.p,{children:"Note that class registration order is important, serialization and deserialization peer\nshould have same registration order."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"Fory fory = xxx;\nfory.register(SomeClass.class);\nfory.register(SomeClass1.class, 200);\n"})}),"\n",(0,r.jsxs)(n.p,{children:["If you invoke ",(0,r.jsx)(n.code,{children:"ForyBuilder#requireClassRegistration(false)"})," to disable class registration check,\nyou can set ",(0,r.jsx)(n.code,{children:"org.apache.fory.resolver.ClassChecker"})," by ",(0,r.jsx)(n.code,{children:"ClassResolver#setClassChecker"})," to control which classes are\nallowed\nfor serialization. For example, you can allow classes started with ",(0,r.jsx)(n.code,{children:"org.example.*"})," by:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'Fory fory = xxx;\nfory.getClassResolver().setClassChecker(\n  (classResolver, className) -> className.startsWith("org.example."));\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'AllowListChecker checker = new AllowListChecker(AllowListChecker.CheckLevel.STRICT);\nThreadSafeFory fory = new ThreadLocalFory(classLoader -> {\n  Fory f = Fory.builder().requireClassRegistration(true).withClassLoader(classLoader).build();\n  f.getClassResolver().setClassChecker(checker);\n  checker.addListener(f.getClassResolver());\n  return f;\n});\nchecker.allowClass("org.example.*");\n'})}),"\n",(0,r.jsxs)(n.p,{children:["Fory also provided a ",(0,r.jsx)(n.code,{children:"org.apache.fory.resolver.AllowListChecker"})," which is allowed/disallowed list based checker to\nsimplify\nthe customization of class check mechanism. You can use this checker or implement more sophisticated checker by\nyourself."]}),"\n",(0,r.jsx)(n.h3,{id:"register-class-by-name",children:"Register class by name"}),"\n",(0,r.jsxs)(n.p,{children:["Register class by id will have better performance and smaller space overhead. But in some cases, management for a bunch\nof type id is complex. In such cases, registering class by name using API\n",(0,r.jsx)(n.code,{children:"register(Class<?> cls, String namespace, String typeName)"})," is recommended."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'fory.register(Foo.class, "demo", "Foo");\n'})}),"\n",(0,r.jsxs)(n.p,{children:["If there are no duplicate name for type, ",(0,r.jsx)(n.code,{children:"namespace"})," can be left as empty to reduce serialized size."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Do not use this API to register class since it will increase serialized size a lot compared to register\nclass by id"})}),"\n",(0,r.jsx)(n.h3,{id:"serializer-registration",children:"Serializer Registration"}),"\n",(0,r.jsxs)(n.p,{children:["You can also register a custom serializer for a class by ",(0,r.jsx)(n.code,{children:"Fory#registerSerializer"})," API."]}),"\n",(0,r.jsxs)(n.p,{children:["Or implement ",(0,r.jsx)(n.code,{children:"java.io.Externalizable"})," for a class."]}),"\n",(0,r.jsx)(n.h3,{id:"zero-copy-serialization",children:"Zero-Copy Serialization"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'import org.apache.fory.*;\nimport org.apache.fory.config.*;\nimport org.apache.fory.serializer.BufferObject;\nimport org.apache.fory.memory.MemoryBuffer;\n\nimport java.util.*;\nimport java.util.stream.Collectors;\n\npublic class ZeroCopyExample {\n  // Note that fory instance should be reused instead of creation every time.\n  static Fory fory = Fory.builder()\n    .withLanguage(Language.JAVA)\n    .build();\n\n  // mvn exec:java -Dexec.mainClass="io.ray.fory.examples.ZeroCopyExample"\n  public static void main(String[] args) {\n    List<Object> list = Arrays.asList("str", new byte[1000], new int[100], new double[100]);\n    Collection<BufferObject> bufferObjects = new ArrayList<>();\n    byte[] bytes = fory.serialize(list, e -> !bufferObjects.add(e));\n    List<MemoryBuffer> buffers = bufferObjects.stream()\n      .map(BufferObject::toBuffer).collect(Collectors.toList());\n    System.out.println(fory.deserialize(bytes, buffers));\n  }\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"meta-sharing",children:"Meta Sharing"}),"\n",(0,r.jsx)(n.p,{children:"Fory supports share type metadata (class name, field name, final field type information, etc.) between multiple\nserializations in a context (ex. TCP connection), and this information will be sent to the peer during the first\nserialization in the context. Based on this metadata, the peer can rebuild the same deserializer, which avoids\ntransmitting metadata for subsequent serializations and reduces network traffic pressure and supports type\nforward/backward compatibility automatically."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"// Fory.builder()\n//   .withLanguage(Language.JAVA)\n//   .withRefTracking(false)\n//   // share meta across serialization.\n//   .withMetaContextShare(true)\n// Not thread-safe fory.\nMetaContext context = xxx;\nfory.getSerializationContext().setMetaContext(context);\nbyte[] bytes = fory.serialize(o);\n// Not thread-safe fory.\nMetaContext context = xxx;\nfory.getSerializationContext().setMetaContext(context);\nfory.deserialize(bytes);\n\n// Thread-safe fory\nfory.setClassLoader(beanA.getClass().getClassLoader());\nbyte[] serialized = fory.execute(\n  f -> {\n    f.getSerializationContext().setMetaContext(context);\n    return f.serialize(beanA);\n  }\n);\n// thread-safe fory\nfory.setClassLoader(beanA.getClass().getClassLoader());\nObject newObj = fory.execute(\n  f -> {\n    f.getSerializationContext().setMetaContext(context);\n    return f.deserialize(serialized);\n  }\n);\n"})}),"\n",(0,r.jsx)(n.h3,{id:"deserialize-non-existent-classes",children:"Deserialize non-existent classes"}),"\n",(0,r.jsxs)(n.p,{children:["Fory support deserializing non-existent classes, this feature can be enabled\nby ",(0,r.jsx)(n.code,{children:"ForyBuilder#deserializeNonexistentClass(true)"}),". When enabled, and metadata sharing enabled, Fory will store\nthe deserialized data of this type in a lazy subclass of Map. By using the lazy map implemented by Fory, the rebalance\ncost of filling map during deserialization can be avoided, which further improves performance. If this data is sent to\nanother process and the class exists in this process, the data will be deserialized into the object of this type without\nlosing any information."]}),"\n",(0,r.jsxs)(n.p,{children:["If metadata sharing is not enabled, the new class data will be skipped and an ",(0,r.jsx)(n.code,{children:"NonexistentSkipClass"})," stub object will be\nreturned."]}),"\n",(0,r.jsx)(n.h3,{id:"copingmapping-object-from-one-type-to-another-type",children:"Coping/Mapping object from one type to another type"}),"\n",(0,r.jsx)(n.p,{children:"Fory support mapping object from one type to another type."}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsx)(n.p,{children:"Notes:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"This mapping will execute a deep copy, all mapped fields are serialized into binary and\ndeserialized from that binary to map into another type."}),"\n",(0,r.jsxs)(n.li,{children:["All struct types must be registered with same ID, otherwise Fory can not mapping to correct struct type.\nBe careful when you use ",(0,r.jsx)(n.code,{children:"Fory#register(Class)"}),", because fory will allocate an auto-grown ID which might be\ninconsistent if you register classes with different order between Fory instance."]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'public class StructMappingExample {\n  static class Struct1 {\n    int f1;\n    String f2;\n\n    public Struct1(int f1, String f2) {\n      this.f1 = f1;\n      this.f2 = f2;\n    }\n  }\n\n  static class Struct2 {\n    int f1;\n    String f2;\n    double f3;\n  }\n\n  static ThreadSafeFory fory1 = Fory.builder()\n    .withCompatibleMode(CompatibleMode.COMPATIBLE).buildThreadSafeFory();\n  static ThreadSafeFory fory2 = Fory.builder()\n    .withCompatibleMode(CompatibleMode.COMPATIBLE).buildThreadSafeFory();\n\n  static {\n    fory1.register(Struct1.class);\n    fory2.register(Struct2.class);\n  }\n\n  public static void main(String[] args) {\n    Struct1 struct1 = new Struct1(10, "abc");\n    Struct2 struct2 = (Struct2) fory2.deserialize(fory1.serialize(struct1));\n    Assert.assertEquals(struct2.f1, struct1.f1);\n    Assert.assertEquals(struct2.f2, struct1.f2);\n    struct1 = (Struct1) fory1.deserialize(fory2.serialize(struct2));\n    Assert.assertEquals(struct1.f1, struct2.f1);\n    Assert.assertEquals(struct1.f2, struct2.f2);\n  }\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"migration",children:"Migration"}),"\n",(0,r.jsx)(n.h3,{id:"jdk-migration",children:"JDK migration"}),"\n",(0,r.jsxs)(n.p,{children:["If you use jdk serialization before, and you can't upgrade your client and server at the same time, which is common for\nonline application. Fory provided an util method ",(0,r.jsx)(n.code,{children:"org.apache.fory.serializer.JavaSerializer.serializedByJDK"})," to check\nwhether\nthe binary are generated by jdk serialization, you use following pattern to make exiting serialization protocol-aware,\nthen upgrade serialization to fory in an async rolling-up way:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"if (JavaSerializer.serializedByJDK(bytes)) {\n  ObjectInputStream objectInputStream=xxx;\n  return objectInputStream.readObject();\n} else {\n  return fory.deserialize(bytes);\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"upgrade-fory",children:"Upgrade fory"}),"\n",(0,r.jsxs)(n.p,{children:["Currently binary compatibility is ensured for minor versions only. For example, if you are using fory",(0,r.jsx)(n.code,{children:"v0.2.0"}),", binary\ncompatibility will\nbe provided if you upgrade to fory ",(0,r.jsx)(n.code,{children:"v0.2.1"}),". But if upgrade to fory ",(0,r.jsx)(n.code,{children:"v0.4.1"}),", no binary compatibility are ensured.\nMost of the time there is no need to upgrade fory to newer major version, the current version is fast and compact\nenough,\nand we provide some minor fix for recent older versions."]}),"\n",(0,r.jsx)(n.p,{children:"But if you do want to upgrade fory for better performance and smaller size, you need to write fory version as header to\nserialized data\nusing code like following to keep binary compatibility:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"MemoryBuffer buffer = xxx;\nbuffer.writeVarInt32(2);\nfory.serialize(buffer, obj);\n"})}),"\n",(0,r.jsx)(n.p,{children:"Then for deserialization, you need:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"MemoryBuffer buffer = xxx;\nint foryVersion = buffer.readVarInt32();\nFory fory = getFory(foryVersion);\nfory.deserialize(buffer);\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"getFory"})," is a method to load corresponding fory, you can shade and relocate different version of fory to different\npackage, and load fory by version."]}),"\n",(0,r.jsxs)(n.p,{children:["If you upgrade fory by minor version, or you won't have data serialized by older fory, you can upgrade fory directly,\nno need to ",(0,r.jsx)(n.code,{children:"versioning"})," the data."]}),"\n",(0,r.jsx)(n.h2,{id:"trouble-shooting",children:"Trouble shooting"}),"\n",(0,r.jsx)(n.h3,{id:"class-inconsistency-and-class-version-check",children:"Class inconsistency and class version check"}),"\n",(0,r.jsxs)(n.p,{children:["If you create fory without setting ",(0,r.jsx)(n.code,{children:"CompatibleMode"})," to ",(0,r.jsx)(n.code,{children:"org.apache.fory.config.CompatibleMode.COMPATIBLE"}),", and you got a\nstrange\nserialization error, it may be caused by class inconsistency between serialization peer and deserialization peer."]}),"\n",(0,r.jsxs)(n.p,{children:["In such cases, you can invoke ",(0,r.jsx)(n.code,{children:"ForyBuilder#withClassVersionCheck"})," to create fory to validate it, if deserialization\nthrows ",(0,r.jsx)(n.code,{children:"org.apache.fory.exception.ClassNotCompatibleException"}),", it shows class are inconsistent, and you should create\nfory with\n",(0,r.jsx)(n.code,{children:"ForyBuilder#withCompaibleMode(CompatibleMode.COMPATIBLE)"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"CompatibleMode.COMPATIBLE"})," has more performance and space cost, do not set it by default if your classes are always\nconsistent between serialization and deserialization."]}),"\n",(0,r.jsx)(n.h3,{id:"deserialize-pojo-into-another-type",children:"Deserialize POJO into another type"}),"\n",(0,r.jsxs)(n.p,{children:["Fory allows you to serialize one POJO and deserialize it into a different POJO. The different POJO means the schema inconsistency. Users must to configure Fory with\n",(0,r.jsx)(n.code,{children:"CompatibleMode"})," set to ",(0,r.jsx)(n.code,{children:"org.apache.fory.config.CompatibleMode.COMPATIBLE"}),"."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'public class DeserializeIntoType {\n  static class Struct1 {\n    int f1;\n    String f2;\n\n    public Struct1(int f1, String f2) {\n      this.f1 = f1;\n      this.f2 = f2;\n    }\n  }\n\n  static class Struct2 {\n    int f1;\n    String f2;\n    double f3;\n  }\n\n  static ThreadSafeFory fory = Fory.builder()\n    .withCompatibleMode(CompatibleMode.COMPATIBLE).buildThreadSafeFory();\n\n  public static void main(String[] args) {\n    Struct1 struct1 = new Struct1(10, "abc");\n    byte[] data = fory.serializeJavaObject(struct1);\n    Struct2 struct2 = (Struct2) fory.deserializeJavaObject(bytes, Struct2.class);\n  }\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"use-wrong-api-for-deserialization",children:"Use wrong API for deserialization"}),"\n",(0,r.jsxs)(n.p,{children:["If you serialize an object by invoking ",(0,r.jsx)(n.code,{children:"Fory#serialize"}),", you should invoke ",(0,r.jsx)(n.code,{children:"Fory#deserialize"})," for deserialization\ninstead of\n",(0,r.jsx)(n.code,{children:"Fory#deserializeJavaObject"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["If you serialize an object by invoking ",(0,r.jsx)(n.code,{children:"Fory#serializeJavaObject"}),", you should invoke ",(0,r.jsx)(n.code,{children:"Fory#deserializeJavaObject"})," for\ndeserialization instead of ",(0,r.jsx)(n.code,{children:"Fory#deserializeJavaObjectAndClass"}),"/",(0,r.jsx)(n.code,{children:"Fory#deserialize"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["If you serialize an object by invoking ",(0,r.jsx)(n.code,{children:"Fory#serializeJavaObjectAndClass"}),", you should\ninvoke ",(0,r.jsx)(n.code,{children:"Fory#deserializeJavaObjectAndClass"})," for deserialization instead\nof ",(0,r.jsx)(n.code,{children:"Fory#deserializeJavaObject"}),"/",(0,r.jsx)(n.code,{children:"Fory#deserialize"}),"."]})]})}function h(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},11151:(e,n,i)=>{i.d(n,{Z:()=>l,a:()=>a});var r=i(67294);const s={},t=r.createContext(s);function a(e){const n=r.useContext(t);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),r.createElement(t.Provider,{value:n},e.children)}}}]);