"use strict";(self.webpackChunkfury_site=self.webpackChunkfury_site||[]).push([[6283],{40211:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>c,contentTitle:()=>i,default:()=>f,frontMatter:()=>a,metadata:()=>s,toc:()=>d});var o=n(85893),t=n(11151);const a={title:"Row Format Guide",sidebar_position:1,id:"row_format_guide",license:'Licensed to the Apache Software Foundation (ASF) under one or more\ncontributor license agreements.  See the NOTICE file distributed with\nthis work for additional information regarding copyright ownership.\nThe ASF licenses this file to You under the Apache License, Version 2.0\n(the "License"); you may not use this file except in compliance with\nthe License.  You may obtain a copy of the License at\n\n   http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an "AS IS" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n'},i=void 0,s={id:"guide/row_format_guide",title:"Row Format Guide",description:"Row format protocol",source:"@site/docs/guide/row_format_guide.md",sourceDirName:"guide",slug:"/guide/row_format_guide",permalink:"/docs/guide/row_format_guide",draft:!1,unlisted:!1,editUrl:"https://github.com/apache/fury-site/tree/main/docs/guide/row_format_guide.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{title:"Row Format Guide",sidebar_position:1,id:"row_format_guide",license:'Licensed to the Apache Software Foundation (ASF) under one or more\ncontributor license agreements.  See the NOTICE file distributed with\nthis work for additional information regarding copyright ownership.\nThe ASF licenses this file to You under the Apache License, Version 2.0\n(the "License"); you may not use this file except in compliance with\nthe License.  You may obtain a copy of the License at\n\n   http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an "AS IS" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n'},sidebar:"guideSidebar",previous:{title:"Java Serialization Guide",permalink:"/docs/guide/java_object_graph_guide"},next:{title:"Xlang Serialization Guide",permalink:"/docs/guide/xlang_object_graph_guide"}},c={},d=[{value:"Row format protocol",id:"row-format-protocol",level:2},{value:"Java",id:"java",level:3},{value:"Python",id:"python",level:3},{value:"Apache Arrow Support",id:"apache-arrow-support",level:3}];function l(e){const r={code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,t.a)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(r.h2,{id:"row-format-protocol",children:"Row format protocol"}),"\n",(0,o.jsx)(r.h3,{id:"java",children:"Java"}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-java",children:'public class Bar {\n  String f1;\n  List<Long> f2;\n}\n\npublic class Foo {\n  int f1;\n  List<Integer> f2;\n  Map<String, Integer> f3;\n  List<Bar> f4;\n}\n\nRowEncoder<Foo> encoder = Encoders.bean(Foo.class);\nFoo foo = new Foo();\nfoo.f1 = 10;\nfoo.f2 = IntStream.range(0, 1000000).boxed().collect(Collectors.toList());\nfoo.f3 = IntStream.range(0, 1000000).boxed().collect(Collectors.toMap(i -> "k"+i, i->i));\nList<Bar> bars = new ArrayList<>(1000000);\nfor (int i = 0; i < 1000000; i++) {\n  Bar bar = new Bar();\n  bar.f1 = "s"+i;\n  bar.f2 = LongStream.range(0, 10).boxed().collect(Collectors.toList());\n  bars.add(bar);\n}\nfoo.f4 = bars;\n// Can be zero-copy read by python\nBinaryRow binaryRow = encoder.toRow(foo);\n// can be data from python\nFoo newFoo = encoder.fromRow(binaryRow);\n// zero-copy read List<Integer> f2\nBinaryArray binaryArray2 = binaryRow.getArray(1);\n// zero-copy read List<Bar> f4\nBinaryArray binaryArray4 = binaryRow.getArray(3);\n// zero-copy read 11th element of `readList<Bar> f4`\nBinaryRow barStruct = binaryArray4.getStruct(10);\n\n// zero-copy read 6th of f2 of 11th element of `readList<Bar> f4`\nbarStruct.getArray(1).getInt64(5);\nRowEncoder<Bar> barEncoder = Encoders.bean(Bar.class);\n// deserialize part of data.\nBar newBar = barEncoder.fromRow(barStruct);\nBar newBar2 = barEncoder.fromRow(binaryArray4.getStruct(20));\n'})}),"\n",(0,o.jsx)(r.h3,{id:"python",children:"Python"}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-python",children:'@dataclass\nclass Bar:\n    f1: str\n    f2: List[pa.int64]\n@dataclass\nclass Foo:\n    f1: pa.int32\n    f2: List[pa.int32]\n    f3: Dict[str, pa.int32]\n    f4: List[Bar]\n\nencoder = pyfury.encoder(Foo)\nfoo = Foo(f1=10, f2=list(range(1000_000)),\n         f3={f"k{i}": i for i in range(1000_000)},\n         f4=[Bar(f1=f"s{i}", f2=list(range(10))) for i in range(1000_000)])\nbinary: bytes = encoder.to_row(foo).to_bytes()\nprint(f"start: {datetime.datetime.now()}")\nfoo_row = pyfury.RowData(encoder.schema, binary)\nprint(foo_row.f2[100000], foo_row.f4[100000].f1, foo_row.f4[200000].f2[5])\nprint(f"end: {datetime.datetime.now()}")\n\nbinary = pickle.dumps(foo)\nprint(f"pickle start: {datetime.datetime.now()}")\nnew_foo = pickle.loads(binary)\nprint(new_foo.f2[100000], new_foo.f4[100000].f1, new_foo.f4[200000].f2[5])\nprint(f"pickle end: {datetime.datetime.now()}")\n'})}),"\n",(0,o.jsx)(r.h3,{id:"apache-arrow-support",children:"Apache Arrow Support"}),"\n",(0,o.jsx)(r.p,{children:"Fury Format also supports automatic conversion from/to Arrow Table/RecordBatch."}),"\n",(0,o.jsx)(r.p,{children:"Java:"}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-java",children:"Schema schema = TypeInference.inferSchema(BeanA.class);\nArrowWriter arrowWriter = ArrowUtils.createArrowWriter(schema);\nEncoder<BeanA> encoder = Encoders.rowEncoder(BeanA.class);\nfor (int i = 0; i < 10; i++) {\n  BeanA beanA = BeanA.createBeanA(2);\n  arrowWriter.write(encoder.toRow(beanA));\n}\nreturn arrowWriter.finishAsRecordBatch();\n"})}),"\n",(0,o.jsx)(r.p,{children:"Python:"}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-python",children:"import pyfury\nencoder = pyfury.encoder(Foo)\nencoder.to_arrow_record_batch([foo] * 10000)\nencoder.to_arrow_table([foo] * 10000)\n"})}),"\n",(0,o.jsx)(r.p,{children:"C++"}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-c++",children:"std::shared_ptr<ArrowWriter> arrow_writer;\nEXPECT_TRUE(\n    ArrowWriter::Make(schema, ::arrow::default_memory_pool(), &arrow_writer)\n        .ok());\nfor (auto &row : rows) {\n  EXPECT_TRUE(arrow_writer->Write(row).ok());\n}\nstd::shared_ptr<::arrow::RecordBatch> record_batch;\nEXPECT_TRUE(arrow_writer->Finish(&record_batch).ok());\nEXPECT_TRUE(record_batch->Validate().ok());\nEXPECT_EQ(record_batch->num_columns(), schema->num_fields());\nEXPECT_EQ(record_batch->num_rows(), row_nums);\n"})}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-java",children:"Schema schema = TypeInference.inferSchema(BeanA.class);\nArrowWriter arrowWriter = ArrowUtils.createArrowWriter(schema);\nEncoder<BeanA> encoder = Encoders.rowEncoder(BeanA.class);\nfor (int i = 0; i < 10; i++) {\n  BeanA beanA = BeanA.createBeanA(2);\n  arrowWriter.write(encoder.toRow(beanA));\n}\nreturn arrowWriter.finishAsRecordBatch();\n"})})]})}function f(e={}){const{wrapper:r}={...(0,t.a)(),...e.components};return r?(0,o.jsx)(r,{...e,children:(0,o.jsx)(l,{...e})}):l(e)}},11151:(e,r,n)=>{n.d(r,{Z:()=>s,a:()=>i});var o=n(67294);const t={},a=o.createContext(t);function i(e){const r=o.useContext(a);return o.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function s(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:i(e.components),o.createElement(a.Provider,{value:r},e.children)}}}]);